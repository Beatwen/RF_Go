@using RF_Go.Models
@using RF_Go.ViewModels
@using MudBlazor
@using RF_Go.Components.Modal
@using RF_Go.Services.Mapping

@inject IDialogService Dialog
@inject DeviceMappingService DeviceMappingService
@inject BackupFrequenciesViewModel BackupFrequenciesViewModel

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
    <div class="d-flex pl-6 pr-6 w-100 align-center justify-space-between pt-2">
        <div class="d-flex">
            <MudIconButton Class="mx-1" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" 
                Icon="@Icons.Material.Filled.Add" OnClick="@(() => OnAddDevice.InvokeAsync())" 
                Title="Add device to inventory">Open</MudIconButton>
            <MudIconButton Class="mx-1" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" 
                Icon="@Icons.Material.Filled.Download" OnClick="@(() => OnImportDatabase.InvokeAsync())" 
                Title="Import Database" />
            <MudIconButton Class="mx-1" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" 
                Icon="@Icons.Material.Filled.Upload" OnClick="@(() => OnExportDatabase.InvokeAsync())" 
                Title="Export Database" />
        </div>
        <div class="d-flex">
            <MudIconButton Icon="@Icons.Material.Filled.Calculate" title="RF Calcul" Variant="Variant.Filled" 
                Color="Color.Primary" Class="mx-2" @onclick="() => OnRFCalcul.InvokeAsync()"/>
            <MudMenu StartIcon="@Icons.Material.Filled.SyncAlt" Dense="true" 
                EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Class="mx-2" 
                Color="Color.Primary" Variant="Variant.Filled">
                <MudMenuItem Class="mx-2" @onclick="OpenDialogOnlineDevice" 
                    Icon="@Icons.Material.Filled.Map">Map</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.AutoFixHigh" 
                    @onclick='() => OnMagicSync.InvokeAsync("FromDevices")'>Sync From</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.AutoFixHigh" 
                    @onclick='() => OnMagicSync.InvokeAsync("ToDevices")'>Sync To</MudMenuItem>
            </MudMenu>
        </div>
    </div>

    <MudTable Breakpoint="Breakpoint.None" Hover="true" Dense="true" Bordered="false" Striped="false"
        HorizontalScrollbar="true" 
        @bind-Items="DevicesViewModel.Devices" 
        @ref="mudTable"
        RowClass="cursor-pointer" 
        RowClassFunc="@SelectedRowClassFunc"
        GroupBy="@_groupDefinition"
        GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
        GroupFooterClass="mb-4"
        Style="margin: auto; overflow: auto; max-height: calc(100vh - 310px);">
        <HeaderContent>
            <MudTh Style="min-width: 200px;">Device</MudTh>
            <MudTh Class="">
                <div class="d-flex align-center justify-space-between">
                    <span>Set Frequencies</span>
                    <div>
                        <MudIconButton>
                            <MudCheckBox @bind-Value="lockAll" 
                            Color="Color.Secondary" 
                            CheckedIcon="@Icons.Material.Filled.Lock" 
                            UncheckedIcon="@Icons.Material.Filled.LockOpen" 
                            Dense="true" @onclick="OnLockAll"
                            Class="pr-1" />
                        </MudIconButton>
                    </div>
                </div>
            </MudTh>
            <MudTh Class="d-flex align-center justify-space-between">
                <span>Group</span>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="OnDeleteAll" />
            </MudTh>
        </HeaderContent>

        <GroupHeaderTemplate>
            @if (context.GroupName == "RF Group")
            {
                var groupName = GroupsViewModel.Groups.FirstOrDefault(g => g.ID.ToString() == context.Key)?.Name ?? "Unknown Group";
                <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"{groupName}")</MudTh>
            }
            else
            {
                var uniqueModels = context.Items.Select(d => d.Model).Distinct().OrderBy(m => m);
                var modelList = string.Join(", ", uniqueModels);
                <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"{context.Key}: {modelList}")</MudTh>
            }
        </GroupHeaderTemplate>

        <RowTemplate>
            <MudTd>
                <MudTable @bind-Items="@context.Channels" Hover="true" Style="min-width:70px;">
                    <RowTemplate Context="chan">
                        <MudTd Class="d-flex align-center mt-0">
                            <MudTextField Typo="Typo.caption" 
                            Label='@($"Channel {context.Channels.IndexOf(chan) + 1}")' 
                            @bind-Value="@chan.ChannelName" 
                            Class="mt-0" 
                            Margin="Margin.Dense" 
                            Variant="Variant.Outlined"
                            @onblur="() => OnSaveDevice.InvokeAsync(context)" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTd>
            <MudTd>
                <MudTable @bind-Items="@context.Channels" Hover="true" Style="min-width:180px;">
                    <RowTemplate Context="chan">
                        <MudTd Class="d-flex align-center mt-0">
                            <MudNumericField @bind-Value="chan.Frequency" 
                            @bind-Value:after="() => { chan.Checked = false; StateHasChanged(); }"
                            Min="@chan.Range[0]" 
                            Max="@chan.Range[1]" 
                            Step="@chan.Step" 
                            Style="@CalculateStyle(chan)" 
                            Label="@GetRange(chan)" 
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense" 
                            FullWidth="true"
                            @onblur="() => OnSaveDevice.InvokeAsync(context)" />
                            <MudCheckBox @bind-Value="chan.IsLocked" 
                            Dense="true" 
                            Color="Color.Secondary" 
                            CheckedIcon="@Icons.Material.Filled.Lock" 
                            UncheckedIcon="@Icons.Material.Filled.LockOpen" 
                            Class="pl-3">
                            </MudCheckBox>
                            <MudIconButton Icon="@Icons.Material.Filled.Backup" 
                            Color="Color.Info" 
                            Size="Size.Small" 
                            OnClick="() => OpenBackupFrequencyModal(context, chan)"
                            Class="pl-3" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTd>
            <MudTd>
                <div class="d-flex justify-content-between">
                    <MudSelect T="int" Value="context.GroupID" 
                        ValueChanged="(newGroupId) => GroupsViewModel.UpdateDeviceGroupAsync(context, newGroupId)">
                        @foreach (var group in GroupsViewModel.Groups)
                        {
                            <MudSelectItem Value="@group.ID">@group.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if (context.IsSynced)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Link" 
                            @onclick="() => OnDesyncDevice.InvokeAsync(context)" 
                            aria-label="desync" />
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                        @onclick="() => OnDeleteDevice.InvokeAsync(context)" 
                        aria-label="delete" />
                </div>
                <div class="d-flex justify-content-between">
                    <MudTextField Typo="Typo.caption" Style="margin:0;" 
                        @bind-Value="@context.IpAddress" 
                        Placeholder="IP Address" 
                        @onblur="() => OnSaveDevice.InvokeAsync(context)" 
                        Class="custom-textfield" />
                    <MudIconButton @onclick="() => OnOpenQuickSync.InvokeAsync(context)" 
                        Icon="@GetSyncIcon(context)" 
                        Color="@GetSyncColor(context)" />
                </div>
            </MudTd>
        </RowTemplate>

        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="3">
                Total Devices: @context.Items.Count()
            </MudTh>
        </GroupFooterTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudHidden>

@code {
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public EventCallback OnDeviceSaved { get; set; }
    [Parameter] public EventCallback<RFDevice> OnDeleteDevice { get; set; }
    [Parameter] public EventCallback<RFDevice> OnDesyncDevice { get; set; }
    [Parameter] public EventCallback<RFDevice> OnSaveDevice { get; set; }
    [Parameter] public EventCallback OnDeleteAll { get; set; }
    [Parameter] public EventCallback OnLockAll { get; set; }
    [Parameter] public EventCallback<RFDevice> OnOpenQuickSync { get; set; }
    [Parameter] public EventCallback<(RFDevice, RFChannel)> OnOpenBackupFrequency { get; set; }
    [Parameter] public EventCallback OnRFCalcul { get; set; }
    [Parameter] public EventCallback OnOpenDialogOnlineDevice { get; set; }
    [Parameter] public EventCallback<string> OnMagicSync { get; set; }
    [Parameter] public EventCallback OnAddDevice { get; set; }
    [Parameter] public EventCallback OnImportDatabase { get; set; }
    [Parameter] public EventCallback OnExportDatabase { get; set; }

    private MudTable<RFDevice> mudTable;
    private int selectedRowNumber = -1;
    private bool lockAll = false;
    private List<string> clickedEvents = new();

    private TableGroupDefinition<RFDevice> _groupDefinition = new TableGroupDefinition<RFDevice>()
    {
        GroupName = "RF Group",
        Indentation = true,
        Expandable = true,
        Selector = (device) => device.GroupID.ToString(),
        InnerGroup = new TableGroupDefinition<RFDevice>()
        {
            GroupName = "Brand",
            Expandable = true,
            Selector = (device) => device.Brand
        }
    };

    private string CalculateStyle(RFChannel chan)
    {
        string color = chan.Checked ? "lightgreen" : "red";
        return "color:" + color + "; ";
    }

    private string SelectedRowClassFunc(RFDevice device, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(device))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetRange(RFChannel chan)
    {
        string startRange = (chan.Range[0] / 1000).ToString();
        string endRange = (chan.Range[1] / 1000).ToString();
        return $"{startRange} - {endRange} Mhz";
    }

    private string GetSyncIcon(RFDevice device)
    {
        if (!device.IsOnline && device.IsSynced)
        {
            return Icons.Material.Filled.QuestionMark;
        }
        if (device.PendingSync && device.IsOnline)
        {
            return Icons.Material.Filled.Sync;
        }
        return device.IsSynced ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel;
    }

    private Color GetSyncColor(RFDevice device)
    {
        if (device.PendingSync || !device.IsOnline)
        {
            return Color.Warning;
        }
        return device.IsSynced ? Color.Success : Color.Error;
    }

    private async Task OpenBackupFrequencyModal(RFDevice device, RFChannel channel)
    {
        var parameters = new DialogParameters
        {
            { "Device", device },
            { "Channel", channel },
            { "BackupFrequenciesViewModel", BackupFrequenciesViewModel },
            { "DeviceMappingService", DeviceMappingService }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseOnEscapeKey = true,
                NoHeader = true
            };

        var dialog = Dialog.Show<BackupFrequencyModal>("Backup Frequencies", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task OpenDialogOnlineDevice()
    {
        var parameters = new DialogParameters
        {
            { "DevicesViewModel", DevicesViewModel }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var dialog = Dialog.Show<OnlineDevicesModal>("Online Devices", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }
} 