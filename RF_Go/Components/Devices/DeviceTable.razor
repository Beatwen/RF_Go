@using RF_Go.Models
@using RF_Go.ViewModels
@using MudBlazor
@using RF_Go.Components.Modal
@using RF_Go.Services.Mapping
@using System.ComponentModel

@inject IDialogService Dialog
@inject DeviceMappingService DeviceMappingService
@inject BackupFrequenciesViewModel BackupFrequenciesViewModel

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    .mobile-panel {
        padding-left: 0 !important;
    }

    .mobile-panel .mud-expansion-panel {
        padding-left: 0 !important;
    }
</style>

<MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
    <div class="d-flex pl-6 pr-6 w-100 align-center justify-space-between pt-2">
        <div class="d-flex">
            <MudIconButton Class="mx-1" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" 
                Icon="@Icons.Material.Filled.Add" OnClick="@(() => OnAddDevice.InvokeAsync())" 
                Title="Add device to inventory" Disabled="@IsLoading">Open</MudIconButton>
            <MudIconButton Class="mx-1" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" 
                Icon="@Icons.Material.Filled.Download" OnClick="@(() => OnImportDatabase.InvokeAsync())" 
                Title="Import Database" Disabled="@IsLoading" />
            <MudIconButton Class="mx-1" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" 
                Icon="@Icons.Material.Filled.Upload" OnClick="@(() => OnExportDatabase.InvokeAsync())" 
                Title="Export Database" Disabled="@IsLoading" />
        </div>
        <div class="d-flex">
                        @if (HasZeroFrequencies())
            {
                <MudTooltip Text="@GetZeroFrequenciesMessage()">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Class="mx-1" />
                </MudTooltip>
            }
            <MudIconButton Icon="@Icons.Material.Filled.Calculate" title="RF Calcul" Variant="Variant.Filled" 
                Color="Color.Primary" Class="mx-2" @onclick="() => OnRFCalcul.InvokeAsync()" Disabled="@IsLoading"/>
            <MudMenu StartIcon="@Icons.Material.Filled.SyncAlt" Dense="true" 
                EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Class="mx-2" 
                Color="Color.Primary" Variant="Variant.Filled" Disabled="@IsLoading">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                        StartIcon="@Icons.Material.Filled.SyncAlt" 
                        EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                        Disabled="@IsLoading">
                        Sync
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@(() => OnOpenDialogOnlineDevice.InvokeAsync())" Disabled="@IsLoading">
                        <MudIcon Icon="@Icons.Material.Filled.Map" Class="mr-2" />
                        Map Devices
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => OnMagicSync.InvokeAsync("ToDevices"))" Disabled="@IsLoading">
                        <MudIcon Icon="@Icons.Material.Filled.Sync" Class="mr-2" />
                        Sync To Devices
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => OnMagicSync.InvokeAsync("FromDevices"))" Disabled="@IsLoading">
                        <MudIcon Icon="@Icons.Material.Filled.Sync" Class="mr-2" />
                        Sync From Devices
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        </div>
    </div>

    <MudTable Breakpoint="Breakpoint.None" Hover="true" Dense="true" Bordered="false" Striped="false"
        HorizontalScrollbar="true" 
        @bind-Items="DevicesViewModel.Devices" 
        @ref="mudTable"
        RowClass="cursor-pointer" 
        RowClassFunc="@SelectedRowClassFunc"
        GroupBy="@_groupDefinition"
        GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
        GroupFooterClass="mb-4"
        Style="margin: auto; overflow: auto; max-height: calc(100vh - 310px);">
        <HeaderContent>
            <MudTh Style="min-width: 200px;">Device</MudTh>
            <MudTh Class="">
                <div class="d-flex align-center justify-space-between">
                    <span>Set Frequencies</span>
                    <div>
                        <MudIconButton>
                            <MudCheckBox @bind-Value="lockAll" 
                            Color="Color.Secondary" 
                            CheckedIcon="@Icons.Material.Filled.Lock" 
                            UncheckedIcon="@Icons.Material.Filled.LockOpen" 
                            Dense="true" @onclick="OnLockAll"
                            Class="pr-1" />
                        </MudIconButton>
                    </div>
                </div>
            </MudTh>
            <MudTh Class="d-flex align-center justify-space-between">
                <span>Group</span>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="OnDeleteAll" />
            </MudTh>
        </HeaderContent>

        <GroupHeaderTemplate>
            @if (context.GroupName == "RF Group")
            {
                var groupName = GroupsViewModel.Groups.FirstOrDefault(g => g.ID.ToString() == context.Key)?.Name ?? "Unknown Group";
                <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"{groupName}")</MudTh>
            }
            else
            {
                var device = context.Items.First();
                <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"{device.Brand} {device.Model}")</MudTh>
            }
        </GroupHeaderTemplate>

        <RowTemplate>
            <MudTd>
                <MudTable @bind-Items="@context.Channels" Hover="true" Style="min-width:70px;">
                    <RowTemplate Context="chan">
                        <MudTd Class="d-flex align-center mt-0">
                            <MudTextField Typo="Typo.caption" 
                            Label='@($"Channel {context.Channels.IndexOf(chan) + 1}")' 
                            @bind-Value="@chan.ChannelName" 
                            Class="mt-0" 
                            Margin="Margin.Dense" 
                            Variant="Variant.Outlined"
                            @onchange="() => OnSaveDevice.InvokeAsync(context)" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTd>
            <MudTd>
                <MudTable @bind-Items="@context.Channels" Hover="true" Style="min-width:180px;">
                    <RowTemplate Context="chan">
                        <MudTd Class="d-flex align-center mt-0">
                            <MudNumericField @bind-Value="chan.Frequency" 
                            @bind-Value:after="() => { chan.Checked = false; StateHasChanged(); }"
                            Min="@chan.Range[0]" 
                            Max="@chan.Range[1]" 
                            Step="@chan.Step" 
                            Style="@CalculateStyle(chan)" 
                            Label="@GetRange(chan)" 
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense" 
                            FullWidth="true"
                            @onblur="() => OnSaveDevice.InvokeAsync(context)" />
                            <MudCheckBox Value="@chan.IsLocked"
                            ValueChanged="@((bool value) => { chan.IsLocked = value; OnSaveDevice.InvokeAsync(context); })"
                            Dense="true" 
                            Color="Color.Secondary" 
                            CheckedIcon="@Icons.Material.Filled.Lock" 
                            UncheckedIcon="@Icons.Material.Filled.LockOpen" 
                            Class="pl-3" />
                            <MudIconButton Icon="@Icons.Material.Filled.Backup" 
                            Color="Color.Info" 
                            Size="Size.Small" 
                            OnClick="() => OpenBackupFrequencyModal(context, chan)"
                            Class="pl-3" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTd>
            <MudTd>
                <div class="d-flex justify-content-between">
                    <MudSelect T="int" Value="context.GroupID" 
                        ValueChanged="(newGroupId) => GroupsViewModel.UpdateDeviceGroupAsync(context, newGroupId)">
                        @foreach (var group in GroupsViewModel.Groups)
                        {
                            <MudSelectItem Value="@group.ID">@group.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if (context.IsSynced)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Link" 
                            @onclick="() => OnDesyncDevice.InvokeAsync(context)" 
                            aria-label="desync" />
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                        @onclick="() => OnDeleteDevice.InvokeAsync(context)" 
                        aria-label="delete" />
                </div>
                <div class="d-flex justify-content-between">
                    <MudTextField Typo="Typo.caption" Style="margin:0;" 
                        @bind-Value="@context.IpAddress" 
                        Placeholder="IP Address" 
                        @onblur="() => OnSaveDevice.InvokeAsync(context)" 
                        Class="custom-textfield" />
                    <MudIconButton @onclick="() => OnOpenQuickSync.InvokeAsync(context)" 
                        Icon="@GetSyncIcon(context)" 
                        Color="@GetSyncColor(context)" />
                </div>
            </MudTd>
        </RowTemplate>

        <GroupFooterTemplate>
            @if (context.GroupName != "RF Group")
            {
                <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="3">
                    Total Devices: @context.Items.Count()
                </MudTh>
            }
        </GroupFooterTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudHidden>

<MudHidden Breakpoint="Breakpoint.SmAndUp">
    <div class="d-flex flex-column gap-2 pa-4">
        <div class="d-flex justify-space-between">
            <MudButton Variant="Variant.Filled" 
                Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Add" 
                OnClick="@(() => OnAddDevice.InvokeAsync())"
                FullWidth="true"
                Class="mx-1"
                Disabled="@IsLoading">
                Add Device
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Calculate" 
                OnClick="@(() => OnRFCalcul.InvokeAsync())"
                FullWidth="true"
                Class="mx-1"
                Disabled="@IsLoading">
                RF Calcul
            </MudButton>
        </div>
        <div class="d-flex justify-space-between">
            <MudButton Variant="Variant.Filled" 
                Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Download" 
                OnClick="@(() => OnImportDatabase.InvokeAsync())"
                FullWidth="true"
                Class="mx-1"
                Disabled="@IsLoading">
                Import
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Upload" 
                OnClick="@(() => OnExportDatabase.InvokeAsync())"
                FullWidth="true"
                Class="mx-1"
                Disabled="@IsLoading">
                Export
            </MudButton>
        </div>
        <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" 
            StartIcon="@Icons.Material.Filled.SyncAlt" 
            Color="Color.Primary" 
            Variant="Variant.Filled"
            FullWidth="true"
            Dense="false">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    StartIcon="@Icons.Material.Filled.SyncAlt" 
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                    FullWidth="true">
                    Sync Options
                </MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Icon="@Icons.Material.Filled.Map" 
                    @onclick="OpenDialogOnlineDevice">
                    Map Devices
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.AutoFixHigh" 
                    @onclick='() => OnMagicSync.InvokeAsync("FromDevices")'>
                    Sync From Devices
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.AutoFixHigh" 
                    @onclick='() => OnMagicSync.InvokeAsync("ToDevices")'>
                    Sync To Devices
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </div>

    <div class="d-flex flex-column">
        @foreach (var group in DevicesViewModel.Devices.GroupBy(d => d.GroupID))
        {
            var groupName = GroupsViewModel.Groups.FirstOrDefault(g => g.ID == group.Key)?.Name ?? "Unknown Group";
            <MudExpansionPanel Text="@groupName" HeaderClass="mud-typography-h4" Class="my-header-class mobile-panel border-solid border-2 mud-border-secondary pa-4" Dense="true">
                @foreach (var deviceGroup in group.GroupBy(d => $"{d.Brand}_{d.Model}"))
                {
                    var firstDevice = deviceGroup.First();
                    <MudExpansionPanel Text="@($"{firstDevice.Brand} {firstDevice.Model}")" Class="mobile-panel">
                        @foreach (var device in deviceGroup)
                        {
                            <MudCard Class="">
                                <MudCardContent>
                                    <div class="d-flex flex-column gap-2">
                                        @foreach (var channel in device.Channels)
                                        {
                                            <div class="d-flex align-center">
                                                <MudTextField Typo="Typo.caption" 
                                                    Label='@($"Channel {device.Channels.IndexOf(channel) + 1}")' 
                                                    @bind-Value="@channel.ChannelName" 
                                                    Class="mt-0" 
                                                    Margin="Margin.Dense" 
                                                    Variant="Variant.Outlined"
                                                    @onblur="() => OnSaveDevice.InvokeAsync(device)" />
                                            </div>
                                            <div class="d-flex align-center">
                                                <MudNumericField @bind-Value="channel.Frequency" 
                                                    @bind-Value:after="() => { channel.Checked = false; StateHasChanged(); }"
                                                    Min="@channel.Range[0]" 
                                                    Max="@channel.Range[1]" 
                                                    Step="@channel.Step" 
                                                    Style="@CalculateStyle(channel)" 
                                                    Label="@GetRange(channel)" 
                                                    Variant="Variant.Outlined" 
                                                    Margin="Margin.Dense" 
                                                    FullWidth="true"
                                                    @onblur="() => OnSaveDevice.InvokeAsync(device)" />
                                                <MudCheckBox Value="@channel.IsLocked"
                                                ValueChanged="@((bool value) => { channel.IsLocked = value; OnSaveDevice.InvokeAsync(device); })"
                                                Dense="true" 
                                                Color="Color.Secondary" 
                                                CheckedIcon="@Icons.Material.Filled.Lock" 
                                                UncheckedIcon="@Icons.Material.Filled.LockOpen" 
                                                Class="pl-3" />
                                                <MudIconButton Icon="@Icons.Material.Filled.Backup" 
                                                    Color="Color.Info" 
                                                    Size="Size.Small" 
                                                    OnClick="() => OpenBackupFrequencyModal(device, channel)"
                                                    Class="pl-3" />
                                            </div>
                                        }
                                        <div class="d-flex justify-space-between align-center mt-2">
                                            <MudSelect T="int" Value="device.GroupID" 
                                                ValueChanged="(newGroupId) => GroupsViewModel.UpdateDeviceGroupAsync(device, newGroupId)">
                                                @foreach (var g in GroupsViewModel.Groups)
                                                {
                                                    <MudSelectItem Value="@g.ID">@g.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                            <div class="d-flex">
                                                @if (device.IsSynced)
                                                {
                                                    <MudIconButton Icon="@Icons.Material.Filled.Link" 
                                                        @onclick="() => OnDesyncDevice.InvokeAsync(device)" 
                                                        aria-label="desync" />
                                                }
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                    @onclick="() => OnDeleteDevice.InvokeAsync(device)" 
                                                    aria-label="delete" />
                                            </div>
                                        </div>
                                        <div class="d-flex justify-space-between align-center">
                                            <MudTextField Typo="Typo.caption" Style="margin:0;" 
                                                @bind-Value="@device.IpAddress" 
                                                Placeholder="IP Address" 
                                                @onblur="() => OnSaveDevice.InvokeAsync(device)" 
                                                Class="custom-textfield" />
                                            <MudIconButton @onclick="() => OnOpenQuickSync.InvokeAsync(device)" 
                                                Icon="@GetSyncIcon(device)" 
                                                Color="@GetSyncColor(device)" />
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        }
                        <div class="text-right pa-2">
                            Total Devices: @deviceGroup.Count()
                        </div>
                    </MudExpansionPanel>
                }
            </MudExpansionPanel>
        }
    </div>
</MudHidden>

@code {
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public EventCallback OnDeviceSaved { get; set; }
    [Parameter] public EventCallback<RFDevice> OnDeleteDevice { get; set; }
    [Parameter] public EventCallback<RFDevice> OnDesyncDevice { get; set; }
    [Parameter] public EventCallback<RFDevice> OnSaveDevice { get; set; }
    [Parameter] public EventCallback OnDeleteAll { get; set; }
    [Parameter] public EventCallback OnLockAll { get; set; }
    [Parameter] public EventCallback<RFDevice> OnOpenQuickSync { get; set; }
    [Parameter] public EventCallback<(RFDevice, RFChannel)> OnOpenBackupFrequency { get; set; }
    [Parameter] public EventCallback OnRFCalcul { get; set; }
    [Parameter] public EventCallback OnOpenDialogOnlineDevice { get; set; }
    [Parameter] public EventCallback<string> OnMagicSync { get; set; }
    [Parameter] public EventCallback OnAddDevice { get; set; }
    [Parameter] public EventCallback OnImportDatabase { get; set; }
    [Parameter] public EventCallback OnExportDatabase { get; set; }
    [Parameter] public bool IsLoading { get; set; }

    private MudTable<RFDevice> mudTable;
    private int selectedRowNumber = -1;
    private bool lockAll = false;
    private List<string> clickedEvents = new();
    private List<RFDevice> _subscribedDevices = new();

    private TableGroupDefinition<RFDevice> _groupDefinition = new TableGroupDefinition<RFDevice>()
    {
        GroupName = "RF Group",
        Indentation = true,
        Expandable = true,
        Selector = (device) => device.GroupID.ToString(),
        InnerGroup = new TableGroupDefinition<RFDevice>()
        {
            GroupName = "Model",
            Expandable = true,
            Selector = (device) => $"{device.Brand}_{device.Model}"
        }
    };

    private string CalculateStyle(RFChannel chan)
    {
        string color = chan.Checked ? "lightgreen" : "red";
        return "color:" + color + "; ";
    }

    private string SelectedRowClassFunc(RFDevice device, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(device))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetRange(RFChannel chan)
    {
        string startRange = (chan.Range[0] / 1000).ToString();
        string endRange = (chan.Range[1] / 1000).ToString();
        return $"{startRange} - {endRange} Mhz";
    }

    private string GetSyncIcon(RFDevice device)
    {
        if (!device.IsOnline && device.IsSynced)
        {
            return Icons.Material.Filled.QuestionMark;
        }
        if (device.PendingSync && device.IsOnline)
        {
            return Icons.Material.Filled.Sync;
        }
        return device.IsSynced ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel;
    }

    private Color GetSyncColor(RFDevice device)
    {
        if (device.PendingSync || !device.IsOnline)
        {
            return Color.Warning;
        }
        return device.IsSynced ? Color.Success : Color.Error;
    }

    private async Task OpenBackupFrequencyModal(RFDevice device, RFChannel channel)
    {
        var parameters = new DialogParameters
        {
            { "Device", device },
            { "Channel", channel },
            { "BackupFrequenciesViewModel", BackupFrequenciesViewModel },
            { "DeviceMappingService", DeviceMappingService }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseOnEscapeKey = true,
                NoHeader = true
            };

        var dialog = Dialog.Show<BackupFrequencyModal>("Backup Frequencies", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task OpenDialogOnlineDevice()
    {
        var parameters = new DialogParameters
        {
            { "DevicesViewModel", DevicesViewModel }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var dialog = Dialog.Show<OnlineDevicesModal>("Online Devices", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private bool HasZeroFrequencies()
    {
        return DevicesViewModel.Devices
            .SelectMany(d => d.Channels)
            .Any(c => c.Frequency == 0);
    }

    private string GetZeroFrequenciesMessage()
    {
        var count = DevicesViewModel.Devices
            .SelectMany(d => d.Channels)
            .Count(c => c.Frequency == 0);
        return $"Oups, {count} frequenc{(count > 1 ? "ies" : "y")} couldn't be calculated";
    }

    protected override void OnInitialized()
    {
        AttachPropertyChangedHandlers();
        DevicesViewModel.DevicesChanged += DevicesViewModel_DevicesChanged;
        base.OnInitialized();
    }

    private void DevicesViewModel_DevicesChanged(object sender, EventArgs e)
    {
        // Detach handlers from old devices and attach to new devices
        DetachPropertyChangedHandlers();
        AttachPropertyChangedHandlers();
        InvokeAsync(StateHasChanged);
    }

    private void AttachPropertyChangedHandlers()
    {
        // Store the devices we're subscribing to
        _subscribedDevices = new List<RFDevice>(DevicesViewModel.Devices);
        
        foreach (var device in _subscribedDevices)
        {
            device.PropertyChanged += Device_PropertyChanged;
        }
    }

    private void DetachPropertyChangedHandlers()
    {
        foreach (var device in _subscribedDevices)
        {
            device.PropertyChanged -= Device_PropertyChanged;
        }
        _subscribedDevices.Clear();
    }

    private void Device_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(RFDevice.IsSynced) ||
            e.PropertyName == nameof(RFDevice.PendingSync) ||
            e.PropertyName == nameof(RFDevice.IsOnline))
        {
            // Use InvokeAsync to ensure we're on the UI thread
            InvokeAsync(() => 
            {
                StateHasChanged();
                return Task.CompletedTask;
            });
        }
    }

    public void Dispose()
    {
        DevicesViewModel.DevicesChanged -= DevicesViewModel_DevicesChanged;
        DetachPropertyChangedHandlers();
    }
} 