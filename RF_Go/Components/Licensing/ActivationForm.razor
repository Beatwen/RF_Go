@using RF_Go.Utils
@using System.Text.Json
@using System.Text
@using System.Net.Http.Json
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject RF_Go.Utils.AuthService AuthService

<MudCard Class="pa-4">
    <MudText Typo="Typo.h6" Align="Align.Center">Activer une Licence</MudText>
    <MudTextField Label="Clé de Licence" @bind-Value="LicenseKey" FullWidth="true" Required="true" Class="mb-3" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitActivation" Class="mt-3">
        Activate
    </MudButton>
    <MudText Typo="Typo.subtitle2" Color="Color.Error" Class="mt-2">@Message</MudText>
</MudCard>

@code {
    private string LicenseKey = "";
    private string Message = "";

    private async Task SubmitActivation()
    {
        if (string.IsNullOrEmpty(LicenseKey))
        {
            Message = "Enter a valid license key.";
            return;
        }
        try
        {
            var httpClient = new HttpClient();
            var accessToken = await AuthService.GetValidAccessTokenAsync();
            Debug.Print("Access Token found : " + accessToken);
            if (string.IsNullOrEmpty(accessToken))
            {
                Message = "Access token is missing.";
                return;
            }
            httpClient.DefaultRequestHeaders.Add("X-API-KEY", AppConfig.ApiKey);
            httpClient.DefaultRequestHeaders.Add("X-DEVICE-ID", await GUID.GetOrCreateDeviceIdentifier());
            httpClient.DefaultRequestHeaders.Add("X-USER-KEY", await SecureStorage.GetAsync("userKey"));
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);


            var payload = new
            {
                licenseKey = LicenseKey
            };
            string baseUrl = AppConfig.ApiBaseUrl;
            var response = await httpClient.PostAsJsonAsync($"{baseUrl}/licenses/activate-and-validate", payload);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LicenseActivationResponse>();
                Message = result?.Message ?? "License activated !";
                await SecureStorage.SetAsync("licenseKey", LicenseKey);
                NavigationManager.NavigateTo("/index");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Error server : {response.StatusCode}. Details : {error}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error : {ex.Message}";
        }
    }

    public class LicenseActivationResponse
    {
        public bool Valid { get; set; }
        public string Message { get; set; }
    }
}
