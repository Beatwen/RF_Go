@using RF_Go.Utils
@using RF_Go.Models.Licensing
@using System.Text.Json
@using System.Text
@using System.Net.Http.Json
@using System.Diagnostics


<MudCard Class="pa-4">
    <MudText Typo="Typo.h6" Align="Align.Center">Acheter une Licence</MudText>
    <MudSelect T="string" Label="Type de Licence" @bind-Value="SelectedLicenseType" FullWidth="true">
        <MudSelectItem Value="@("Standard")">Standard</MudSelectItem>
        <MudSelectItem Value="@("Premium")">Premium</MudSelectItem>
        <MudSelectItem Value="@("Free")">Free</MudSelectItem>
    </MudSelect>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SubmitPurchase" Class="mt-3">
        Confirmer l'Achat
    </MudButton>
    <MudText Typo="Typo.subtitle2" Color="Color.Error" Class="mt-2">@Message</MudText>
</MudCard>

@code {
    private string Email = "";
    private string SelectedLicenseType = "Free";
    private string Message = "";

    private async Task SubmitPurchase()
    {
        if (string.IsNullOrEmpty(SelectedLicenseType))
        {
            Message = "Fill the license type please";
            return;
        }
        string UserKey = await SecureStorage.GetAsync("userKey");
        Debug.WriteLine(UserKey);
        try
        {
            var payload = new
            {
                licenseType = SelectedLicenseType,
                userID = UserKey
            };

            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("X-USER-KEY", await SecureStorage.GetAsync("userKey"));
            client.DefaultRequestHeaders.Add("X-API-KEY", AppConfig.ApiKey);

            var response = await client.PostAsJsonAsync($"{AppConfig.ApiBaseUrl}/licenses/buy", payload);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<LicenseResponse>(responseContent);
                Message = "Votre achat a été confirmé ! Merci. Votre licence a été envoyée par mail";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Message = $"Erreur : {response.StatusCode}. Détails : {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Une erreur est survenue : {ex.Message}";
        }
    }
    public class LicenseResponse 
    {
        private string message { get; set; }
        private License license { get; set; }
    }
}
