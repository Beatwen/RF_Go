@using System.Net.Http.Json
@using Models.Licensing
@using System.Diagnostics;
@using RF_Go.Utils

@inject NavigationManager NavigationManager
@inject RF_Go.Utils.AuthService AuthService

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin: auto; padding: 20px;">
    <MudPaper Elevation="2" Class="pa-4">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Mon Compte</MudText>

        @if (User != null)
        {
            <MudCard Class="pa-2 mb-2">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Nom d'utilisateur</MudText>
                    <MudText Typo="Typo.subtitle2">@User.userName</MudText>
                </MudCardContent>
            </MudCard>

            <MudCard Class="pa-2 mb-2">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Prénom</MudText>
                    <MudText Typo="Typo.subtitle2">@User.firstName</MudText>
                </MudCardContent>
            </MudCard>

            <MudCard Class="pa-2 mb-2">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Nom</MudText>
                    <MudText Typo="Typo.subtitle2">@User.lastName</MudText>
                </MudCardContent>
            </MudCard>

            <MudCard Class="pa-2 mb-2">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Email</MudText>
                    <MudText Typo="Typo.subtitle2">@User.email</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Error">
                Impossible de charger les informations de votre compte.
            </MudText>
        }

        <MudDivider Class="mt-4 mb-4" />

        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="LogOut">
            Log Out
        </MudButton>
        <MudText>@Message</MudText>
    </MudPaper>
</MudContainer>

@* <MudDialog @bind-Visible="IsDeleteDialogOpen" MaxWidth="MaxWidth.Small" Style="padding: 20px;"> *@
@*     <DialogContent>Confirm deletion</DialogContent> *@
@*     <DialogContent> *@
@*         <MudText Typo="Typo.body1">Are you sure to delete your account ? This action is irreversible.</MudText> *@
@*     </DialogContent> *@
@*     <DialogActions> *@
@*         <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="() => IsDeleteDialogOpen = false"> *@
@*             Cancel *@
@*         </MudButton> *@
@*         <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteUser"> *@
@*             Delete *@
@*         </MudButton> *@
@*     </DialogActions> *@
@* </MudDialog> *@

@code {
    private User User = null;
    private bool IsDeleteDialogOpen = false;
    private string Message = "";
    private HttpClient client = new HttpClient();


    protected override async Task OnInitializedAsync()
    {
        User = await SecureStorageUtils.GetUserFromSecureStorage();
    }
    private async Task LogOut()
    {

        try
        {
            string accessToken = await AuthService.GetValidAccessTokenAsync();
            string refreshToken = await TokenStorage.GetRefreshTokenAsync();
            if (string.IsNullOrEmpty(accessToken))
            {
                Message = "Access token is missing. Are you connected to internet ? Can't log out.";
                return;
            }

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                client.DefaultRequestHeaders.Add("X-API-KEY", AppConfig.ApiKey);
                var payload = new
                {
                    token = refreshToken
                };
                var baseUrl = AppConfig.ApiBaseUrl;
                var response = await client.PostAsJsonAsync($"{baseUrl}/auth/logout", payload);

                if (response.IsSuccessStatusCode)
                {
                    SecureStorage.Remove("access_token");
                    SecureStorage.Remove("refresh_token");
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Message = $"Error server: {response.StatusCode}. Details: {error}";
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }
    // Function deleted to avoid user delete itself. User has to go through the website to delete his accound now.
    // private async Task DeleteUser()
    // {
    //     try
    //     {

    //         string userKey = await SecureStorage.GetAsync("userKey");
    //         SecureStorage.Remove("userkey");
    //         if (!string.IsNullOrEmpty(userKey))
    //         {
    //             SecureStorage.RemoveAll(); A supprimer en prod, on supprime que si le user est delete de la DB
    //             client.DefaultRequestHeaders.Add("X-API-KEY", AppConfig.ApiKey);
    //             string accessToken = await AuthService.GetValidAccessTokenAsync();
    //             client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
    //             string baseUrl = AppConfig.ApiBaseUrl;
    //             var response = await client.DeleteAsync($"{baseUrl}/users/{userKey}");
    //             if (response.IsSuccessStatusCode)
    //             {
    //                 SecureStorage.RemoveAll();
    //                 NavigationManager.NavigateTo("/register");
    //             }
    //             else
    //             {
    //                 var error = await response.Content.ReadAsStringAsync();
    //                 Debug.Print(error);
    //                 Message = $"Error server: {response.StatusCode}. Details: {error}";
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Message = $"Erreur : {ex.Message}";
    //     }
    //     finally
    //     {
    //         IsDeleteDialogOpen = false;
    //     }
    // }
}
