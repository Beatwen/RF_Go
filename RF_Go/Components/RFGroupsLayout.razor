@page "/groups-schedule"
@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics

<div class="d-flex flex-column align-center mt-4">
    <div class="d-flex align-center mb-4 mt-4">
        <MudTextField Label="New Group Name" @bind-Value="newGroupName" Class="mr-2"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SaveNewGroup())">Add Group</MudButton>
    </div>

    @foreach (var group in GroupsViewModel.Groups)
    {
        <MudCard Class="mb-4" Style="width: 100%; max-width: 600px;">
            <MudCardContent Class="d-flex flex-column align-center">
                @if (temporaryGroupID == group.ID)
                {
                    <MudTextField @bind-Value="temporaryGroupName"
                                  Immediate="true"
                                  Label="Group Name"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Check"
                                  AdornmentColor="Color.Primary"
                                  OnAdornmentClick="@(() => UpdateGroup(group))"
                                  OnKeyDown="@((args) => HandleKeyDown(args, () => UpdateGroup(group)))" 
                                  Class="mb-4" />

                    @foreach (var time in group.TimePeriods)
                    {
                        <MudStack Class="mb-4">
                            <MudDateRangePicker @bind-DateRange="time.Range"
                                                MinDate="_minDate"
                                                Margin="Margin.Dense"
                                                HelperText="Select the date on which the RF devices in this group will be used." />

                            <!-- Start Time Picker -->
                            <MudTimePicker Label="Start Time"
                                           AmPm="true"
                                           @bind-Time="time.StartTimeSpan" />

                            <!-- End Time Picker -->
                            <MudTimePicker Label="End Time"
                                           AmPm="true"
                                           @bind-Time="time.EndTimeSpan" />
                        </MudStack>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6" Class="mb-4">@group.Name</MudText>
                    @foreach (var time in group.TimePeriods)
                    {
                        <MudText Class="mb-2">
                            @time.Range.Start?.ToShortDateString() - @time.Range.End?.ToShortDateString() |
                            @time.StartTime.ToShortTimeString() - @time.EndTime.ToShortTimeString()
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Secondary" 
                                 OnClick="() => DeleteGroup(time, group)"
                                 Class="mb-2">Delete Time Periods</MudButton>
                    }
                }
                <div class="d-flex justify-center mt-4">
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             OnClick="() => AddTimePeriod(group)"
                             Class="mr-2">Add Time Period</MudButton>
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             OnClick="() => EditGroup(group)"
                             Class="mr-2">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             OnClick="() => GroupsViewModel.DeleteGroupAsync(group)">Delete</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    }
</div>

@code {
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    private int temporaryGroupID = -1;
    private string temporaryGroupName;
    private string newGroupName;
    private DateRange _dateRange { get; set; }
    private DateTime _minDate = DateTime.Now.Date;

    private async Task SaveNewGroup()
    {
        RFGroup newGroup = new();
        if (!string.IsNullOrWhiteSpace(newGroupName))
        {
            newGroup.Name = newGroupName;
            await GroupsViewModel.AddGroupAsync(newGroup);
        }
        else
        {
            return;
        }

        
    }

    private void EditGroup(RFGroup group)
    {
        temporaryGroupName = group.Name;
        temporaryGroupID = group.ID;
    }
    async private Task AddTimePeriod(RFGroup group)
    {
        TimePeriod timePeriod = new(DateTime.Now, DateTime.Now.AddHours(1));
        group.AddTimePeriod(timePeriod);
        await GroupsViewModel.UpdateGroupAsync(group);
    }
    private async Task HandleKeyDown(KeyboardEventArgs args, Func<Task> updateAction)
    {
        if (args.Key == "Enter")
        {
            await updateAction();
            StateHasChanged();
        }
    }
    private async Task UpdateGroup(RFGroup group)
    {
        group.Name = temporaryGroupName;
        temporaryGroupID = -1;
        await GroupsViewModel.UpdateGroupAsync(group);

    }
    private async Task UpdateTimePeriod(RFGroup group, TimePeriod time)
    {
        await GroupsViewModel.UpdateGroupAsync(group);
        temporaryGroupID = -1;
        StateHasChanged();

    }
    private async Task DeleteGroup(TimePeriod time, RFGroup group)
    {
        group.DeleteTimePeriod(time);
        await GroupsViewModel.UpdateGroupAsync(group);
    }
}
