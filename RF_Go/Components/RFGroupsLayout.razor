@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics

<h1>Groups Schedule</h1>


<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SaveNewGroup())">Add Group</MudButton>
<MudTextField Label="New Group Name" @bind-Value="newGroupName"></MudTextField>
@foreach( var group in GroupsViewModel.Groups)
{
    <MudCard>
        
        <MudCardContent>
            @if (temporaryGroupID == group.ID)
            {
                <MudTextField @bind-Value="temporaryGroupName"
                              Immediate="true"
                              Label="Group Name"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Check"
                              AdornmentColor="Color.Primary"
                              OnAdornmentClick="() => UpdateGroup(group)"
                              OnKeyDown="@((args) => HandleKeyDown(args, group))" />
                @foreach (var time in group.TimePeriods)
                {
                    <MudTextField Label="Start Time" @bind-Value="time.StartTime" Immediate="true" 
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@Icons.Material.Filled.Check"
                                  AdornmentColor="Color.Primary"
                                  OnAdornmentClick="() => UpdateStartTime(group, time)"
                                  OnKeyDown="@((args) => HandleKeyDown(args, group, time))">
>
                    </MudTextField>
                    <MudTextField Label="End Time" @bind-Value="time.EndTime" Immediate="true"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Check"
                                  AdornmentColor="Color.Primary"
                                  OnAdornmentClick="() => UpdateEndTime(group, time)"
                                  OnKeyDown="@((args) => HandleKeyDown(args, group, time))">></MudTextField>
                }
            }
            else
            {
                <MudText>@group.Name</MudText>
                @foreach (var time in group.TimePeriods)
                {
                    <MudText>@time.StartTime - @time.EndTime</MudText>
                }
            }

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddTimePeriod(group)">Add Time Period</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => EditGroup(group)">Edit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => GroupsViewModel.DeleteGroupAsync(group)">Delete</MudButton>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    private int temporaryGroupID = -1;
    private string temporaryGroupName;
    private string newGroupName;
    private void OnGroupNameChanged(ChangeEventArgs e)
    {
        Debug.Print(e.Value.ToString());
        temporaryGroupName = e.Value.ToString();
    }

    private async Task SaveNewGroup()
    {
        RFGroup newGroup = new();
        newGroup.Name = newGroupName;
        await GroupsViewModel.AddGroupAsync(newGroup);
    }
    private void EditGroup(RFGroup group)
    {
        temporaryGroupName = group.Name;
        temporaryGroupID = group.ID;
    }
    private void AddTimePeriod(RFGroup group)
        {
            TimePeriod timePeriod = new(DateTime.Now, DateTime.Now.AddHours(1));
            group.AddTimePeriod(timePeriod);
        }
    private async Task HandleKeyDown(KeyboardEventArgs args, RFGroup group)
    {
        if (args.Key == "Enter")
        {
            StateHasChanged();
            await UpdateGroup(group);
        }
    }
    private async Task UpdateGroup(RFGroup group)
    {
        group.Name = temporaryGroupName;
        await GroupsViewModel.UpdateGroupAsync(group);
        temporaryGroupID = -1;
    }
    private void none()
    {
        return;
    }


}
