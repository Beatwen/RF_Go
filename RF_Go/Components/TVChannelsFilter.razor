@using RF_Go.ViewModels
@using System.Diagnostics
@inject MudBlazor.ISnackbar Snackbar

<MudPaper Class="p-4 pt-2 pb-2 mb-4">
    <div class="button-group">
        <MudButton Class="tab-button" Color="@(IsActiveTab(0) ? Color.Primary : Color.Transparent)" Variant="Variant.Filled" OnClick='() => SetSelectedDivision("Generic-8MHz")'>8 MHz</MudButton>
        <MudButton Class="tab-button" Color="@(IsActiveTab(1) ? Color.Primary : Color.Transparent)" Variant="Variant.Filled" OnClick='() => SetSelectedDivision("Generic-7MHz")'>7 MHz</MudButton>
        <MudButton Class="tab-button" Color="@(IsActiveTab(2) ? Color.Primary : Color.Transparent)" Variant="Variant.Filled" OnClick='() => SetSelectedDivision("Generic-6MHz")'>6 MHz</MudButton>
    </div>
</MudPaper>

<MudGrid Spacing="3" Class="pl-6 pr-6">
    <MudItem xs="12" md="6" Class="table-container">
        <MudTable Items="@ExclusionChannelViewModel.ExclusionChannels" Dense="true" FixedHeader="true" Bordered="true">
            <HeaderContent>
                <MudTh>
                    <MudCheckBox Label="" ValueChanged="(bool IsChecked) => SelectAll(IsChecked)" />
                </MudTh>
                <MudTh>Frequency Range</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="max-width:50px;">
                    <div class="d-flex align-center">
                        <MudCheckBox Value="@context.Exclude" ValueChanged="async (bool isChecked) => await ToggleExclusion(context, isChecked)" />
                        <span class="ml-2">@context.ChannelNumber</span>
                    </div>
                </MudTd>
                <MudTd>@context.StartFrequency - @context.EndFrequency</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>

    <MudItem xs="12" md="6" Class="table-container">
        <MudPaper Elevation="4" Class="p-4 mt-4">
            <MudCard>
                <MudCardContent>
                    <h3>Add Frequency Range</h3>
                    <div class="d-flex align-center">
                        <MudTextField Label="Start Frequency (MHz)" @bind-Value="UserStartFrequency" Variant="Variant.Outlined" />
                        <MudTextField Label="End Frequency (MHz)" @bind-Value="UserEndFrequency" Variant="Variant.Outlined" />
                        <MudButton Color="Color.Primary" OnClick="@(async () => await AddExclusionChannel())">Save</MudButton>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudPaper>
        <MudTable Items="@ExclusionChannelViewModel.UserAddedChannels" FixedHeader="true" Hover="true" Dense="true" Bordered="true">
            <HeaderContent>
                <MudTh>
                    <MudCheckBox Label="" ValueChanged="(bool IsChecked) => SelectAllUserChan(IsChecked)" />
                </MudTh>
                <MudTh>Frequency Range</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudCheckBox Value="@context.Exclude" ValueChanged="(bool isChecked) => ToggleExclusionUserChannels(context, isChecked)" />
                </MudTd>
                <MudTd>
                    <div class="d-flex align-center">
                        @context.StartFrequency - @context.EndFrequency
                    </div>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteExclusionChannel(context)" Size="Size.Small" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public ExclusionChannelViewModel ExclusionChannelViewModel { get; set; }
    private float UserStartFrequency { get; set; }
    private float UserEndFrequency { get; set; }
    private int activeTabIndex;

    protected override void OnInitialized()
    {
        activeTabIndex = LoadLastUsedTabIndex();
        SetSelectedDivision(GetDivisionByTabIndex(activeTabIndex));
    }

    private int LoadLastUsedTabIndex()
    {
        // A FAIRE : récupérer la dernière data user pour savoir dans tab il était et le réafficher
        return 0;
    }

    private string GetDivisionByTabIndex(int tabIndex)
    {
        return tabIndex switch
        {
            0 => "Generic-8MHz",
            1 => "Generic-7MHz",
            2 => "Generic-6MHz",
            _ => "Generic-8MHz"
        };
    }

    private bool IsActiveTab(int tabIndex)
    {
        return activeTabIndex == tabIndex;
    }

    private async void SetSelectedDivision(string division)
    {
        activeTabIndex = GetTabIndexByDivision(division);
        ExclusionChannelViewModel.SelectedCountry = division;
        await ExclusionChannelViewModel.ApplyFiltersCommand.ExecuteAsync(null);
        InvokeAsync(StateHasChanged);
    }

    private int GetTabIndexByDivision(string division)
    {
        return division switch
        {
            "Generic-8MHz" => 0,
            "Generic-7MHz" => 1,
            "Generic-6MHz" => 2,
            _ => 0
        };
    }
    private async Task ToggleExclusion(ExclusionChannel channel, bool isExcluded)
    {
        channel.Exclude = isExcluded;
        if (ExclusionChannelViewModel.ExclusionChannels.Contains(channel))
        {
            ExclusionChannelViewModel.SelectedExclusionChannel = channel;
        }
        await ExclusionChannelViewModel.SaveExclusionChannelAsync();
        StateHasChanged();
    }
    private async Task ToggleExclusionUserChannels(ExclusionChannel channel, bool isExcluded)
    {
        channel.Exclude = isExcluded;
        if (ExclusionChannelViewModel.UserAddedChannels.Contains(channel))
        {
            ExclusionChannelViewModel.SelectedExclusionChannel = channel;
        }
        await ExclusionChannelViewModel.SaveExclusionChannelAsync();
        StateHasChanged();
    }

    private async Task SelectAll(bool isChecked)
    {
        for (int i = 0; i < ExclusionChannelViewModel.ExclusionChannels.Count; i++)
        {
            var chan = ExclusionChannelViewModel.ExclusionChannels[i];
            chan.Exclude = isChecked;
            ExclusionChannelViewModel.SelectedExclusionChannel = chan;
            await ExclusionChannelViewModel.SaveExclusionChannelAsync();
            StateHasChanged();
        }
    }

    private async Task SelectAllUserChan(bool isChecked)
    {
        for (int i = 0; i < ExclusionChannelViewModel.UserAddedChannels.Count; i++)
        {
            var chan = ExclusionChannelViewModel.UserAddedChannels[i];
            chan.Exclude = isChecked;
            ExclusionChannelViewModel.SelectedExclusionChannel = chan;
            await ExclusionChannelViewModel.SaveExclusionChannelAsync();
            StateHasChanged();
        }
    }
    private async Task AddExclusionChannel()
    {
        if (UserEndFrequency > UserStartFrequency)
        {
            ExclusionChannel userChan = new()
                {
                    StartFrequency = UserStartFrequency,
                    EndFrequency = UserEndFrequency,
                    Country = "User",
                    Type = "User",
                    ChannelWidth = UserEndFrequency - UserStartFrequency
                };
            await ExclusionChannelViewModel.SaveUserChannelAsync(userChan);
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Snackbar.Add("Start frequency must be bigger than end frequency", Severity.Error);
        }
    }
    private async Task DeleteExclusionChannel(ExclusionChannel channel)
    {
        ExclusionChannelViewModel.SelectedExclusionChannel = channel;
        await ExclusionChannelViewModel.DeleteExclusionChannelCommand.ExecuteAsync(null);
    }

}

<style>
    .button-group {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .tab-button {
        border-bottom: 2px solid transparent;
        transition: border-color 0.3s;
    }

    .tab-button:disabled {
        border-bottom: 2px solid var(--mud-palette-primary);
    }

    .table-container {
        max-height: calc(100vh - 130px);
        overflow: auto;
    }
</style>
