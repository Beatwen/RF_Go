@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using System.Diagnostics
@using RF_Go.Services
@inject DiscoveryService discoveryService
@inject ShureDiscoveryService shureDiscoveryService
@inject SennheiserDiscoveryService sennheiserDiscoveryService

<h3>Discovered Devices</h3>
<MudTable Items="@DiscoveredDevices" Bordered="true" Hover="true" Striped="true" Dense="true" Class="100vh">
    <HeaderContent>
        <MudTh>Brand</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>IP Addresses</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Type</MudTd>
        <MudTd>@GetBrand(context.Type)</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>
            @foreach (var ip in context.IPAddresses)
            {
                <MudChip Color="Color.Info">@ip</MudChip>
            }
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => SyncDevice(context)">
                Sync
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    private List<DeviceDiscoveredEventArgs> DiscoveredDevices = new();

    protected override void OnInitialized()
    {
        discoveryService.DeviceDiscovered += OnDeviceDiscovered;
        discoveryService.StartDiscovery();
    }

    private void OnDeviceDiscovered(object sender, DeviceDiscoveredEventArgs e)
    {
        if (!DiscoveredDevices.Any(d => d.Name == e.Name))
        {
            InvokeAsync(() =>
            {
                DiscoveredDevices.Add(e);
                StateHasChanged();
            });
        }
    }

    private string GetBrand(string type)
    {
        if (type.Contains("ssc"))
            return "Sennheiser";
        if (type.Contains("ewd"))
            return "EW-D";
        return "Unknown";
    }

    private void SyncDevice(DeviceDiscoveredEventArgs device)
    {
        // Call service to sync device details
    }

    public void Dispose()
    {
        discoveryService.StopDiscovery();
        discoveryService.DeviceDiscovered -= OnDeviceDiscovered;
    }
}
