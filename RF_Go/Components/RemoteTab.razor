@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using System.Diagnostics
@using RF_Go.Services
@inject DiscoveryService discoveryService
@inject ShureDiscoveryService shureDiscoveryService
@inject SennheiserDiscoveryService sennheiserDiscoveryService


<h3>Remote Tab</h3>
<h3>Appareils découverts sur le réseau</h3>
<h4>Shure Discovered Devices</h4>
<ul>
    @foreach (var device in ShureDiscoveredDevices)
    {
        <li>@device</li>
    }
</ul>
<h4>Sennheiser Discovered Devices</h4>
<ul>
    @foreach (var device in SennheiserDiscoveredDevices)
    {
        <li>@device</li>
    }
</ul>
<h4>Other Discovered Devices</h4>
<ul>
    @foreach (var device in DiscoveredDevices)
    {
        <li>@device</li>
    }
</ul>

@code {
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    private List<string> ShureDiscoveredDevices = new List<string>();
    private List<string> SennheiserDiscoveredDevices = new List<string>();
    private List<string> DiscoveredDevices = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        shureDiscoveryService.DeviceDiscovered += OnShureDeviceDiscovered;
        Task.Run(() => shureDiscoveryService.StartListeningAsync());
        discoveryService.DeviceDiscovered += OnDeviceDiscovered;
        discoveryService.StartDiscovery();
        sennheiserDiscoveryService.DeviceDiscovered += OnSennheiserDeviceDiscovered;
        sennheiserDiscoveryService.StartDiscovery();
    }
    private void OnShureDeviceDiscovered(object sender, string deviceInfo)
    {
        InvokeAsync(() =>
        {
            ShureDiscoveredDevices.Add(deviceInfo);
            StateHasChanged();
        });
    }
    private void OnDeviceDiscovered(object sender, string deviceInfo)
    {
        InvokeAsync(() =>
        {
            if (!DiscoveredDevices.Contains(deviceInfo))
            {
                // Ajouter l'appareil à la liste et rafraîchir l'UI
                DiscoveredDevices.Add(deviceInfo);
                Debug.Print("new discovered device");
                Debug.Print(deviceInfo);
                StateHasChanged(); // Met à jour l'interface Blazor
            }
        });
    }
    private void OnSennheiserDeviceDiscovered(object sender, string deviceInfo)
    {
        InvokeAsync(() =>
        {
            // Vérification des doublons avant d'ajouter
            if (!SennheiserDiscoveredDevices.Contains(deviceInfo))
            {
                SennheiserDiscoveredDevices.Add(deviceInfo);
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        discoveryService.StopDiscovery();
        shureDiscoveryService.StopListening();
        shureDiscoveryService.DeviceDiscovered -= OnShureDeviceDiscovered;
        sennheiserDiscoveryService.StopDiscovery();
    }
}