@* @using MudBlazor *@
@* @using Newtonsoft.Json *@
@* @using System.IO *@
@* @using System *@
@* @using RF_Go.Data *@
@* @using RF_Go.Models *@
@* @using RF_Go.ViewModels *@
@* @using System.Diagnostics *@
@* @using RF_Go.Services; *@
@* @using RF_Go.Services.NetworkProtocols *@
@* @inject DiscoveryService discoveryService *@
@* @inject ShureDiscoveryService shureDiscoveryService *@
@* @inject SennheiserDiscoveryService sennheiserDiscoveryService *@
    
@* <MudTable Items="@DiscoveredDevices" *@
@*           Bordered="true" *@
@*           Hover="true" *@
@*           Striped="true" *@
@*           Dense="true" *@
@*           Style="margin: auto; overflow: auto; height: calc(100vh - 150px);"> *@
@*     <HeaderContent> *@
@*         <MudTh>Brand</MudTh> *@
@*         <MudTh>Type</MudTh> *@
@*         <MudTh>Name</MudTh> *@
@*         <MudTh>IP Addresses</MudTh> *@
@*         <MudTh>Actions</MudTh> *@
@*     </HeaderContent> *@
@*     <RowTemplate> *@
@*         <MudTd>@context.Brand</MudTd> *@
@*         <MudTd>@context.Type</MudTd> *@
@*         <MudTd>@context.Name</MudTd> *@
@*         <MudTd> *@
@*                 <MudChip T="string">@context.IPAddress</MudChip> *@
@*         </MudTd> *@
@*         <MudTd> *@
@*             <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => SyncDevice(context)"> *@
@*                 Sync *@
@*             </MudButton> *@
@*         </MudTd> *@
@*     </RowTemplate> *@
@* </MudTable> *@

@* @code { *@
@*     [Parameter] public DevicesViewModel DevicesViewModel { get; set; } *@
@*     [Parameter] public GroupsViewModel GroupsViewModel { get; set; } *@
@*     [Parameter] public DeviceData DeviceData { get; set; } *@
@*     private List<DeviceDiscoveredEventArgs> DiscoveredDevices = new(); *@

@*     protected override void OnInitialized() *@
@*     { *@
@*         discoveryService.DeviceDiscovered += OnDeviceDiscovered; *@
@*         discoveryService.StartDiscovery(); *@
@*         discoveryService.TriggerSennheiserDiscovery(); *@
@*     } *@
@*     private void OnDeviceDiscovered(object sender, DeviceDiscoveredEventArgs e) *@
@*     { *@
@*         if (!DiscoveredDevices.Any(d => d.Name == e.Name)) *@
@*         { *@
@*             InvokeAsync(() => *@
@*             { *@
@*                 DiscoveredDevices.Add(e); *@
@*                 StateHasChanged(); *@
@*             }); *@
@*         } *@
@*     } *@
@*     private void SyncDevice(DeviceDiscoveredEventArgs device) *@
@*     { *@
@*         // A faire dans le futur *@
@*     } *@

@*     public void Dispose() *@
@*     { *@
@*         discoveryService.StopDiscovery(); *@
        
@*         discoveryService.DeviceDiscovered -= OnDeviceDiscovered; *@
@*     } *@
@* } *@
