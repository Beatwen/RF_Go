@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using System.Diagnostics
@using RF_Go.Services
@inject DiscoveryService discoveryService
@inject SennheiserCommunicationService communicationService


<h3>Remote Tab</h3>
<h3>Appareils découverts sur le réseau</h3>

<ul>
    @foreach (var device in DiscoveredDevices)
    {
        <li>@device</li>
    }
</ul>


<h3>Sennheiser G4 Device Discovery</h3>

<button @onclick="StartDiscovery">Start Discovery</button>
<button @onclick="StopDiscovery">Stop Discovery</button>

<h4>Discovered Devices</h4>
<ul>
    @foreach (var device in discoveredDevices)
    {
        <li>@device</li>
    }
</ul>

@code {
    private List<string> discoveredDevices = new List<string>();

    private async Task StartDiscovery()
    {
        await communicationService.StartCommunicationAsync();
    }

    private void StopDiscovery()
    {
        communicationService.StopCommunication();
    }

    // This method will be triggered when a new device is discovered
    private void OnDeviceDiscovered(string deviceInfo)
    {
        InvokeAsync(() =>
        {
            discoveredDevices.Add(deviceInfo);
            StateHasChanged();  // Refresh UI
        });
    }

    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    private List<string> DiscoveredDevices = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Démarrer le service de découverte et s'abonner à l'événement DeviceDiscovered
        //discoveryService.DeviceDiscovered += OnDeviceDiscovered;
        //discoveryService.StartDiscovery();
    }

    private void OnDeviceDiscovered(object sender, string deviceInfo)
    {
        InvokeAsync(() =>
        {
            // Ajouter l'appareil à la liste et rafraîchir l'UI
            DiscoveredDevices.Add(deviceInfo);
            StateHasChanged(); // Met à jour l'interface Blazor
        });
    }

    public void Dispose()
    {
        // Arrêter la découverte lorsque la page est déchargée
        discoveryService.StopDiscovery();
    }
}