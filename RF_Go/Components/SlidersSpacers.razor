@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics
<h1>Sliders</h1>
<div class="SlidersSpacers">
    @foreach (var deviceGroup in DevicesViewModel.Devices.GroupBy(d => new { d.Brand, d.Model, d.Frequency }))
    {
        <div class="d-flex flex-column">
            @foreach (var spacing in spacings)
            {
                <div class="d-flex align-center">
                    <MudCheckBox Class="mt-1 mb-0 pa-0" Dense="true" Size="Size.Small" Label="@($"2Tx{spacing}")"
                                 ValueChanged="(bool IsChecked) => EnableSpacingInChannels(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing, IsChecked)">
                    </MudCheckBox>

                    <MudSlider Size="Size.Small" Value="@FindSpacingValue(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing)"
                               Class="mt-1 mb-0 pa-0 pl-2 pr-2" ValueLabel="true"
                               ValueChanged="(int value) => SetSpacingValueToChannels(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, value, spacing)"
                               Min="0" Max="500" Step="5" Color="Color.Success">
                    </MudSlider>
                </div>
            }
        </div>
    }
</div>
@code{
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    private List<int> spacings = new List<int> { 3, 5, 7, 9, 33 };
    private void EnableSpacingInChannels(string brand, string model, string frequency, int spacing, bool IsChecked)
    {
        foreach (var device in DevicesViewModel.Devices.Where(d =>
                                                                d.Brand == brand &&
                                                                    d.Model == model &&
                                                                        d.Frequency == frequency))
        {
            foreach (var chan in device.Channels)
            {
                switch (spacing)
                {
                    case 3: chan.ThirdOrderSpacingEnable = IsChecked; break;
                    case 5: chan.FifthOrderSpacingEnable = IsChecked; break;
                    case 7: chan.SeventhOrderSpacingEnable = IsChecked; break;
                    case 9: chan.NinthOrderSpacingEnable = IsChecked; break;
                    case 33: chan.ThirdOrderSpacing3TxEnable = IsChecked; break;
                }
            }
        }
    }
    private int FindSpacingValue(string brand, string model, string frequency, int spacing)
    {
        RFDevice D = DevicesViewModel.Devices.FirstOrDefault(d => d.Brand == brand && d.Model == model && d.Frequency == frequency);

        switch (spacing)
        {
            case 3: return D.Channels[0].ThirdOrderSpacing;
            case 5: return D.Channels[0].FifthOrderSpacing;
            case 7: return D.Channels[0].SeventhOrderSpacing;
            case 9: return D.Channels[0].NinthOrderSpacing;
            case 33: return D.Channels[0].ThirdOrderSpacing3Tx;
        }
        return D.Channels[0].ThirdOrderSpacing;
    }
    private void SetSpacingValueToChannels(string brand, string model, string frequency, int value, int spacing)
    {
        foreach (RFDevice device in DevicesViewModel.Devices.Where(d =>
                                                                    d.Brand == brand &&
                                                                        d.Model == model &&
                                                                            d.Frequency == frequency))
        {
            foreach (RFChannel chan in device.Channels)
            {
                switch (spacing)
                {
                    case 3: chan.ThirdOrderSpacing = value; break;
                    case 5: chan.FifthOrderSpacing = value; break;
                    case 7: chan.SeventhOrderSpacing = value; break;
                    case 9: chan.NinthOrderSpacing = value; break;
                    case 33: chan.ThirdOrderSpacing3Tx = value; break;
                }
            }
        }
    }
}
