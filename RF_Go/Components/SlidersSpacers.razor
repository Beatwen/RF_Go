@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics


<MudText Typo="Typo.h5" Class="pl-6">Spacing</MudText>
<div class="SlidersSpacers">
    @foreach (var deviceGroup in DevicesViewModel.Devices.GroupBy(d => new { d.Brand, d.Model, d.Frequency }))
    {
        <div class="d-flex flex-column">
            <MudText Typo="Typo.h6" Class="pl-6">@deviceGroup.Key.Brand - @deviceGroup.Key.Model</MudText>
            @foreach (var spacing in spacings)
            {
                <div class="d-flex align-center pl-4 pr-4">
                    <MudCheckBox Class="mt-1" Dense="true" Size="Size.Small" Label="@($"2Tx{spacing}")" Value="GetSpacingState(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing)"
                                 ValueChanged="(bool IsChecked) => SetSpacingState(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing, IsChecked)">
                    </MudCheckBox>
                    <MudSlider Size="Size.Small" Value="@GetSpacingValue(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing)"
                               Class="mt-1 pr-4 pl-4 w-25" ValueLabel="true"
                               ValueChanged="(int value) => SetSpacingValue(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, value, spacing)"
                               Min="0" Max="500" Step="5" Color="Color.Success">
                    </MudSlider>
                </div>
            }
        </div>
    }
</div>
@code{
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    private List<int> spacings = new List<int> { 3, 5, 7, 9, 33 };
    private bool GetSpacingState(string brand, string model, string frequency, int spacing)
    {
        RFDevice D = DevicesViewModel.Devices.FirstOrDefault(d => d.Brand == brand && d.Model == model && d.Frequency == frequency);

        switch (spacing)
        {
            case 3: return D.Channels[0].ThirdOrderSpacingEnable;
            case 5: return D.Channels[0].FifthOrderSpacingEnable;
            case 7: return D.Channels[0].SeventhOrderSpacingEnable;
            case 9: return D.Channels[0].NinthOrderSpacingEnable;
            case 33: return D.Channels[0].ThirdOrderSpacing3TxEnable;
        }
        return false;
    }
    private async Task SetSpacingState(string brand, string model, string frequency, int spacing, bool IsChecked)
    {
        var devicesToModify = DevicesViewModel.Devices
                                .Where(d => d.Brand == brand &&
                                            d.Model == model &&
                                            d.Frequency == frequency)
                                .ToList();

        foreach (var device in devicesToModify)
        {
            foreach (var chan in device.Channels)
            {
                switch (spacing)
                {
                    case 3: chan.ThirdOrderSpacingEnable = IsChecked; break;
                    case 5: chan.FifthOrderSpacingEnable = IsChecked; break;
                    case 7: chan.SeventhOrderSpacingEnable = IsChecked; break;
                    case 9: chan.NinthOrderSpacingEnable = IsChecked; break;
                    case 33: chan.ThirdOrderSpacing3TxEnable = IsChecked; break;
                }
            }
            DevicesViewModel.SetOperatingDevice(device);
            await DevicesViewModel.SaveDeviceAsync();
        }
    }
    private int GetSpacingValue(string brand, string model, string frequency, int spacing)
    {
        RFDevice D = DevicesViewModel.Devices.FirstOrDefault(d => d.Brand == brand && d.Model == model && d.Frequency == frequency);

        switch (spacing)
        {
            case 3: return D.Channels[0].ThirdOrderSpacing;
            case 5: return D.Channels[0].FifthOrderSpacing;
            case 7: return D.Channels[0].SeventhOrderSpacing;
            case 9: return D.Channels[0].NinthOrderSpacing;
            case 33: return D.Channels[0].ThirdOrderSpacing3Tx;
        }
        return 0;
    }
    private CancellationTokenSource debounceTokenSource;

    private void SetSpacingValue(string brand, string model, string frequency, int value, int spacing)
    {
        foreach (RFDevice device in DevicesViewModel.Devices.Where(d =>
                                                                    d.Brand == brand &&
                                                                        d.Model == model &&
                                                                            d.Frequency == frequency))
        {
            foreach (RFChannel chan in device.Channels)
            {
                switch (spacing)
                {
                    case 3: chan.ThirdOrderSpacing = value; break;
                    case 5: chan.FifthOrderSpacing = value; break;
                    case 7: chan.SeventhOrderSpacing = value; break;
                    case 9: chan.NinthOrderSpacing = value; break;
                    case 33: chan.ThirdOrderSpacing3Tx = value; break;
                }
            }
        }
        DebounceSave(brand, model, frequency, spacing);
    }

    private void DebounceSave(string brand, string model, string frequency, int spacing)
    {
        debounceTokenSource?.Cancel();
        debounceTokenSource = new CancellationTokenSource();
        // Delay the save operation by 300 milliseconds (or your desired debounce delay)
        _ = Task.Delay(300, debounceTokenSource.Token).ContinueWith(async task =>
        {
            if (!task.IsCanceled)
            {
                await SaveSpacingValueToChannels(brand, model, frequency, spacing);
            }
        }, TaskScheduler.Default);
    }

    private async Task SaveSpacingValueToChannels(string brand, string model, string frequency, int spacing)
    {
        foreach (var device in DevicesViewModel.Devices.Where(d =>
                                                                d.Brand == brand &&
                                                                    d.Model == model &&
                                                                        d.Frequency == frequency))
        {
            Debug.Print("go oa o ao g!");
            DevicesViewModel.SetOperatingDevice(device);
            await DevicesViewModel.SaveDeviceAsync();
        }
    }

}
