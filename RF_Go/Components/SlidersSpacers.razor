@using MudBlazor
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics

<div class="sliders-spacers-container" style="max-height: calc(100vh - 269px); overflow:auto;">
    <MudPaper Elevation="0" Class="pa-2">
        
        @foreach (var deviceGroup in DevicesViewModel.Devices.GroupBy(d => new { d.Brand, d.Model, d.Frequency }))
        {
            <MudCard Elevation="0" Class="mb-2 mud-border-secondary border-solid border-1 p-4">
                <MudCardHeader Class="py-0">
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1" Style="font-weight: 500;">
                            <MudIcon Icon="@Icons.Material.Filled.SettingsInputAntenna" Class="mr-1" Size="Size.Small" />
                            @deviceGroup.Key.Brand - @deviceGroup.Key.Model
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    @foreach (var spacing in spacings)
                    {
                        <div class="d-flex align-center justify-space-between py-0 spacing-row">
                            <div class="d-flex align-center" style="min-width: 75px;">
                                <MudTooltip Text="@GetSpacingTooltip(spacing)">
                                    <MudCheckBox 
                                        Class="mr-0 pa-0" 
                                        Dense="true" 
                                        Size="Size.Small" 
                                        Value="GetSpacingState(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing)"
                                        ValueChanged="(bool IsChecked) => SetSpacingState(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing, IsChecked)">
                                    </MudCheckBox>
                                </MudTooltip>
                                <MudText Typo="Typo.caption" Style="font-weight: 500;" Class="ml-0">@GetSpacingLabel(spacing)</MudText>
                            </div>
                            <div style="width: 70px; min-width: 70px; max-width: 150px;" class="ml-1">
                                <MudSlider 
                                    Size="Size.Small" 
                                    Value="@GetSpacingValue(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, spacing)"
                                    ValueLabel="true"
                                    Immediate="true"
                                    ValueChanged="(int value) => SetSpacingValue(deviceGroup.Key.Brand, deviceGroup.Key.Model, deviceGroup.Key.Frequency, value, spacing)"
                                    Min="0" 
                                    Max="500" 
                                    Step="5" 
                                    Color="@GetSliderColor(spacing)">
                                </MudSlider>
                            </div>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        }
        
        @if (!DevicesViewModel.Devices.Any())
        {
            <MudAlert Severity="Severity.Info" Class="mt-2">No devices found.</MudAlert>
        }
    </MudPaper>
</div>

<style>
    .sliders-spacers-container {
        scrollbar-width: thin;
    }
    
    .sliders-spacers-container::-webkit-scrollbar {
        width: 5px;
    }
    
    .sliders-spacers-container::-webkit-scrollbar-track {
        background: #f0f0f0;
        border-radius: 3px;
    }
    
    .sliders-spacers-container::-webkit-scrollbar-thumb {
        background-color: var(--mud-palette-secondary);
        border-radius: 3px;
    }
    
    .spacing-row:hover {
        background-color: rgba(0, 0, 0, 0.03);
        border-radius: 4px;
    }
</style>

@code{
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }

    private List<int> spacings = new List<int> { 3, 5, 7, 9, 33 };
    
    private string GetSpacingTooltip(int spacing)
    {
        return spacing == 33 
            ? "3TX 3rd Order Spacing" 
            : $"2TX {spacing}th Order Spacing";
    }
    
    private string GetSpacingLabel(int spacing)
    {
        return spacing == 33 
            ? "3TX 3rd" 
            : $"2TX {spacing}th";
    }
    
    private Color GetSliderColor(int spacing)
    {
        switch (spacing)
        {
            case 3: return Color.Success;
            case 5: return Color.Info;
            case 7: return Color.Warning;
            case 9: return Color.Error;
            case 33: return Color.Secondary;
            default: return Color.Default;
        }
    }
    
    private bool GetSpacingState(string brand, string model, string frequency, int spacing)
    {
        RFDevice D = DevicesViewModel.Devices.FirstOrDefault(d => d.Brand == brand && d.Model == model && d.Frequency == frequency);
        if (D == null || D.Channels.Count == 0) return false;

        switch (spacing)
        {
            case 3: return D.Channels[0].ThirdOrderSpacingEnable;
            case 5: return D.Channels[0].FifthOrderSpacingEnable;
            case 7: return D.Channels[0].SeventhOrderSpacingEnable;
            case 9: return D.Channels[0].NinthOrderSpacingEnable;
            case 33: return D.Channels[0].ThirdOrderSpacing3TxEnable;
        }
        return false;
    }
    
    private async Task SetSpacingState(string brand, string model, string frequency, int spacing, bool IsChecked)
    {
        var devicesToModify = DevicesViewModel.Devices
                                .Where(d => d.Brand == brand &&
                                            d.Model == model &&
                                            d.Frequency == frequency)
                                .ToList();

        foreach (var device in devicesToModify)
        {
            foreach (var chan in device.Channels)
            {
                switch (spacing)
                {
                    case 3: chan.ThirdOrderSpacingEnable = IsChecked; break;
                    case 5: chan.FifthOrderSpacingEnable = IsChecked; break;
                    case 7: chan.SeventhOrderSpacingEnable = IsChecked; break;
                    case 9: chan.NinthOrderSpacingEnable = IsChecked; break;
                    case 33: chan.ThirdOrderSpacing3TxEnable = IsChecked; break;
                }
            }
            DevicesViewModel.SetOperatingDevice(device);
            await DevicesViewModel.SaveDeviceAsync();
        }
        
        StateHasChanged();
    }
    
    private int GetSpacingValue(string brand, string model, string frequency, int spacing)
    {
        RFDevice D = DevicesViewModel.Devices.FirstOrDefault(d => d.Brand == brand && d.Model == model && d.Frequency == frequency);
        if (D == null || D.Channels.Count == 0) return 0;

        switch (spacing)
        {
            case 3: return D.Channels[0].ThirdOrderSpacing;
            case 5: return D.Channels[0].FifthOrderSpacing;
            case 7: return D.Channels[0].SeventhOrderSpacing;
            case 9: return D.Channels[0].NinthOrderSpacing;
            case 33: return D.Channels[0].ThirdOrderSpacing3Tx;
        }
        return 0;
    }
    
    private CancellationTokenSource debounceTokenSource;

    private void SetSpacingValue(string brand, string model, string frequency, int value, int spacing)
    {
        foreach (RFDevice device in DevicesViewModel.Devices.Where(d =>
                                                                    d.Brand == brand &&
                                                                        d.Model == model &&
                                                                            d.Frequency == frequency))
        {
            foreach (RFChannel chan in device.Channels)
            {
                switch (spacing)
                {
                    case 3: chan.ThirdOrderSpacing = value; break;
                    case 5: chan.FifthOrderSpacing = value; break;
                    case 7: chan.SeventhOrderSpacing = value; break;
                    case 9: chan.NinthOrderSpacing = value; break;
                    case 33: chan.ThirdOrderSpacing3Tx = value; break;
                }
            }
        }
        DebounceSave(brand, model, frequency, spacing);
    }

    private void DebounceSave(string brand, string model, string frequency, int spacing)
    {
        debounceTokenSource?.Cancel();
        debounceTokenSource = new CancellationTokenSource();
        _ = Task.Delay(300, debounceTokenSource.Token).ContinueWith(async task =>
        {
            if (!task.IsCanceled)
            {
                await SaveSpacingValueToChannels(brand, model, frequency, spacing);
                await InvokeAsync(StateHasChanged);
            }
        }, TaskScheduler.Default);
    }

    private async Task SaveSpacingValueToChannels(string brand, string model, string frequency, int spacing)
    {
        foreach (var device in DevicesViewModel.Devices.Where(d =>
                                                                d.Brand == brand &&
                                                                    d.Model == model &&
                                                                        d.Frequency == frequency))
        {
            DevicesViewModel.SetOperatingDevice(device);
            await DevicesViewModel.SaveDeviceAsync();
        }
    }
}
