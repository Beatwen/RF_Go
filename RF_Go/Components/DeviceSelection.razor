﻿@using MudBlazor
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using System.Diagnostics
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject BackupFrequenciesViewModel BackupFrequenciesViewModel

@* <MudText Typo="Typo.h5" Class="pl-6 pt-2">Devices Selection</MudText> */ *@

<div id="SelectDeviceMenu">
    <MudGrid Spacing="2" Justify="Justify.Center" Class="pl-6 pr-6">
        <MudItem xs="12">
            <MudSelect T="string" HelperText="Choose device brand" Placeholder="Please Select"
            AdornmentIcon="@Icons.Material.Filled.LaptopMac" AdornmentColor="Color.Primary" Value="@Device.Brand" ValueChanged="@((string e) => OnBrandChanged(e))">
                @foreach (var brand in DeviceData.Brands.Keys)
                {
                    <MudSelectItem T="string" value="@brand">@brand</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudSelect T="string" HelperText="Choose device model" Placeholder="Please Select"
            AdornmentIcon="@Icons.Material.Filled.WifiChannel" AdornmentColor="Color.Primary" Value="@Device.Model" ValueChanged="@((string e) => OnModelChanged(e))">
                <option value="" disabled selected hidden>Choose a model...</option>
                @if (Device.Brand is null)
                {
                    <MudSelectItem T="string">Choose a brand first</MudSelectItem>
                }
                else
                {
                    @foreach (var model in DeviceData.Brands[Device.Brand].Keys)
                    {
                        <MudSelectItem T="string" value="@model">@model</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudSelect T="string" HelperText="Choose device frequency" Placeholder="Please Select"
            AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" @bind-Value="Device.Frequency">
                @if (Device.Model == "" || Device.Model is null)
                {
                    <MudSelectItem T="string">Choose a model first</MudSelectItem>
                }
                else
                {
                    @foreach (var frequency in DeviceData.Brands[Device.Brand][Device.Model].Keys)
                    {
                        <MudSelectItem T="string" value="@frequency">@frequency ( @DeviceData.Brands[Device.Brand][Device.Model][frequency][0] - @DeviceData.Brands[Device.Brand][Device.Model][frequency][1] )</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudSelect HelperText="Choose device frequency" Placeholder="Please Select" AdornmentColor="Color.Primary"
            @bind-Value="@selectedQuantity">
                @foreach (var option in frequencyOptions)
                {
                    <MudSelectItem T="int" value="@option">@option</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudSelect HelperText="Number of backup frequencies" Placeholder="Please Select" AdornmentColor="Color.Primary"
            @bind-Value="@selectedBackupCount">
                @foreach (var option in backupCountOptions)
                {
                    <MudSelectItem T="int" value="@option">@option</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudButton @onclick="() => SaveDeviceInDB(Device)">Save device</MudButton>
    </MudGrid>
</div>
@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    [Parameter] public GroupsViewModel GroupsViewModel { get; set; }
    [Parameter] public DeviceData DeviceData { get; set; }
    [Parameter] public EventCallback OnDeviceSaved { get; set; }

    private RFDevice Device => DevicesViewModel.OperatingDevice;
    private bool selectAll { get; set; }
    private List<string> clickedEvents = new();
    private int selectedQuantity = 1;
    private List<int> frequencyOptions = Enumerable.Range(1, 99).ToList();
    private int selectedBackupCount = 0;
    private List<int> backupCountOptions = Enumerable.Range(0, 6).ToList();

    protected override async Task OnInitializedAsync()
    {
        await DevicesViewModel.LoadDevicesAsync();
        await GroupsViewModel.LoadGroupsAsync();
        await base.OnInitializedAsync();
    }

    private async Task SaveDeviceInDB(RFDevice device)
    {
        if (string.IsNullOrEmpty(device.Brand) || string.IsNullOrEmpty(device.Model) || string.IsNullOrEmpty(device.Frequency))
        {
            Snackbar.Add("Please select a brand, model, and frequency", Severity.Error);
            return;
        }
        DevicesViewModel.SaveDataDevicesInfo(device);
        DevicesViewModel.SaveDataChannelsInfo(device);

        // Save backup frequency count for this device type
        await BackupFrequenciesViewModel.SaveBackupFrequencyCountAsync(device.Brand, device.Model, device.Frequency, selectedBackupCount);

        for (int i = 0; i < selectedQuantity; i++)
        {
            var clonedDevice = device.Clone();
            DevicesViewModel.OperatingDevice = clonedDevice;
            try
            {
                Debug.Print($"Saving device {i + 1}...");
                await DevicesViewModel.SaveDeviceAsync();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error saving device {i + 1}: {ex.Message}");
                break;
            }
        }

        await DevicesViewModel.LoadDevicesAsync();
        await OnDeviceSaved.InvokeAsync();
        Snackbar.Add("Device(s) added", Severity.Success);
        MudDialog.Close();
    }

    private void OnBrandChanged(string e)
    {
        Device.Brand = e;
        Device.Model = string.Empty;
        Device.Frequency = string.Empty;
        StateHasChanged();
    }
    private void OnModelChanged(string e)
    {
        Device.Model = e;
        Device.Frequency = string.Empty;
        StateHasChanged();
    }
}