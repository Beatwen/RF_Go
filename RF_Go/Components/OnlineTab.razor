@using System.Diagnostics
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Services.NetworkProtocols
@using RF_Go.Components.Modal
@using MudBlazor
@inject DiscoveryService discoveryService
@inject IDialogService DialogService

<div class="d-flex pl-6 pr-6 w-100 align-center justify-space-between pt-2">
    <div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" @onclick="Resync">
            Refresh
        </MudButton>
    </div>
</div>

@if (DiscoveredDevices.Count() == 0)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Style="display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="pa-6" Elevation="3" Style="text-align: center; max-width: 400px;">
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-4">
                No devices found yet on the network.
            </MudAlert>
        </MudPaper>
    </MudContainer>
}
else
{

    <MudTable Items="@DiscoveredDevices"
              Bordered="true"
              Hover="true"
              Striped="true"
              Dense="true"
              Style="margin: auto; overflow: auto; height: calc(100vh - 150px);">
        <HeaderContent>
            <MudTh>Brand</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>IP Address</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Brand</MudTd>
            <MudTd>@context.Type</MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>
                <MudChip T="string">@context.IPAddress</MudChip>
            </MudTd>
            <MudTd>
                @if (context.IsSynced)
                {
                    <MudText Variant="Variant.Filled" Color="Color.Primary">
                        Synced !
                    </MudText>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => HandleSyncDevice(context)">
                        Sync!!
                    </MudButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}
@code {
    [Parameter] public DevicesViewModel DevicesViewModel { get; set; }
    //[Parameter] public EventCallback<RFDevice> OnDeviceSynced { get; set; }
    private List<DeviceDiscoveredEventArgs> DiscoveredDevices = new();
    private List<RFDevice> MatchingOfflineDevices = new();

    protected override void OnInitialized()
    {
        discoveryService.DeviceDiscovered += OnDeviceDiscovered;
        discoveryService.StartDiscovery();
        discoveryService.TriggerSennheiserDiscovery();
    }

    private void OnDeviceDiscovered(object sender, DeviceDiscoveredEventArgs e)
    {
        if (!DiscoveredDevices.Any(d => d.Name == e.Name))
        {
            InvokeAsync(() =>
            {
                DiscoveredDevices.Add(e);
                StateHasChanged();
            });
        }
    }
    private void Resync()
    {
        discoveryService.StartDiscovery();
        discoveryService.TriggerSennheiserDiscovery();
        StateHasChanged();
    }
    private async void HandleSyncDevice(DeviceDiscoveredEventArgs device)
    {
        MatchingOfflineDevices = DevicesViewModel.Devices
            .Where(d => d.Brand == device.Brand && d.Model == device.Type && d.Frequency == device.Frequency && !d.IsSynced)
            .ToList();

        if (MatchingOfflineDevices.Any())
        {
            await OpenDialog(device);
        }
        else
        {
            Debug.Print("no match");
        }
    }

    private async Task OpenDialog(DeviceDiscoveredEventArgs onlineDevice)
    {
        var parameters = new DialogParameters
        {
            { "MatchingOfflineDevices", MatchingOfflineDevices },
            { "OnlineDevice", onlineDevice },
            { "DevicesViewModel", DevicesViewModel }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<MappingModal>("Choose a device to map", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }
    public void Dispose()
    {
        discoveryService.StopDiscovery();
        discoveryService.DeviceDiscovered -= OnDeviceDiscovered;
    }
}

