@page "/register"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization;
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Json
@using RF_Go.Utils
@using RF_Go.Models.Licensing
@inject NavigationManager NavigationManager
@inject AuthService AuthService
<MudContainer MaxWidth="MaxWidth.Small" Style="margin: auto; padding: 40px;">
@if (loading)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column justify-center" style="height:100vh;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Getting devices</MudText>
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Striped="true" Size="Size.Medium" Class="w-50 my-7" />
    </MudContainer>
}
else
{
    
        <MudPaper Class="pa-4" Elevation="3">
            <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Create Your Account</MudText>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="First Name" Required="true" RequiredError="First Name is required!"
                @bind-Value="@registrationModel.FirstName" FullWidth="true" Class="mb-3" />
                <MudTextField T="string" Label="Last Name" Required="true" RequiredError="Last Name is required!"
                @bind-Value="@registrationModel.LastName" FullWidth="true" Class="mb-3" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                @bind-Value="@registrationModel.Email"
                Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email address!" })"
                FullWidth="true" Class="mb-3" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick='@( () => TogglePasswordVisibility("password") )' AdornmentAriaLabel="Show Password"
                InputType="@PasswordInput"
                Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                Required="true" RequiredError="Password is required!"
                @bind-Value="@registrationModel.Password" FullWidth="true" Class="mb-3" />
                <MudTextField T="string" Label="Confirm Password" HelperText="Repeat the password"
                InputType="@ConfirmPasswordInput"
                Validation="@(new Func<string, string>(PasswordMatch))"
                Adornment="Adornment.End" AdornmentIcon="@ConfirmPasswordInputIcon" OnAdornmentClick='@( () => TogglePasswordVisibility("confirmPassword") )' AdornmentAriaLabel="Show Password Confirmation"
                FullWidth="true" Class="mb-3" />
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree to the terms"
                Label="I agree to the terms and conditions!"
                @bind-Checked="@registrationModel.AcceptedTerms" Class="mb-4" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" FullWidth="true"
                OnClick="@RegisterForm">Register</MudButton>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
                <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">
                    Already have an account? <MudLink Href="/login" Color="Color.Primary">Log in here</MudLink>
                </MudText>
                <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">
                    For debugging purpose, you can directly <MudLink Href="/index">go to the app</MudLink>
                </MudText>
            </MudForm>
        </MudPaper>
    
}
</MudContainer>
@code {

    private RegistrationModel registrationModel = new();
    private bool success;
    private string[] errors = { };
    private MudTextField<string> pwField1;
    private MudForm form;
    private bool passwordVision;
    private bool passwordConfirmationVision;
    private InputType PasswordInput = InputType.Password;
    private InputType ConfirmPasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool loading = false;
    @inject NavigationManager NavigationManager


    private void TogglePasswordVisibility(string field)
    {
        if (field == "password")
        {
            passwordVision = !passwordVision;
            PasswordInputIcon = passwordVision ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
            PasswordInput = passwordVision ? InputType.Text : InputType.Password;
        }
        else if (field == "confirmPassword")
        {
            passwordConfirmationVision = !passwordConfirmationVision;
            ConfirmPasswordInputIcon = passwordConfirmationVision ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = passwordConfirmationVision ? InputType.Text : InputType.Password;
        }
    }


    private async Task RegisterForm()
    {
        if (!success) return;

        try
        {
            loading = true;

            // Use AuthService to register the user
            var registrationResponse = await AuthService.RegisterAsync(registrationModel);

            // Store the client information
            await TokenStorage.SaveClientIdAsync(registrationResponse.Client.ClientId);
            await TokenStorage.SaveClientSecretAsync(registrationResponse.Client.ClientSecret);

            NavigationManager.NavigateTo("/login?from=register");
        }
        catch (Exception ex)
        {
            errors = new[] { $"Unexpected error: {ex.Message}" };
        }
        finally
        {
            loading = false;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw)) yield return "Password is required!";
        if (pw.Length < 8) yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]")) yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]")) yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]")) yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        return pwField1?.Value != arg ? "Passwords don't match" : null;
    }



}
