@page "/register"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Json
@using RF_Go.Utils
@using RF_Go.Models.Licensing
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small" Style="margin: auto; padding: 40px;">
    <MudPaper Class="pa-4" Elevation="3">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Create Your Account</MudText>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="First Name" Required="true" RequiredError="First Name is required!"
                          @bind-Value="@registrationModel.FirstName" FullWidth="true" Class="mb-3" />
            <MudTextField T="string" Label="Last Name" Required="true" RequiredError="Last Name is required!"
                          @bind-Value="@registrationModel.LastName" FullWidth="true" Class="mb-3" />
            <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                          @bind-Value="@registrationModel.Email"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email address!" })"
                          FullWidth="true" Class="mb-3" />
            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                          InputType="@PasswordInput"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          AdornmentAriaLabel="Show Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                          Required="true" RequiredError="Password is required!"
                          @bind-Value="@registrationModel.Password" FullWidth="true" Class="mb-3" />
            <MudTextField T="string" Label="Confirm Password" HelperText="Repeat the password"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))"
                          FullWidth="true" Class="mb-3" />
            <MudCheckBox T="bool" Required="true" RequiredError="You must agree to the terms"
                         Label="I agree to the terms and conditions!"
                         @bind-Checked="@registrationModel.AcceptedTerms" Class="mb-4" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" FullWidth="true"
                       OnClick="@RegisterForm">Register</MudButton>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
            <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">
                Already have an account? <MudLink Href="/login" Color="Color.Primary">Log in here</MudLink>
            </MudText>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">
                For debugging purpose, you can directly <MudLink Href="/index">go to the app</MudLink>
            </MudText>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private RegistrationModel registrationModel = new();
    private bool success;
    private string[] errors = { };
    private MudTextField<string> pwField1;
    private MudForm form;
    private HttpClient httpClient = new HttpClient();
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        isShow = !isShow;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
    }

    private async Task RegisterForm()
    {
        if (!success) return;

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"{AppConfig.ApiBaseUrl}/users")
                {
                    Content = JsonContent.Create(registrationModel)
                };
            request.Headers.Add("X-API-KEY", AppConfig.ApiKey);

            var response = await httpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login?from=register");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errors = new[] { $"Server Error: {response.StatusCode}. Details: {errorContent}" };
            }
        }
        catch (Exception ex)
        {
            errors = new[] { $"Unexpected error: {ex.Message}" };
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw)) yield return "Password is required!";
        if (pw.Length < 8) yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]")) yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]")) yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]")) yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        return pwField1?.Value != arg ? "Passwords don't match" : null;
    }

    public class RegistrationModel
    {
        [Required] public string FirstName { get; set; } = string.Empty;
        [Required] public string LastName { get; set; } = string.Empty;
        [Required, EmailAddress] public string Email { get; set; } = string.Empty;
        [Required] public string Password { get; set; } = string.Empty;
        [Required] public bool AcceptedTerms { get; set; } = false;
    }
}
