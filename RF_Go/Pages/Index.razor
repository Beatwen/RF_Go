@inherits ComponentBase
@page "/"
@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DevicesViewModel DevicesViewModel
@inject GroupsViewModel GroupsViewModel

<MudTabs KeepPanelsAlive="true" Elevation="4" Centered="true" Rounded="false" AlwaysShowScrollButtons="true" Color="@Color.Info" Class="flex justify-content-around">
        <MudTabPanel Text="Devices" ID='"devices_tab"'>
            <MudText>
                    <MainTab DeviceData="deviceData" DevicesViewModel="DevicesViewModel" GroupsViewModel="GroupsViewModel" />
                    <SlidersSpacers DeviceData="deviceData" DevicesViewModel="DevicesViewModel" GroupsViewModel="GroupsViewModel" />
                    <RFGroupsLayout DeviceData="deviceData" DevicesViewModel="DevicesViewModel" GroupsViewModel="GroupsViewModel" />"
            </MudText>
        </MudTabPanel>
        <MudTabPanel Text="TVChannels" ID='"tvchannels_tab"' />
        <MudTabPanel Text="Remote" ID='"remote_tab"' />
</MudTabs>

@code 
{

    private RFDevice Device => DevicesViewModel.OperatingDevice;
    private bool _selectOnRowClick = true;
    private bool isAddingDevice = false;
    private int selectedQuantity = 1;
    private DeviceData deviceData;
    private int id;
    private List<int> frequencyOptions = Enumerable.Range(1, 99).ToList();
    private MudTable<RFDevice> mudTable;
    private int selectedRowNumber = -1;
    private bool selectAll { get; set; }
    private List<string> clickedEvents = new();
    private string searchString1 = "";
    private RFDevice selectedItem1 = null;
    public List<ChartSeries> Series { get; set; } = new();
    public string[] XAxisLabels => Enumerable.Range(100000, 1000000).Select(x => x.ToString()).ToArray();

    private bool EnableSpacingInChannels(string brand, string model, string frequency, int spacing)
    {
        return true;
    }
    private int FindSpacingValue(string brand, string model, string frequency, int spacing)
    {
        return deviceData.Brands[brand][model][frequency][spacing];
    }
    private string CalculateStyle(RFChannel chan)
    {
        string color = chan.Checked ? "aliceblue" : "red";
        return "background-color:" + color;
    }
    private void DeleteDevice(RFDevice context)
    {
        DevicesViewModel.SetOperatingDevice(context);
    }
    private void AddDevice()
    {
        isAddingDevice = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var context = new DatabaseContext();
        DevicesViewModel = new DevicesViewModel(context);
        var json = File.ReadAllText(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Shared", "Devices.json"));
        deviceData = JsonConvert.DeserializeObject<DeviceData>(json);
        await DevicesViewModel.LoadDevicesAsync();
        await base.OnInitializedAsync();
        //var timer = new Timer(async _ =>
        //{
        //    await InvokeAsync(() =>
        //    {
         //       StateHasChanged();
           // });
        //}, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

}
