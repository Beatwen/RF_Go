@inherits ComponentBase
@page "/main"
@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using System.Text
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DevicesViewModel DevicesViewModel
@inject GroupsViewModel GroupsViewModel
@inject ExclusionChannelViewModel ExclusionChannelViewModel


@if (isLoadingJSON)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
        <MudTabs
                 KeepPanelsAlive="true"
                 Elevation="4"
                 Centered="true"
                 Rounded="false"
                 AlwaysShowScrollButtons="true">
            <MudTabPanel Text="Devices" ID='"devices_tab"' Class="flex-grow-1 d-flex flex-column">
                    <MudGrid Spacing="1" Class="display-6 pl-6 pr-6">
                        <MudItem xs="12" md="3">
                            <MudPaper Class="mt-4">
                                <TVChannelsFilter ExclusionChannelViewModel="ExclusionChannelViewModel" />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudPaper Class="mt-4">
                                <MainTab DeviceData="deviceData"
                                         ExclusionChannelViewModel="ExclusionChannelViewModel"
                                         DevicesViewModel="DevicesViewModel"
                                         GroupsViewModel="GroupsViewModel" />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="mt-4">
                                <SlidersSpacers DeviceData="deviceData"
                                                DevicesViewModel="DevicesViewModel"
                                                GroupsViewModel="GroupsViewModel" />
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                    <RFGroupsLayout DeviceData="deviceData"
                                    DevicesViewModel="DevicesViewModel"
                                    GroupsViewModel="GroupsViewModel" />
            </MudTabPanel>
            <MudTabPanel Text="TVChannels" ID='"tvchannels_tab"' />
            <MudTabPanel Text="Remote" ID='"remote_tab"'>
                <MudText>
                    <RemoteTab DeviceData="deviceData"
                               DevicesViewModel="DevicesViewModel"
                               GroupsViewModel="GroupsViewModel" />
                </MudText>
            </MudTabPanel>
        </MudTabs>
}

@code 
{

    private RFDevice Device => DevicesViewModel.OperatingDevice;
    private bool isLoadingJSON = true;
    private bool _selectOnRowClick = true;
    private bool isAddingDevice = false;
    private int selectedQuantity = 1;
    private DeviceData deviceData;
    private int id;
    private List<int> frequencyOptions = Enumerable.Range(1, 99).ToList();
    private MudTable<RFDevice> mudTable;
    private int selectedRowNumber = -1;
    private bool selectAll { get; set; }
    private List<string> clickedEvents = new();
    private string searchString1 = "";
    private RFDevice selectedItem1 = null;
    public List<ChartSeries> Series { get; set; } = new();
    public string[] XAxisLabels => Enumerable.Range(100000, 1000000).Select(x => x.ToString()).ToArray();




    private void RefreshComponents()
    {
        StateHasChanged();  
    }


    private bool EnableSpacingInChannels(string brand, string model, string frequency, int spacing)
    {
        return true;
    }
    private int FindSpacingValue(string brand, string model, string frequency, int spacing)
    {
        return deviceData.Brands[brand][model][frequency][spacing];
    }
    private string CalculateStyle(RFChannel chan)
    {
        string color = chan.Checked ? "aliceblue" : "red";
        return "background-color:" + color;
    }
    private void DeleteDevice(RFDevice context)
    {
        DevicesViewModel.SetOperatingDevice(context);
    }
    private void AddDevice()
    {
        isAddingDevice = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var json = JsonData.Devices;

        var context = new DatabaseContext();
        DevicesViewModel = new DevicesViewModel(context);
        deviceData = JsonConvert.DeserializeObject<DeviceData>(json);
        await DevicesViewModel.LoadDevicesAsync();
        await base.OnInitializedAsync();
        isLoadingJSON = false;
        StateHasChanged();
    }
}
