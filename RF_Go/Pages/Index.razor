@page "/"
@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DevicesViewModel DevicesViewModel


<h1>Devices Selection</h1>

<MudButton Variant="Variant.Filled" Color="Color.Primary" class="btn btn-primary" @onclick="AddDevice">Add Devices</MudButton>
<div id="SelectDeviceMenu">
    @if (isAddingDevice)
    {
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudSelect T="string" HelperText="Choose device brand" Placeholder="Please Select" 
                    AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" 
                        @bind-Value="DevicesViewModel.OperatingDevice.Brand">
                    @foreach (var brand in deviceData.Brands.Keys)
                    {
                        <MudSelectItem T="string" value="@brand">@brand</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            @if (!string.IsNullOrEmpty(DevicesViewModel.OperatingDevice.Brand))
            {
                <MudItem>
                    <MudSelect T="string" HelperText="Choose device model" Placeholder="Please Select"
                               AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" 
                        @bind-Value="DevicesViewModel.OperatingDevice.Model">
                        <option value="" disabled selected hidden>Choose a model...</option>
                        @foreach (var model in deviceData.Brands[DevicesViewModel.OperatingDevice.Brand].Keys)
                        {
                            <MudSelectItem T="string" value="@model">@model</MudSelectItem>
                        }
                        }
                    </MudSelect>
                </MudItem>
            }

            @if (!string.IsNullOrEmpty(DevicesViewModel.OperatingDevice.Model) && deviceData.Brands.ContainsKey(DevicesViewModel.OperatingDevice.Brand) && deviceData.Brands[DevicesViewModel.OperatingDevice.Brand].ContainsKey(DevicesViewModel.OperatingDevice.Model))
            {
                <MudItem>
                    <MudSelect T="string" HelperText="Choose device model" Placeholder="Please Select"
                               AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" 
                        @bind-Value="DevicesViewModel.OperatingDevice.Frequency">            
                        <option value="" disabled selected hidden>Choose a range of frequency...</option>
                        @foreach (var frequency in deviceData.Brands[DevicesViewModel.OperatingDevice.Brand][DevicesViewModel.OperatingDevice.Model].Keys)
                        {
                            <MudSelectItem T="string" value="@frequency">@frequency</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            @if (!string.IsNullOrEmpty(DevicesViewModel.OperatingDevice.Frequency))
            {
                <MudItem>
                    <MudSelect HelperText="Choose device frequency" Placeholder="Please Select"
                               AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary"
                               @bind-Value="selectedQuantity">
                        @foreach (var option in frequencyOptions)
                        {
                            <MudSelectItem T="int" value="@option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <button class="btn btn-success" @onclick="SaveDeviceInDB">
            @((DevicesViewModel.OperatingDevice.ID == 0) ? "Create device" : "Update device")</button>
            }
        </MudGrid>
    }
</div>

<MudTable Hover="true" Dense="false" Bordered="false" Striped="true" @bind-Items="DevicesViewModel.Devices" @ref="mudTable"
          RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Cross</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>Frequency</MudTh>
        <MudTh>Frequency Range</MudTh>
        <MudTh>Edit</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>Cross</MudTd>
            <MudTd>@context.Brand</MudTd>
            <MudTd>@context.Model</MudTd>
            <MudTd>@context.Frequency</MudTd>
            <MudTd>@context.Range</MudTd>
            <MudTd>
                <MudButton class="edit-button" @onclick="() => DevicesViewModel.SetOperatingDevice(context)">Edit</MudButton>
                <MudButton class="delete-button" @onclick="() => DevicesViewModel.DeleteDeviceAsync(context.ID)">Del</MudButton>
            </MudTd>
    </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
<div>
    <h3>Device List</h3>

    <ul>
        @foreach (var device in DevicesViewModel.Devices)
        {
            <li>
                @device.Brand - @device.Model - @device.Frequency - @device.ID
            </li>
        }
    </ul>
</div>
<div> 
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Push to the frequency tab</MudButton>
</div>

<div class="container">

    <h3>devices</h3>

    <div class="device-list">
        @if (DevicesViewModel.Devices.Any())
        {
            <div class="device-grid">
                @foreach (var device in DevicesViewModel.Devices)
                {
                    <div class="device-item">
                        <div class="device-info">
                            <p class="device-name">@device.ChannelName</p>
                            <p class="device-frequency">Frequency: @device.Frequency</p>
                        </div>
                        <div class="device-buttons">
                            <MudButton class="edit-button" @onclick="() => DevicesViewModel.SetOperatingDevice(device)">Edit</MudButton>
                            <MudButton class="delete-button" @onclick="() => DevicesViewModel.DeleteDeviceAsync(device.ID)">Del</MudButton>

                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No Device!");
            <div class="empty-view">
                <p>No devices Found</p>
                <p>Try creating a device from the form below</p>
            </div>
        }
    </div>

    <div class="form">
        <hr />



    </div>
</div>



@code {
    private bool _selectOnRowClick = true;
    private bool isAddingDevice = false;
    private int selectedQuantity = 1;
    private DeviceData deviceData;
    private int id;
    private List<int> frequencyOptions = Enumerable.Range(1, 99).ToList();
    private MudTable<RFDevice> mudTable;
    private int selectedRowNumber = -1;
    private bool selectAll { get; set; }
    private List<string> clickedEvents = new();
    private List<RFDevice> selectedDevices = new List<RFDevice>();
    private string searchString1 = "";
    private RFDevice selectedItem1 = null;



    private void DeleteDevice(RFDevice context)
    {
        // Handle delete button click here
        DevicesViewModel.SetOperatingDevice(context);
    }
    private void AddDevice()
    {
        var json = File.ReadAllText("C:\\Users\\c_bou\\Desktop\\Dev\\RF_Go\\RF_Go\\Shared\\Devices.json");
        deviceData = JsonConvert.DeserializeObject<DeviceData>(json);
        isAddingDevice = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var context = new DatabaseContext();
        DevicesViewModel = new DevicesViewModel(context); 
        await DevicesViewModel.LoadDevicesAsync();
        await base.OnInitializedAsync();
    }

    private class DeviceData
    {
        public Dictionary<string, Dictionary<string, Dictionary<string, List<float>>>> Brands { get; set; }
    }
    private async Task SaveDeviceInDB()
    {
        for (int i = 0; i < selectedQuantity; i++)
        {
            DevicesViewModel.SaveDeviceAsync();
        }

        // Reload devices after saving
        await DevicesViewModel.LoadDevicesAsync();
    }

    private void LogSelectedDevices()
    {
    }

    private void DeleteSelected()
    {
        foreach (var device in selectedDevices)
        {
            ;
        }

        // Clear the selectedDevices collection
        selectedDevices.Clear();
        selectAll = false;
    }

    private string SelectedRowClassFunc(RFDevice device, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(device))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

}
