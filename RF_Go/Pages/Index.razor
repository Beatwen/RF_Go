@page "/"
@using MudBlazor
@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using System.Diagnostics

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DevicesViewModel DevicesViewModel

<h1>Devices Selection</h1>
<MudButton Variant="Variant.Filled" Color="Color.Primary" class="btn btn-primary" @onclick="AddDevice">Add Devices</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" class="btn btn-primary" @onclick="RFCalcul">Calculate</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" @onclick="() => DevicesViewModel.DeleteAllDeviceAsync()">Delete All Device</MudButton>
<div id="SelectDeviceMenu">

    @if (isAddingDevice)
    {
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudSelect T="string" HelperText="Choose device brand" Placeholder="Please Select" 
                    AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" 
                        @bind-Value="Device.Brand">
                    @foreach (var brand in deviceData.Brands.Keys)
                    {
                        <MudSelectItem T="string" value="@brand">@brand</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            @if (!string.IsNullOrEmpty(Device.Brand))
            {
                <MudItem>
                    <MudSelect T="string" HelperText="Choose device model" Placeholder="Please Select"
                               AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" 
                        @bind-Value="Device.Model">
                        <option value="" disabled selected hidden>Choose a model...</option>
                        @foreach (var model in deviceData.Brands[Device.Brand].Keys)
                        {
                            <MudSelectItem T="string" value="@model">@model</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }

            @if (!string.IsNullOrEmpty(Device.Model) && deviceData.Brands.ContainsKey(Device.Brand) && deviceData.Brands[Device.Brand].ContainsKey(Device.Model))
            {
                <MudItem>
                    <MudSelect T="string" HelperText="Choose device model" Placeholder="Please Select"
                               AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary" 
                        @bind-Value="Device.Frequency">            
                        <option value="" disabled selected hidden>Choose a range of frequency...</option>
                        @foreach (var frequency in deviceData.Brands[Device.Brand][Device.Model].Keys)
                        {
                            <MudSelectItem T="string" value="@frequency">@frequency</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                
            }
            @if (!string.IsNullOrEmpty(Device.Frequency))
            {
                <MudItem>
                    <MudSelect HelperText="Choose device frequency" Placeholder="Please Select"
                               AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary"
                               @bind-Value="selectedQuantity">
                        @foreach (var option in frequencyOptions)
                        {
                            <MudSelectItem T="int" value="@option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudButton @onclick="() => SaveDeviceInDB(Device)">Save device</MudButton>
            }
        </MudGrid>
    }
</div>

<MudTable Hover="true" Dense="false" Bordered="false" Striped="true" @bind-Items="DevicesViewModel.Devices" @ref="mudTable"
          RowClass="cursor-pointer"  RowClassFunc="@SelectedRowClassFunc">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>Frequency</MudTh>
        <MudTh>Frequency Range (MHz)</MudTh>
        <MudTh>Number Of Channels</MudTh>
        <MudTh>Set Frequencies</MudTh>
        <MudTh>Lock Frequency</MudTh>
        <MudTh>RFZone</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh>Inclusion Group</MudTh>
        <MudTh>IP Address</MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd>@context.ID</MudTd>
            <MudTd>@context.Brand</MudTd>
            <MudTd>@context.Model</MudTd>
            <MudTd>@context.Frequency</MudTd>
            <MudTd>@GetFrequencyDetails(context)</MudTd>
            <MudTd>@SetGetNumberOfChannels(context)</MudTd>
            <MudTd>
                <MudTable @bind-Items="@context.Channels" Hover="true">
                    <RowTemplate Context="chan">
                        <MudTd>@string.Format("{0:#,0}", chan.Frequency) <MudCheckBox @bind-Checked="@chan.IsLocked"></MudCheckBox></MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTd>
            <MudTd>@context.RFZone</MudTd>
            <MudTd>@context.Tags</MudTd>
            <MudTd>@context.InclusionGroup</MudTd>
            <MudTd>@context.IpAddress</MudTd>
            <MudTd>
                <MudButton Color=Color.Primary class="edit-button" >Edit</MudButton>
                <MudButton Color=Color.Secondary class ="delete-button" @onclick="() => DevicesViewModel.DeleteDeviceAsync(context.ID)">Del</MudButton>
            </MudTd>
    </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
<div> 
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Push to the frequency tab</MudButton>
</div>



    @code 
    {
    private RFDevice Device => DevicesViewModel.OperatingDevice;
    private bool _selectOnRowClick = true;
    private bool isAddingDevice = false;
    private int selectedQuantity = 1;
    private DeviceData deviceData;
    private int id;
    private List<int> frequencyOptions = Enumerable.Range(1, 99).ToList();
    private MudTable<RFDevice> mudTable;
    private int selectedRowNumber = -1;
    private bool selectAll { get; set; }
    private List<string> clickedEvents = new();
    private string searchString1 = "";
    private RFDevice selectedItem1 = null;
    public List<ChartSeries> Series { get; set; } = new();
    public string[] XAxisLabels => Enumerable.Range(100000, 1000000).Select(x => x.ToString()).ToArray();






    private void DeleteDevice(RFDevice context)
    {
        // Handle delete button click here
        DevicesViewModel.SetOperatingDevice(context);
    }
    private void AddDevice()
    {
        isAddingDevice = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var context = new DatabaseContext();
        DevicesViewModel = new DevicesViewModel(context); 
        var json = File.ReadAllText("C:\\Users\\c_bou\\Desktop\\Dev\\RF_Go\\RF_Go\\Shared\\Devices.json");
        deviceData = JsonConvert.DeserializeObject<DeviceData>(json);
        await DevicesViewModel.LoadDevicesAsync();
        await base.OnInitializedAsync();
    }

    private class DeviceData
    {
        public Dictionary<string, Dictionary<string, Dictionary<string, List<float>>>> Brands { get; set; }
    }

    private async Task SaveDeviceInDB(RFDevice device)
    {
        device.Range = deviceData.Brands[device.Brand][device.Model][device.Frequency];
        device.step = (int)deviceData.Brands[device.Brand][device.Model][device.Frequency][3];
        Debug.WriteLine((int)deviceData.Brands[device.Brand][device.Model][device.Frequency][3]);
        Debug.WriteLine("devicestep ="+ device.step);
        device.numberOfChannels = (int)deviceData.Brands[device.Brand][device.Model][device.Frequency][2];

        for (int i = 0; i < selectedQuantity; i++)
        {
            await DevicesViewModel.SaveDeviceAsync();
        }

        // Reload devices after saving
        await DevicesViewModel.LoadDevicesAsync();
    }

    private string GetFrequencyDetails(RFDevice context)
    {
        context.Range = deviceData.Brands[context.Brand][context.Model][context.Frequency];
        float startRange = deviceData.Brands[context.Brand][context.Model][context.Frequency][0];
        float endRange = deviceData.Brands[context.Brand][context.Model][context.Frequency][1];
        return $"{startRange:#,0} - {endRange:#,0}";
    }
    private int SetGetNumberOfChannels(RFDevice context)
    {
        context.numberOfChannels = (int)deviceData.Brands[context.Brand][context.Model][context.Frequency][2];
        context.step = (int)deviceData.Brands[context.Brand][context.Model][context.Frequency][3];
        return context.numberOfChannels;
    }
    private string SelectedRowClassFunc(RFDevice device, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(device))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    private void RFCalcul()
    {
        Debug.WriteLine("calcul called");
        HashSet<int> UsedFrequencies = [];
        HashSet<int> TwoTX3rdOrder = [];
        HashSet<int> TwoTX5rdOrder = [];
        HashSet<int> TwoTX7rdOrder = [];
        HashSet<int> TwoTX9rdOrder = [];
        HashSet<int> ThreeTX3rdOrder = [];
        foreach(RFDevice device in DevicesViewModel.Devices )
        {
            device.SetRandomFrequency(UsedFrequencies, TwoTX3rdOrder, TwoTX5rdOrder, TwoTX7rdOrder, TwoTX9rdOrder, ThreeTX3rdOrder);
        }
        var serie = new ChartSeries()
            {
                Name = "Your Frequencies",
                Data = Enumerable.Range(100000, 900000)
                .Select(index => UsedFrequencies.Contains(index) ? 100.0 : 0.0)
                .ToArray()
            };
        Series.Add(serie);
    }
    
}
