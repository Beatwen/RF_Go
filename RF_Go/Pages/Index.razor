@page "/index"
@inherits ComponentBase

@using Newtonsoft.Json
@using System.IO
@using System
@using System.Text
@using RF_Go.Components.Licensing
@using RF_Go.Data
@using RF_Go.Models
@using RF_Go.ViewModels
@using RF_Go.Components
@using System.Diagnostics
@using RF_Go.Services;
@using RF_Go.Services.NetworkProtocols
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DevicesViewModel DevicesViewModel
@inject GroupsViewModel GroupsViewModel
@inject ExclusionChannelViewModel ExclusionChannelViewModel
@inject DiscoveryService DiscoveryService
@inject FrequencyDataViewModel FrequencyDataViewModel


<MudContainer Style="max-height:60vh">

    @if (isLoadingJSON)
    {
        <MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column justify-center" style="height:100vh;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4" >Creating your account...</MudText>
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Striped="true" Size="Size.Medium" Class="w-50 my-7" />
        </MudContainer>
    }
    else
    {
        <MudTabs KeepPanelsAlive="true"
        Elevation="4"
        Centered="true"
        Rounded="false"
        MinimumTabWidth="20%"
        AlwaysShowScrollButtons="true">
            <MudTabPanel Text="Devices" ID='"devices_tab"' Class="">
                <MudGrid Spacing="1" Class="display-6">
                    <MudItem xs="12" md="10">
                        <MudPaper Class="mt-4">
                            <OfflineTab DeviceData="deviceData"
                            ExclusionChannelViewModel="ExclusionChannelViewModel"
                            DevicesViewModel="DevicesViewModel"
                            GroupsViewModel="GroupsViewModel"
                            FrequencyDataViewModel="FrequencyDataViewModel"/>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudPaper Class="mt-4">
                            <SlidersSpacers DeviceData="deviceData"
                            DevicesViewModel="DevicesViewModel"
                            GroupsViewModel="GroupsViewModel" />
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="TV Channels" ID='"exclusion_tab"'>
                <MudPaper Class="mt-4">
                    <TVChannelsFilter ExclusionChannelViewModel="ExclusionChannelViewModel" />
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Text="Groups" ID='"groups"'>
                <MudPaper Class="mt-4">
                    <RFGroupsLayout DeviceData="deviceData"
                    DevicesViewModel="DevicesViewModel"
                    GroupsViewModel="GroupsViewModel" />
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Icon="@Icons.Material.Filled.AccountCircle" ID='"account_tab"' DisableRipple="true">
                <MudText Typo="Typo.h6" Align="Align.Center">
                    <AccountInfo />
                </MudText>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>


@code
{

    private RFDevice Device => DevicesViewModel.OperatingDevice;
    private bool isLoadingJSON = true;
    private bool _selectOnRowClick = true;
    private DeviceData deviceData;
    private int id;
    private List<int> frequencyOptions = Enumerable.Range(1, 99).ToList();
    private MudTable<RFDevice> mudTable;
    private bool selectAll { get; set; }
    private List<string> clickedEvents = new();
    private RFDevice selectedItem1 = null;
    public List<ChartSeries> Series { get; set; } = new();
    public string[] XAxisLabels => Enumerable.Range(100000, 1000000).Select(x => x.ToString()).ToArray();

    private void RefreshComponents()
    {
        StateHasChanged();
    }
    private bool EnableSpacingInChannels(string brand, string model, string frequency, int spacing)
    {
        return true;
    }
    private int FindSpacingValue(string brand, string model, string frequency, int spacing)
    {
        return deviceData.Brands[brand][model][frequency][spacing];
    }


    private string CalculateStyle(RFChannel chan)
    {
        string color = chan.Checked ? "aliceblue" : "red";
        return "background-color:" + color;
    }
    private void DeleteDevice(RFDevice context)
    {
        DevicesViewModel.SetOperatingDevice(context);
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var json = DeviceDataJson.Devices;
        deviceData = JsonConvert.DeserializeObject<DeviceData>(json);
        await DevicesViewModel.LoadDevicesAsync();
        await FrequencyDataViewModel.LoadFrequencyDataAsync();

        DiscoveryService.StartDiscovery();
        isLoadingJSON = false;
        StateHasChanged();
    }
    public void Dispose()
    {
        DiscoveryService.StopDiscovery();
    }

}
