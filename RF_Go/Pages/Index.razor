@page "/"

@using Newtonsoft.Json
@using System.IO
@using System
@using RF_Go.Models
@using RF_Go.ViewModels
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DevicesViewModel DevicesViewModel


<h1>Devices Selection</h1>

<MudButton Variant="Variant.Filled" Color="Color.Primary" class="btn btn-primary" @onclick="AddDevice">Add Devices</MudButton>
dotnet tool update -g dotnet -ef
<div>
    @if (isAddingDevice)
    {
        <div>
            <select class="form-control" @bind="selectedBrand">
                <option value="" disabled selected hidden>Choose a brand...</option>
                @foreach (var brand in deviceData.Brands.Keys)
                {
                    <option value="@brand">@brand</option>
                }
            </select>

            @if (!string.IsNullOrEmpty(selectedBrand))
            {
                <select class="form-control" @bind="selectedModel">
                    <option value="" disabled selected hidden>Choose a model...</option>
                    @foreach (var model in deviceData.Brands[selectedBrand].Keys)
                    {
                        <option value="@model">@model</option>
                    }
                </select>
            }

            @if (!string.IsNullOrEmpty(selectedModel) && deviceData.Brands.ContainsKey(selectedBrand) && deviceData.Brands[selectedBrand].ContainsKey(selectedModel))
            {
                <select class="form-control" @bind="selectedFrequency">
                    <option value="" disabled selected hidden>Choose a range of frequency...</option>
                    @foreach (var frequency in deviceData.Brands[selectedBrand][selectedModel].Keys)
                    {
                        <option value="@frequency">@frequency</option>
                    }
                </select>
            }
            @if (!string.IsNullOrEmpty(selectedFrequency))
            {
                <select class="form-control" @bind="selectedQuantity">
                    @for (int i = 1; i <= 99; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>

                <button class="btn btn-success" @onclick="AddDeviceToList">Add To </button>
            }
        </div>
    }
</div>

<div>
    <h3>Device List</h3>
    <ul>
        @foreach (var device in DevicesViewModel.Devices)
        {
            <li>
                @device.Brand - @device.Model - @device.Frequency
            </li>
        }
    </ul>
</div>
<div>
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Push to the frequency tab</MudButton>
</div>

<div class="container">

    <h3>devices</h3>

    <div class="device-list">
        @if (DevicesViewModel.Devices.Any())
        {
            <div class="device-grid">
                @foreach (var device in DevicesViewModel.Devices)
                {
                    <div class="device-item">
                        <div class="device-info">
                            <p class="device-name">@device.Name</p>
                            <p class="device-frequency">Frequency: @device.Frequency</p>
                        </div>
                        <div class="device-buttons">
                            <button class="edit-button" @onclick="() => DevicesViewModel.SetOperatingDevice(device)">Edit</button>
                            <button class="delete-button" @onclick="() => DevicesViewModel.DeleteDeviceAsync(device.ID)">Del</button>

                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No Device!");
            <div class="empty-view">
                <p>No devices Found</p>
                <p>Try creating a device from the form below</p>
            </div>
        }
    </div>

    <div class="form">
        <hr />
        <h4>Name</h4>
        <input @bind="DevicesViewModel.OperatingDevice.Name" placeholder="Device name" />

        <h4>Price</h4>
        <input @bind="DevicesViewModel.OperatingDevice.Price" placeholder="Device price" type="number" />

        <button @onclick="DevicesViewModel.SaveDeviceAsync">
            @((DevicesViewModel.OperatingDevice.ID == 0) ? "Create device" : "Update device")
        </button>
    </div>
</div>

<style>
    .container {
        padding: 10px;
    }

    .loading {
        text-align: center;
        margin-bottom: 20px;
    }

    .device-list {
        margin-bottom: 20px;
    }

    .device-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
    }

    .device-item {
        border: 1px solid #ECECEC;
        padding: 5px;
        background-color: #ECECEC;
    }

    .device-info {
        font-weight: bold;
    }

    .device-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 5px;
    }

    .edit-button,
    .delete-button {
        padding: 0;
        height: 25px;
        font-size: 12px;
        border-radius: 2px;
        margin-right: 5px;
    }

    .empty-view {
        text-align: center;
        margin-top: 20px;
    }

    .form {
        padding: 20px;
        background-color: #CCBFFA;
        border-radius: 5px;
    }

    input {
        margin-bottom: 10px;
        width: 100%;
        padding: 5px;
        box-sizing: border-box;
    }

    button {
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
    }
</style>


@code {
    private bool isAddingDevice = false;
    private string selectedBrand = "";
    private string selectedModel = "";
    private string selectedFrequency = "";
    private int selectedQuantity = 1; // Default quantity to 1
    private DeviceData deviceData;
    private int id;

    public List<RFDevice> devices = new List<RFDevice>();

    private void AddDevice()
    {
        var json = File.ReadAllText("C:\\Users\\c_bou\\Desktop\\Dev\\RF_Go\\RF_Go\\Shared\\Devices.json");
        deviceData = JsonConvert.DeserializeObject<DeviceData>(json);
        isAddingDevice = true;
    }

    private void AddDeviceToList()
    {
        for (int i = 0; i < selectedQuantity; i++)
        {
            devices.Add(new RFDevice
                {
                    ID = id,
                    Brand = selectedBrand,
                    Model = selectedModel,
                    Frequency = selectedFrequency,
                    Range = deviceData.Brands[selectedBrand][selectedModel][selectedFrequency]
                });
            id++;
        }

        // Reset form
        selectedBrand = "";
        selectedModel = "";
        selectedFrequency = "";

        isAddingDevice = false;
    }

    private class DeviceData
    {
        public Dictionary<string, Dictionary<string, Dictionary<string, List<float>>>> Brands { get; set; }
    }
}
