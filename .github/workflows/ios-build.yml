name: iOS Build

on:
  push:
    tags:
      - 'ios-*'

jobs:
  build-ios:
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: List available Xcode versions
      run: |
        echo "=== AVAILABLE XCODE VERSIONS ==="
        ls -la /Applications/ | grep -i xcode
        echo "=== CURRENT XCODE VERSION ==="
        xcode-select -p
        xcodebuild -version
    
    - name: Select Xcode version
      run: |
        # Try different Xcode versions available on macos-14
        if [ -d "/Applications/Xcode_16.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
          echo "Selected Xcode 16.0"
        elif [ -d "/Applications/Xcode_15.4.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          echo "Selected Xcode 15.4 (fallback)"
        else
          echo "Using default Xcode"
        fi
        echo "=== FINAL XCODE VERSION ==="
        xcodebuild -version
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Install Apple Certificate
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
        p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

    - name: List Keychain Contents
      run: |
        security list-keychain
        security find-identity -v -p codesigning

    - name: Install Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/RF_Go_iOS.mobileprovision
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        echo "=== PROVISIONING PROFILE DETAILS ==="
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/RF_Go_iOS.mobileprovision | grep -A 5 -B 5 "application-identifier\|Name\|TeamIdentifier\|UUID"
        
        echo "=== AVAILABLE PROVISIONING PROFILES ==="
        find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec basename {} \;

    - name: Debug iOS Configuration
      run: |
        echo "=== CURRENT CONFIGURATION ==="
        echo "Target Framework: net8.0-ios"
        echo "Expected ApplicationId: com.christophebouserez.rfgo"
        echo "Expected CodesignProvision: RF Go iOS"
        echo "Expected TeamId: FT3A4TV42D"
        
        echo "=== CHECKING PROJECT FILE ==="
        grep -A 10 -B 5 "net8.0-ios" RF_Go/RF_Go.csproj || echo "iOS section not found"
        
        echo "=== AVAILABLE CERTIFICATES ==="
        security find-identity -v -p codesigning
        
        echo "=== KEYCHAIN LIST ==="
        security list-keychain

    - name: Install MAUI Workloads
      run: |
        dotnet workload install maui
        dotnet workload install ios
        dotnet workload restore
    
    - name: Extract Version
      id: get_version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "VERSION=$TAG" >> $GITHUB_OUTPUT
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Publish iOS
      run: |
        echo "=== PRE-BUILD VERIFICATION ==="
        echo "Checking if provisioning profile exists:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        echo "=== CLEANING BUILD CACHE ==="
        dotnet clean RF_Go/RF_Go.csproj -c Release -f net8.0-ios
        rm -rf RF_Go/obj RF_Go/bin
        
        echo "=== CHECKING APPLICATIONID PROPERTY ==="
        dotnet msbuild RF_Go/RF_Go.csproj -t:_GetApplicationId -p:TargetFramework=net8.0-ios -v:minimal || echo "Could not get ApplicationId"
        
        echo "=== FORCE DISPLAY APPLICATIONID ==="
        dotnet msbuild RF_Go/RF_Go.csproj -p:TargetFramework=net8.0-ios -t:_ShowApplicationId -v:minimal || echo "Custom target not found"
        
        echo "=== STARTING iOS BUILD ==="
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-ios -r ios-arm64 --self-contained -o ./publish/ios-arm64 -p:PublishReadyToRun=false -p:CodesignProvision="RF Go iOS" -p:CreatePackage=true -v detailed
        
        echo "=== POST-BUILD VERIFICATION ==="
        if [ -d "./publish/ios-arm64" ]; then
          echo "Build directory contents:"
          ls -la ./publish/ios-arm64/
          if [ "$(ls -A ./publish/ios-arm64)" ]; then
            tar -czf ./RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.tar.gz -C ./publish/ios-arm64 .
            echo "iOS build archived successfully"
          else
            echo "iOS build directory is empty"
          fi
        else
          echo "iOS build directory not found"
        fi

    - name: Upload iOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.tar.gz

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: RF_Go iOS Build ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: true
        files: RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.tar.gz
        body: |
          # iOS Build Test
          
          Ceci est un build de test pour iOS.
          
          ## Installation
          
          1. Téléchargez l'archive
          2. Extrayez le contenu
          3. Installez via TestFlight
          
          ## Notes
          
          - Build iOS uniquement
          - Version: ${{ steps.get_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 