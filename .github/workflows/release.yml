name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI Workloads
      run: |
        dotnet workload install maui
        dotnet workload install android
        dotnet workload restore
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build Windows only
      run: dotnet build --no-restore --configuration Release --framework net8.0-windows10.0.19041.0
    
    - name: Test Windows
      run: dotnet test --no-build --verbosity normal --configuration Release --framework net8.0-windows10.0.19041.0
      continue-on-error: true
    
    - name: Extract Version
      id: get_version
      shell: pwsh
      run: |
        $TAG = $env:GITHUB_REF.Replace('refs/tags/', '')
        echo "VERSION=$TAG" >> $env:GITHUB_OUTPUT
    
    - name: Install Inno Setup
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "innosetup.exe"
        Start-Process -FilePath "innosetup.exe" -ArgumentList "/VERYSILENT" -Wait
        
    - name: Publish Windows Portable and Full
      shell: pwsh
      run: |
        # Version portable (un seul fichier ex√©cutable)
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-windows10.0.19041.0 -r win-x64 --self-contained -o ./publish/win-x64-portable -p:PublishSingleFile=true -p:PublishReadyToRun=false -p:IncludeNativeLibrariesForSelfExtract=true
        
        if (Test-Path "./publish/win-x64-portable") {
          if ((Get-ChildItem -Path "./publish/win-x64-portable" | Measure-Object).Count -gt 0) {
            # Cr√©er un dossier propre pour la version portable
            New-Item -ItemType Directory -Path "./RF_Go-Portable" -Force | Out-Null
            Copy-Item "./publish/win-x64-portable/RF_Go.exe" -Destination "./RF_Go-Portable/"
            
            # Ajouter un README pour la version portable
            $readmeContent = @"
        # RF_Go - Version Portable
        
        ## Installation
        1. T√©l√©chargez le fichier RF_Go.exe
        2. Placez-le dans un dossier de votre choix
        3. Ex√©cutez directement RF_Go.exe
        
        ## Caract√©ristiques
        - Aucune installation requise
        - Fichier unique autonome
        - Compatible Windows 10/11 (x64)
        - D√©velopp√© dans le cadre d'un Travail de Fin d'√âtude
        
        ## Configuration syst√®me requise
        - Windows 10 version 1903 ou sup√©rieure
        - Architecture x64
        - 4 Go de RAM recommand√©s
        
        Version: ${{ steps.get_version.outputs.VERSION }}
        Date: $(Get-Date -Format 'yyyy-MM-dd')
        "@
            
            $readmeContent | Out-File -FilePath "./RF_Go-Portable/README.txt" -Encoding UTF8
            
            Compress-Archive -Path ./RF_Go-Portable/* -DestinationPath ./RF_Go-${{ steps.get_version.outputs.VERSION }}-portable-windows-x64.zip
            Write-Host "Version portable cr√©√©e avec succ√®s"
          }
        }
        
        # Version compl√®te pour l'installateur
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-windows10.0.19041.0 -r win-x64 --self-contained -o ./publish/win-x64 -p:PublishReadyToRun=false
        
    - name: Create Windows Installer with Inno Setup
      shell: pwsh
      run: |
        # Mettre √† jour le script Inno Setup avec la version
        $version = "${{ steps.get_version.outputs.VERSION }}".TrimStart('v')
        $innoScript = Get-Content "installer.iss" -Raw
        $innoScript = $innoScript -replace '#define MyAppVersion "1.0"', "#define MyAppVersion `"$version`""
        $innoScript | Out-File -FilePath "installer-versioned.iss" -Encoding UTF8
        
        # Compiler l'installateur
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "installer-versioned.iss"
        
        # Renommer le fichier de sortie
        if (Test-Path "installer/RF_Go-Setup.exe") {
          Move-Item "installer/RF_Go-Setup.exe" "./RF_Go-${{ steps.get_version.outputs.VERSION }}-setup-windows-x64.exe"
          Write-Host "Installateur Windows cr√©√© avec succ√®s"
        }
    
    - name: Create release notes
      run: |
        $content = "# RF_Go v${{ steps.get_version.outputs.VERSION }}`n`n"
        $content += "Date de sortie: $(Get-Date -Format 'yyyy-MM-dd')`n`n"
        $content += "## üì¶ Fichiers disponibles`n`n"
        $content += "### Windows`n"
        $content += "- **RF_Go-${{ steps.get_version.outputs.VERSION }}-setup-windows-x64.exe** : Installateur Windows complet`n"
        $content += "- **RF_Go-${{ steps.get_version.outputs.VERSION }}-portable-windows-x64.zip** : Version portable (un seul fichier)`n`n"
        $content += "## üöÄ Installation`n`n"
        $content += "### Windows - Installateur`n"
        $content += "1. T√©l√©chargez le fichier .exe`n"
        $content += "2. Ex√©cutez-le en tant qu'administrateur`n"
        $content += "3. Suivez les instructions d'installation`n`n"
        $content += "### Windows - Portable`n"
        $content += "1. T√©l√©chargez et d√©compressez le fichier .zip`n"
        $content += "2. Ex√©cutez RF_Go.exe directement`n`n"
        $content += "## ‚ö†Ô∏è Notes importantes`n"
        $content += "- Version d√©velopp√©e dans le cadre d'un Travail de Fin d'√âtude`n"
        $content += "- Compatible Windows 10/11 (x64)`n"
        $content += "- L'installateur Windows peut d√©clencher un avertissement de s√©curit√© (normal pour un logiciel non sign√©)`n`n"
        $content += "## üîß Configuration syst√®me requise`n"
        $content += "- **Windows**: 10/11, 4 Go RAM, .NET 8.0 (inclus)`n"
        Set-Content -Path "./release-notes.md" -Value $content
    
    - name: List and collect available files
      id: collect_files
      shell: pwsh
      run: |
        $files = @()
        Write-Host "Fichiers de release disponibles:"
        
        # Fichiers exe et zip
        $releaseFiles = Get-ChildItem -Path . -File | Where-Object { $_.Name -match "RF_Go-.*\.(exe|zip)$" }
        foreach ($file in $releaseFiles) {
          Write-Host "Trouv√©: $($file.Name)"
          $files += "./$($file.Name)"
        }
        
        if ($files.Count -eq 0) {
          Write-Host "ATTENTION: Aucun fichier de release trouv√©!"
        }
        
        $filesString = $files -join "`n"
        echo "FILES<<EOF" >> $env:GITHUB_OUTPUT
        echo "$filesString" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.collect_files.outputs.FILES }}
        name: RF_Go ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        body_path: ./release-notes.md
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 