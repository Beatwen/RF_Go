name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows-android:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI Workloads
      run: |
        dotnet workload install maui
        dotnet workload install android ios maccatalyst macos
        dotnet workload restore
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: Extract Version
      id: get_version
      shell: pwsh
      run: |
        $TAG = $env:GITHUB_REF.Replace('refs/tags/', '')
        echo "VERSION=$TAG" >> $env:GITHUB_OUTPUT
    
    - name: Publish Windows
      shell: pwsh
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-windows10.0.26100.0 -r win-x64 --self-contained -o ./publish/win-x64 -p:PublishReadyToRun=false -p:WindowsAppSDKSelfContained=true -p:WindowsPackageType=None
        
        if (Test-Path "./publish/win-x64") {
          if ((Get-ChildItem -Path "./publish/win-x64" | Measure-Object).Count -gt 0) {
            Write-Host "Windows build ready for installer creation"
          } else {
            Write-Host "Windows build directory is empty"
          }
        } else {
          Write-Host "Windows build directory not found"
        }
    
    - name: Prepare Inno Setup Script
      shell: pwsh
      run: |
        # Mettre à jour le script Inno Setup avec la version
        $version = "${{ steps.get_version.outputs.VERSION }}".TrimStart('v')
        $innoScript = Get-Content "installer.iss" -Raw
        $innoScript = $innoScript -replace '#define MyAppVersion "1.0"', "#define MyAppVersion `"$version`""
        $innoScript | Out-File -FilePath "installer-versioned.iss" -Encoding UTF8
    
    - name: Build Installer with Inno Setup
      uses: nadeemjazmawe/inno-setup-action-cli@v6.0.5
      with:
        filepath: installer-versioned.iss
    
    - name: Rename Installer
      shell: pwsh
      run: |
        # Renommer le fichier de sortie
        if (Test-Path "installer/RF_Go-Setup.exe") {
          Move-Item "installer/RF_Go-Setup.exe" "./RF_Go-${{ steps.get_version.outputs.VERSION }}-setup-windows-x64.exe"
          Write-Host "Installateur Windows créé avec succès"
        } else {
          Write-Host "Installer not found in installer directory"
          Get-ChildItem -Recurse -Filter "*.exe" | ForEach-Object { Write-Host "Found EXE: $($_.FullName)" }
        }
    
    - name: Publish Android
      shell: pwsh
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-android -r android-arm64 --self-contained -o ./publish/android -p:PublishReadyToRun=false -p:PublishTrimmed=true
        
        New-Item -ItemType Directory -Path "./android-output" -Force | Out-Null
        
        $apkFiles = Get-ChildItem -Path "./publish/android" -Filter "*.apk" -ErrorAction SilentlyContinue
        if ($apkFiles.Count -gt 0) {
          foreach ($file in $apkFiles) {
            Copy-Item $file.FullName -Destination "./android-output/" -ErrorAction SilentlyContinue
            # Copier aussi à la racine pour la release
            Copy-Item $file.FullName -Destination "./RF_Go-${{ steps.get_version.outputs.VERSION }}-android.apk" -ErrorAction SilentlyContinue
            Write-Host "Copied APK: $($file.Name)"
          }
          
          if ((Get-ChildItem -Path "./android-output" | Measure-Object).Count -gt 0) {
            Compress-Archive -Path ./android-output/* -DestinationPath ./RF_Go-${{ steps.get_version.outputs.VERSION }}-android.zip -ErrorAction SilentlyContinue
            Write-Host "Android build archived successfully"
          } else {
            Write-Host "Android output directory is empty"
          }
        } else {
          Write-Host "No APK files found"
        }
      continue-on-error: true

    - name: Upload Windows/Android Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-android-builds
        path: |
          RF_Go-${{ steps.get_version.outputs.VERSION }}-setup-windows-x64.exe
          RF_Go-${{ steps.get_version.outputs.VERSION }}-android.apk

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI Workloads
      run: |
        dotnet workload install maui
        dotnet workload install android ios maccatalyst macos
        dotnet workload restore
    
    - name: Extract Version
      id: get_version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "VERSION=$TAG" >> $GITHUB_OUTPUT
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Publish macOS
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-maccatalyst -r maccatalyst-x64 --self-contained -o ./publish/maccatalyst-x64 -p:PublishReadyToRun=false
        
        if [ -d "./publish/maccatalyst-x64" ]; then
          if [ "$(ls -A ./publish/maccatalyst-x64)" ]; then
            tar -czf ./RF_Go-${{ steps.get_version.outputs.VERSION }}-macos-x64.tar.gz -C ./publish/maccatalyst-x64 .
            echo "macOS build archived successfully"
          else
            echo "macOS build directory is empty"
          fi
        else
          echo "macOS build directory not found"
        fi
      continue-on-error: true
    
    - name: Publish iOS
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-ios -r ios-arm64 --self-contained -o ./publish/ios-arm64 -p:PublishReadyToRun=false
        
        if [ -d "./publish/ios-arm64" ]; then
          if [ "$(ls -A ./publish/ios-arm64)" ]; then
            tar -czf ./RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.tar.gz -C ./publish/ios-arm64 .
            echo "iOS build archived successfully"
          else
            echo "iOS build directory is empty"
          fi
        else
          echo "iOS build directory not found"
        fi
      continue-on-error: true

    - name: Upload macOS/iOS Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-ios-builds
        path: |
          RF_Go-${{ steps.get_version.outputs.VERSION }}-macos-x64.tar.gz
          RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.tar.gz

  create-release:
    needs: [build-windows-android, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Extract Version
      id: get_version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "VERSION=$TAG" >> $GITHUB_OUTPUT

    - name: Download Windows/Android Artifacts
      uses: actions/download-artifact@v3
      with:
        name: windows-android-builds
        path: ./

    - name: Download macOS/iOS Artifacts
      uses: actions/download-artifact@v3
      with:
        name: macos-ios-builds
        path: ./
      continue-on-error: true

    - name: Create release notes
      run: |
        cat > release-notes.md << EOF
        # RF_Go v${{ steps.get_version.outputs.VERSION }}

        Date de sortie: $(date +'%Y-%m-%d')

        ## Nouveautés
        - Version initiale de RF_Go
        - Fonctionnalité de gestion des scans
        - Capacités d'import/export

        ## Notes importantes
        - Cette version nécessite .NET 8.0 ou supérieur
        - Compatible avec Windows 10/11
        - Support Android (API 24+)
        - Support macOS (Mac Catalyst)

        ## Installation
        ### Windows
        - Téléchargez et exécutez \`RF_Go-${{ steps.get_version.outputs.VERSION }}-setup-windows-x64.exe\`

        ### Android
        - Téléchargez et installez \`RF_Go-${{ steps.get_version.outputs.VERSION }}-android.apk\`
        - Activez "Sources inconnues" dans les paramètres

        ### macOS
        - Téléchargez et extrayez \`RF_Go-${{ steps.get_version.outputs.VERSION }}-macos-x64.tar.gz\`
        EOF

    - name: List available files
      run: |
        echo "Available release files:"
        ls -la RF_Go-* || echo "No release files found"

    - name: Create GitHub Release with available files
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: RF_Go ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          RF_Go-${{ steps.get_version.outputs.VERSION }}-setup-windows-x64.exe
          RF_Go-${{ steps.get_version.outputs.VERSION }}-android.apk
          RF_Go-${{ steps.get_version.outputs.VERSION }}-macos-x64.tar.gz
          RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.tar.gz
        body_path: ./release-notes.md
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 