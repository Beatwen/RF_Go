name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI Workloads
      run: |
        dotnet workload install maui
        dotnet workload install android ios maccatalyst macos
        dotnet workload restore
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: Extract Version
      id: get_version
      shell: pwsh
      run: |
        $TAG = $env:GITHUB_REF.Replace('refs/tags/', '')
        echo "VERSION=$TAG" >> $env:GITHUB_OUTPUT
    
    - name: Publish Windows
      shell: pwsh
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-windows10.0.19041.0 -r win-x64 --self-contained -o ./publish/win-x64 -p:PublishReadyToRun=false
        
        if (Test-Path "./publish/win-x64") {
          if ((Get-ChildItem -Path "./publish/win-x64" | Measure-Object).Count -gt 0) {
            Compress-Archive -Path ./publish/win-x64/* -DestinationPath ./RF_Go-${{ steps.get_version.outputs.VERSION }}-windows-x64.zip -ErrorAction SilentlyContinue
            Write-Host "Windows build archived successfully"
          } else {
            Write-Host "Windows build directory is empty"
          }
        } else {
          Write-Host "Windows build directory not found"
        }
    
    - name: Publish Android
      shell: pwsh
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-android -r android-arm64 --self-contained -o ./publish/android -p:PublishReadyToRun=false
        
        New-Item -ItemType Directory -Path "./android-output" -Force | Out-Null
        
        $apkFiles = Get-ChildItem -Path "./publish/android" -Filter "*.apk" -ErrorAction SilentlyContinue
        if ($apkFiles.Count -gt 0) {
          foreach ($file in $apkFiles) {
            Copy-Item $file.FullName -Destination "./android-output/" -ErrorAction SilentlyContinue
            Write-Host "Copied APK: $($file.Name)"
          }
          
          if ((Get-ChildItem -Path "./android-output" | Measure-Object).Count -gt 0) {
            Compress-Archive -Path ./android-output/* -DestinationPath ./RF_Go-${{ steps.get_version.outputs.VERSION }}-android.zip -ErrorAction SilentlyContinue
            Write-Host "Android build archived successfully"
          } else {
            Write-Host "Android output directory is empty"
          }
        } else {
          Write-Host "No APK files found"
        }
      continue-on-error: true
    
    - name: Publish macOS
      shell: pwsh
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-maccatalyst -r maccatalyst-x64 --self-contained -o ./publish/maccatalyst-x64 -p:PublishReadyToRun=false
        
        if (Test-Path "./publish/maccatalyst-x64") {
          if ((Get-ChildItem -Path "./publish/maccatalyst-x64" | Measure-Object).Count -gt 0) {
            Compress-Archive -Path ./publish/maccatalyst-x64/* -DestinationPath ./RF_Go-${{ steps.get_version.outputs.VERSION }}-macos-x64.zip -ErrorAction SilentlyContinue
            Write-Host "macOS build archived successfully"
          } else {
            Write-Host "macOS build directory is empty"
          }
        } else {
          Write-Host "macOS build directory not found"
        }
      continue-on-error: true
    
    - name: Publish iOS
      shell: pwsh
      run: |
        dotnet publish RF_Go/RF_Go.csproj -c Release -f net8.0-ios -r ios-arm64 --self-contained -o ./publish/ios-arm64 -p:PublishReadyToRun=false
        
        if (Test-Path "./publish/ios-arm64") {
          if ((Get-ChildItem -Path "./publish/ios-arm64" | Measure-Object).Count -gt 0) {
            Compress-Archive -Path ./publish/ios-arm64/* -DestinationPath ./RF_Go-${{ steps.get_version.outputs.VERSION }}-ios-arm64.zip -ErrorAction SilentlyContinue
            Write-Host "iOS build archived successfully"
          } else {
            Write-Host "iOS build directory is empty"
          }
        } else {
          Write-Host "iOS build directory not found"
        }
      continue-on-error: true
    
    - name: Create release notes
      run: |
        $content = "# RF_Go v${{ steps.get_version.outputs.VERSION }}`n`n"
        $content += "Date de sortie: $(Get-Date -Format 'yyyy-MM-dd')`n`n"
        $content += "## Nouveautés`n"
        $content += "- Version initiale de RF_Go`n"
        $content += "- Fonctionnalité de gestion des scans`n"
        $content += "- Capacités d'import/export`n`n"
        $content += "## Notes importantes`n"
        $content += "- Cette version nécessite .NET 8.0 ou supérieur`n"
        $content += "- Compatible avec Windows 10/11`n"
        Set-Content -Path "./release-notes.md" -Value $content
    
    - name: List and collect available files
      id: collect_files
      shell: pwsh
      run: |
        $files = @()
        Write-Host "Available release files:"
        
        $zipFiles = Get-ChildItem -Path . -File -Filter "*.zip" -ErrorAction SilentlyContinue
        foreach ($file in $zipFiles) {
          Write-Host "Found: $($file.Name)"
          $files += "./$($file.Name)"
        }
        
        if ($files.Count -eq 0) {
          Write-Host "WARNING: No release files found!"
        }
        
        $filesString = $files -join "`n"
        echo "FILES<<EOF" >> $env:GITHUB_OUTPUT
        echo "$filesString" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT

    - name: Create GitHub Release with available files
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.collect_files.outputs.FILES }}
        name: RF_Go ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        body_path: ./release-notes.md
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 