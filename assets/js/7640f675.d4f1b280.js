"use strict";(self.webpackChunkrf_go_docs=self.webpackChunkrf_go_docs||[]).push([[6640],{7312:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"uml-analysis/sequence-diagrams","title":"Diagramme de s\xe9quence compl\xe9mentaires","description":"Les diagrammes de s\xe9quence pr\xe9sent\xe9s ici compl\xe8tent ceux des use-cases en se concentrant sur les interactions cross-fonctionnelles, les patterns d\'architecture syst\xe8me et les flux d\'int\xe9gration complexes qui transcendent les fonctionnalit\xe9s individuelles.","source":"@site/docs/uml-analysis/sequence-diagrams.md","sourceDirName":"uml-analysis","slug":"/uml-analysis/sequence-diagrams","permalink":"/RF_Go/uml-analysis/sequence-diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/Beatwen/RF_Go/tree/main/docs/uml-analysis/sequence-diagrams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"UC-010: Gestion des sessions RF","permalink":"/RF_Go/uml-analysis/use-cases/uc-010"},"next":{"title":"Diagramme d\'activit\xe9 compl\xe9mentaires","permalink":"/RF_Go/uml-analysis/activity-diagrams"}}');var i=n(4848),s=n(8453);const a={},o="Diagramme de s\xe9quence compl\xe9mentaires",c={},l=[{value:"1. Architecture cross-fonctionnelle : flux de bout en bout",id:"1-architecture-cross-fonctionnelle--flux-de-bout-en-bout",level:2},{value:"Orchestration compl\xe8te : de la d\xe9couverte \xe0 la production",id:"orchestration-compl\xe8te--de-la-d\xe9couverte-\xe0-la-production",level:3},{value:"2. Patterns d&#39;architecture : injection de d\xe9pendances &amp; services",id:"2-patterns-darchitecture--injection-de-d\xe9pendances--services",level:2},{value:"Orchestration des services via dependency injection",id:"orchestration-des-services-via-dependency-injection",level:3},{value:"3. Patterns de communication : multi-protocole &amp; recovery",id:"3-patterns-de-communication--multi-protocole--recovery",level:2},{value:"Orchestration network avec fallback strategy",id:"orchestration-network-avec-fallback-strategy",level:3},{value:"4. Data flow architecture : MVVM + repository + cache",id:"4-data-flow-architecture--mvvm--repository--cache",level:2},{value:"Pattern d&#39;architecture des donn\xe9es",id:"pattern-darchitecture-des-donn\xe9es",level:3},{value:"5. M\xe9triques &amp; performance : monitoring des interactions",id:"5-m\xe9triques--performance--monitoring-des-interactions",level:2},{value:"Dashboard des performances syst\xe8me",id:"dashboard-des-performances-syst\xe8me",level:3},{value:"Optimization patterns appliqu\xe9s",id:"optimization-patterns-appliqu\xe9s",level:3},{value:"6. Architecture de resilience : fault tolerance",id:"6-architecture-de-resilience--fault-tolerance",level:2},{value:"Patterns de r\xe9silience cross-fonctionnels",id:"patterns-de-r\xe9silience-cross-fonctionnels",level:3}];function d(e){const r={blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"diagramme-de-s\xe9quence-compl\xe9mentaires",children:"Diagramme de s\xe9quence compl\xe9mentaires"})}),"\n",(0,i.jsxs)(r.p,{children:["Les diagrammes de s\xe9quence pr\xe9sent\xe9s ici compl\xe8tent ceux des use-cases en se concentrant sur les ",(0,i.jsx)(r.strong,{children:"interactions cross-fonctionnelles"}),", les ",(0,i.jsx)(r.strong,{children:"patterns d'architecture syst\xe8me"})," et les ",(0,i.jsx)(r.strong,{children:"flux d'int\xe9gration complexes"})," qui transcendent les fonctionnalit\xe9s individuelles."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Note"})," : Les diagrammes de s\xe9quence sp\xe9cifiques \xe0 chaque fonctionnalit\xe9 sont d\xe9taill\xe9s dans leurs use-cases respectifs (UC-001 \xe0 UC-010). Cette section se concentre sur les interactions syst\xe8me de haut niveau."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"1-architecture-cross-fonctionnelle--flux-de-bout-en-bout",children:"1. Architecture cross-fonctionnelle : flux de bout en bout"}),"\n",(0,i.jsx)(r.h3,{id:"orchestration-compl\xe8te--de-la-d\xe9couverte-\xe0-la-production",children:"Orchestration compl\xe8te : de la d\xe9couverte \xe0 la production"}),"\n",(0,i.jsx)(r.mermaid,{value:"sequenceDiagram\r\n    participant IS as Ing\xe9nieur Son\r\n    participant APP as Application\r\n    participant DS as DiscoveryService\r\n    participant FCS as FrequencyCalculationService\r\n    participant DMS as DeviceMappingService\r\n    participant AUTH as AuthService\r\n    participant DB as DatabaseContext\r\n    participant NET as NetworkLayer\r\n\r\n    Note over IS,NET: \ud83d\udd04 Session Compl\xe8te RF.Go\r\n    \r\n    rect rgb(255, 248, 220)\r\n        Note over IS,NET: Phase 1: Initialisation Syst\xe8me\r\n        IS->>APP: Lance RF.Go\r\n        APP->>AUTH: ValidateSession()\r\n        AUTH->>AUTH: CheckTokens() + ValidateLicense()\r\n        AUTH--\x3e>APP: Session valid\xe9e\r\n        APP->>DS: StartDiscovery() [Auto]\r\n        APP->>DB: LoadUserData()\r\n        APP--\x3e>IS: Interface pr\xeate\r\n    end\r\n    \r\n    rect rgb(240, 255, 240)\r\n        Note over IS,NET: Phase 2: Workflow D\xe9couverte \u2192 Import \u2192 Calcul\r\n        IS->>APP: D\xe9clenche workflow complet\r\n        \r\n        par D\xe9couverte Continue\r\n            DS->>NET: Multi-protocole discovery\r\n            NET--\x3e>DS: Appareils physiques\r\n            DS--\x3e>APP: DevicesDiscovered [continu]\r\n        and Import S\xe9lectif\r\n            IS->>APP: Import appareils (UC-003)\r\n            APP->>DB: SaveImportedDevices()\r\n        and Configuration RF\r\n            IS->>APP: Configure groupes (UC-005)\r\n            APP->>DB: SaveGroups()\r\n        end\r\n        \r\n        IS->>APP: D\xe9clenche calcul global\r\n        APP->>FCS: CalculateFrequenciesAsync() [UC-002]\r\n        FCS->>FCS: Orchestration calcul multi-groupe\r\n        FCS--\x3e>APP: Plan RF optimis\xe9\r\n        APP->>DB: SaveCalculationResults()\r\n    end\r\n    \r\n    rect rgb(255, 240, 240)\r\n        Note over IS,NET: Phase 3: Synchronisation Production\r\n        IS->>APP: Magic Sync All Devices\r\n        APP->>DMS: SyncAllToDevices() [UC-004]\r\n        \r\n        par Sync Parall\xe8le Marques\r\n            DMS->>NET: Sync Sennheiser devices\r\n            DMS->>NET: Sync Shure devices  \r\n            DMS->>NET: Sync Generic devices\r\n        end\r\n        \r\n        NET--\x3e>DMS: R\xe9sultats sync\r\n        DMS->>DB: UpdateDeviceStates()\r\n        DMS--\x3e>APP: Sync Report\r\n        APP--\x3e>IS: Production ready!\r\n    end\r\n    \r\n    rect rgb(240, 240, 255)\r\n        Note over IS,NET: Phase 4: Monitoring Op\xe9rationnel\r\n        loop Session de travail\r\n            APP->>DS: CheckDeviceStatus() [continu]\r\n            APP->>DMS: VerifySync() [p\xe9riodique]\r\n            alt Changements d\xe9tect\xe9s\r\n                APP--\x3e>IS: Notifications alertes\r\n                IS->>APP: Actions correctives\r\n            end\r\n        end\r\n    end"}),"\n",(0,i.jsx)(r.h2,{id:"2-patterns-darchitecture--injection-de-d\xe9pendances--services",children:"2. Patterns d'architecture : injection de d\xe9pendances & services"}),"\n",(0,i.jsx)(r.h3,{id:"orchestration-des-services-via-dependency-injection",children:"Orchestration des services via dependency injection"}),"\n",(0,i.jsx)(r.mermaid,{value:"sequenceDiagram\r\n    participant MP as MauiProgram\r\n    participant DI as ServiceContainer\r\n    participant VM as ViewModels\r\n    participant SRV as Services\r\n    participant HAND as Handlers\r\n    participant COMM as Communication\r\n\r\n    Note over MP,COMM: \ud83c\udfd7\ufe0f Architecture Pattern Implementation\r\n    \r\n    rect rgb(248, 248, 255)\r\n        Note over MP,COMM: Bootstrap & Service Registration\r\n        MP->>DI: ConfigureServices()\r\n        \r\n        MP->>DI: RegisterViewModels()\r\n        Note right of DI: DevicesViewModel<br/>GroupsViewModel<br/>FrequencyDataViewModel\r\n        \r\n        MP->>DI: RegisterServices()\r\n        Note right of DI: FrequencyCalculationService<br/>DiscoveryService<br/>DeviceMappingService\r\n        \r\n        MP->>DI: RegisterHandlers()\r\n        Note right of DI: SennheiserDeviceHandler<br/>SennheiserG4DeviceHandler<br/>ShureDeviceHandler\r\n        \r\n        MP->>DI: RegisterCommunication()\r\n        Note right of DI: UDPCommunicationService<br/>TCPCommunicationService<br/>DatabaseContext\r\n    end\r\n    \r\n    rect rgb(240, 255, 240)\r\n        Note over MP,COMM: Runtime Dependency Resolution\r\n        \r\n        VM->>DI: Request FrequencyCalculationService\r\n        DI->>SRV: Create with dependencies\r\n        Note right of SRV: Inject:<br/>- DevicesViewModel<br/>- GroupsViewModel<br/>- ExclusionChannelViewModel\r\n        \r\n        SRV->>DI: Request DiscoveryService  \r\n        DI->>SRV: Create with handlers\r\n        Note right of SRV: Inject:<br/>- IDeviceHandler[]<br/>- DevicesViewModel<br/>- MulticastService\r\n        \r\n        SRV->>DI: Request DeviceHandlers\r\n        DI->>HAND: Create with communication\r\n        Note right of HAND: Inject:<br/>- UDPCommunicationService<br/>- CommandSets<br/>- DeviceData\r\n        \r\n        HAND->>DI: Request Communication Services\r\n        DI->>COMM: Provide instances\r\n        Note right of COMM: Singleton pattern<br/>for network services\r\n    end\r\n    \r\n    rect rgb(255, 248, 240)\r\n        Note over MP,COMM: Cross-Cutting Concerns\r\n        \r\n        Note over DI: Observer Pattern\r\n        VM->>VM: PropertyChanged events\r\n        VM->>SRV: DevicesChanged events\r\n        SRV->>HAND: DeviceDiscovered events\r\n        \r\n        Note over DI: Strategy Pattern\r\n        SRV->>HAND: GetHandler(deviceType)\r\n        HAND->>COMM: SelectProtocol(brand)\r\n        \r\n        Note over DI: Repository Pattern\r\n        SRV->>COMM: DatabaseContext.GetAllAsync<T>()\r\n        COMM--\x3e>SRV: Uniform data access\r\n    end"}),"\n",(0,i.jsx)(r.h2,{id:"3-patterns-de-communication--multi-protocole--recovery",children:"3. Patterns de communication : multi-protocole & recovery"}),"\n",(0,i.jsx)(r.h3,{id:"orchestration-network-avec-fallback-strategy",children:"Orchestration network avec fallback strategy"}),"\n",(0,i.jsx)(r.mermaid,{value:'sequenceDiagram\r\n    participant DS as DiscoveryService\r\n    participant NS as NetworkStrategy\r\n    participant MP as MultiProtocolManager\r\n    participant SH as SennheiserHandler\r\n    participant SG as SennheiserG4Handler  \r\n    participant SHU as ShureHandler\r\n    participant NET as NetworkLayer\r\n    participant ER as ErrorRecovery\r\n\r\n    Note over DS,ER: \ud83c\udf10 Network Communication Patterns\r\n    \r\n    rect rgb(255, 253, 240)\r\n        Note over DS,ER: Multi-Protocol Discovery Pattern\r\n        DS->>MP: InitializeProtocols()\r\n        \r\n        par Protocol Initialization\r\n            MP->>SH: Initialize(mDNS, Port 45)\r\n            MP->>SG: Initialize(UDP Proprietary, Port 53212)\r\n            MP->>SHU: Initialize(SLP, Port 8427)\r\n        end\r\n        \r\n        MP--\x3e>DS: Protocols Ready\r\n    end\r\n    \r\n    rect rgb(240, 255, 248)\r\n        Note over DS,ER: Concurrent Discovery with Timeouts\r\n        DS->>NS: StartConcurrentDiscovery()\r\n        \r\n        par Sennheiser Standard\r\n            NS->>SH: TriggerDiscovery(timeout: 3s)\r\n            SH->>NET: mDNS Query "_ssc._udp.local"\r\n            NET--\x3e>SH: mDNS Responses\r\n            SH->>SH: ParseResponses()\r\n            SH--\x3e>NS: StandardDevices[]\r\n        and Sennheiser G4\r\n            NS->>SG: TriggerG4Discovery(timeout: 10s)\r\n            SG->>NET: UDP to 224.0.0.251:8133\r\n            NET--\x3e>SG: G4 Responses\r\n            SG->>SG: ParseG4Responses()\r\n            SG--\x3e>NS: G4Devices[]\r\n        and Shure SLP\r\n            NS->>SHU: TriggerSLPDiscovery(timeout: 10s)\r\n            SHU->>NET: Multicast to 239.255.254.253:8427\r\n            NET--\x3e>SHU: SLP Responses\r\n            SHU->>SHU: ParseSLPResponses()\r\n            SHU--\x3e>NS: ShureDevices[]\r\n        end\r\n        \r\n        NS->>NS: AggregateResults() + Deduplicate()\r\n        NS--\x3e>DS: ConsolidatedDeviceList\r\n    end\r\n    \r\n    rect rgb(255, 240, 240)\r\n        Note over DS,ER: Error Recovery & Circuit Breaker Pattern\r\n        \r\n        alt Network Timeout\r\n            NET--\x3e>SH: Timeout Exception\r\n            SH->>ER: NetworkTimeout(protocol: mDNS)\r\n            ER->>ER: IncrementFailureCount()\r\n            \r\n            alt Failure Threshold Reached\r\n                ER->>NS: CircuitBreaker.Open(mDNS)\r\n                NS->>NS: DisableProtocol(mDNS)\r\n                NS--\x3e>DS: ProtocolDisabled: mDNS\r\n            else Retry Available\r\n                ER->>NS: ScheduleRetry(mDNS, delay: 5s)\r\n                NS--\x3e>DS: RetryScheduled\r\n            end\r\n            \r\n        else Connection Refused\r\n            NET--\x3e>SG: ConnectionRefused\r\n            SG->>ER: ConnectionError(device: ip_address)\r\n            ER->>ER: MarkDeviceOffline(device)\r\n            ER--\x3e>DS: DeviceUnavailable\r\n            \r\n        else Parse Error\r\n            SHU->>ER: ParseError(response: malformed)\r\n            ER->>ER: LogParseError()\r\n            ER->>SHU: SkipResponse()\r\n            SHU--\x3e>NS: ContinueProcessing\r\n        end\r\n    end\r\n    \r\n    rect rgb(248, 248, 255)\r\n        Note over DS,ER: Health Monitoring & Auto-Recovery\r\n        \r\n        loop Continuous Monitoring\r\n            ER->>NS: CheckProtocolHealth()\r\n            NS->>NET: PingTestEndpoints()\r\n            \r\n            alt Protocol Recovered\r\n                NET--\x3e>NS: Success Response\r\n                NS->>ER: ProtocolHealthy(protocol)\r\n                ER->>ER: ResetFailureCount()\r\n                ER->>NS: CircuitBreaker.Close(protocol)\r\n                NS--\x3e>DS: ProtocolRestored\r\n            else Still Failing\r\n                NET--\x3e>NS: Still Failing\r\n                ER->>ER: ExtendRetryDelay()\r\n            end\r\n        end\r\n    end'}),"\n",(0,i.jsx)(r.h2,{id:"4-data-flow-architecture--mvvm--repository--cache",children:"4. Data flow architecture : MVVM + repository + cache"}),"\n",(0,i.jsx)(r.h3,{id:"pattern-darchitecture-des-donn\xe9es",children:"Pattern d'architecture des donn\xe9es"}),"\n",(0,i.jsx)(r.mermaid,{value:'sequenceDiagram\r\n    participant V as View (UI)\r\n    participant VM as ViewModel\r\n    participant SRV as Service Layer\r\n    participant REPO as Repository\r\n    participant CACHE as CacheManager\r\n    participant DB as SQLite Database\r\n    participant MEM as MemoryCache\r\n\r\n    Note over V,MEM: \ud83d\udcca Data Architecture Patterns\r\n    \r\n    rect rgb(240, 248, 255)\r\n        Note over V,MEM: MVVM Data Binding Pattern\r\n        V->>VM: PropertyChanged subscription\r\n        VM->>VM: ObservableCollection<RFDevice>\r\n        \r\n        Note over VM: Two-way data binding<br/>Command pattern<br/>INotifyPropertyChanged\r\n        \r\n        V->>VM: UserAction(command)\r\n        VM->>SRV: BusinessLogic.Execute()\r\n    end\r\n    \r\n    rect rgb(248, 255, 240)\r\n        Note over V,MEM: Repository Pattern with Caching\r\n        SRV->>CACHE: CheckCache(key: "devices")\r\n        \r\n        alt Cache Hit\r\n            CACHE--\x3e>SRV: CachedDevices[]\r\n            SRV--\x3e>VM: DevicesData\r\n        else Cache Miss\r\n            CACHE->>REPO: GetAllAsync<RFDevice>()\r\n            REPO->>DB: SELECT * FROM RFDevice\r\n            DB--\x3e>REPO: RawDeviceData\r\n            REPO->>REPO: MapToRFDevice()\r\n            REPO--\x3e>CACHE: RFDevice[]\r\n            CACHE->>MEM: Store(key, data, ttl: 5min)\r\n            CACHE--\x3e>SRV: FreshDevices[]\r\n        end\r\n    end\r\n    \r\n    rect rgb(255, 248, 240)\r\n        Note over V,MEM: Change Tracking & Persistence\r\n        VM->>SRV: ModifyDevice(device)\r\n        SRV->>CACHE: InvalidateCache("devices")\r\n        SRV->>REPO: UpdateItemAsync<RFDevice>(device)\r\n        \r\n        par Database Update\r\n            REPO->>DB: UPDATE RFDevice SET...\r\n            DB--\x3e>REPO: RowsAffected: 1\r\n            REPO--\x3e>SRV: UpdateSuccess\r\n        and Cache Refresh\r\n            CACHE->>MEM: Remove("devices")\r\n            CACHE->>REPO: PreloadCache()\r\n            REPO--\x3e>CACHE: RefreshedData\r\n        end\r\n        \r\n        SRV->>VM: DevicesChanged event\r\n        VM->>VM: OnPropertyChanged("Devices")\r\n        VM--\x3e>V: UI automatically updates\r\n    end\r\n    \r\n    rect rgb(248, 248, 255)\r\n        Note over V,MEM: Transaction & Consistency Patterns\r\n        \r\n        Note over SRV: Unit of Work Pattern\r\n        SRV->>REPO: BeginTransaction()\r\n        \r\n        loop Batch Operations\r\n            SRV->>REPO: AddItem<RFDevice>(device)\r\n            SRV->>REPO: UpdateItem<RFGroup>(group)\r\n            SRV->>REPO: DeleteItem<RFChannel>(channel)\r\n        end\r\n        \r\n        alt All Operations Success\r\n            SRV->>REPO: CommitTransaction()\r\n            REPO->>DB: COMMIT\r\n            CACHE->>CACHE: InvalidateAll()\r\n            VM--\x3e>V: Success notification\r\n        else Any Operation Fails\r\n            SRV->>REPO: RollbackTransaction()\r\n            REPO->>DB: ROLLBACK\r\n            VM--\x3e>V: Error message + retry option\r\n        end\r\n    end'}),"\n",(0,i.jsx)(r.h2,{id:"5-m\xe9triques--performance--monitoring-des-interactions",children:"5. M\xe9triques & performance : monitoring des interactions"}),"\n",(0,i.jsx)(r.h3,{id:"dashboard-des-performances-syst\xe8me",children:"Dashboard des performances syst\xe8me"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Pattern d'Interaction"}),(0,i.jsx)(r.th,{children:"Complexit\xe9"}),(0,i.jsx)(r.th,{children:"Performance Moyenne"}),(0,i.jsx)(r.th,{children:"SLA Cible"}),(0,i.jsx)(r.th,{children:"Points Critiques"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Cross-UC Discovery\u2192Calc\u2192Sync"})}),(0,i.jsx)(r.td,{children:"Tr\xe8s Haute"}),(0,i.jsx)(r.td,{children:"45-120s"}),(0,i.jsx)(r.td,{children:"180s"}),(0,i.jsx)(r.td,{children:"Network latency, Algo optimization"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"DI Container Resolution"})}),(0,i.jsx)(r.td,{children:"Moyenne"}),(0,i.jsx)(r.td,{children:"50-200ms"}),(0,i.jsx)(r.td,{children:"500ms"}),(0,i.jsx)(r.td,{children:"Service graph complexity"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Multi-Protocol Network"})}),(0,i.jsx)(r.td,{children:"Haute"}),(0,i.jsx)(r.td,{children:"10-30s"}),(0,i.jsx)(r.td,{children:"60s"}),(0,i.jsx)(r.td,{children:"Timeout management, Circuit breakers"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"MVVM Data Binding"})}),(0,i.jsx)(r.td,{children:"Faible"}),(0,i.jsx)(r.td,{children:"10-50ms"}),(0,i.jsx)(r.td,{children:"100ms"}),(0,i.jsx)(r.td,{children:"Collection size, PropertyChanged frequency"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Repository + Cache"})}),(0,i.jsx)(r.td,{children:"Moyenne"}),(0,i.jsx)(r.td,{children:"5-20ms"}),(0,i.jsx)(r.td,{children:"50ms"}),(0,i.jsx)(r.td,{children:"Cache hit ratio, SQLite performance"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"optimization-patterns-appliqu\xe9s",children:"Optimization patterns appliqu\xe9s"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Async/Await Pattern"})," : Toutes les op\xe9rations I/O sont asynchrones"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Observer Pattern"})," : \xc9vite les polling inutiles"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Circuit Breaker"})," : Prevent cascade failures"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Cache-Aside"})," : R\xe9duction des acc\xe8s base"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Command Pattern"})," : Undo/Redo et transactionnalit\xe9"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Strategy Pattern"})," : Handlers interchangeables par marque"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"6-architecture-de-resilience--fault-tolerance",children:"6. Architecture de resilience : fault tolerance"}),"\n",(0,i.jsx)(r.h3,{id:"patterns-de-r\xe9silience-cross-fonctionnels",children:"Patterns de r\xe9silience cross-fonctionnels"}),"\n",(0,i.jsx)(r.mermaid,{value:"sequenceDiagram\r\n    participant APP as Application\r\n    participant RM as ResilienceManager\r\n    participant CB as CircuitBreaker\r\n    participant RT as RetryManager\r\n    participant FB as FallbackService\r\n    participant LOG as LoggingService\r\n\r\n    Note over APP,LOG: \ud83d\udee1\ufe0f Resilience Architecture Patterns\r\n    \r\n    rect rgb(255, 248, 248)\r\n        Note over APP,LOG: Circuit Breaker Pattern\r\n        APP->>RM: ExecuteWithResilience(operation)\r\n        RM->>CB: CheckCircuitState()\r\n        \r\n        alt Circuit Closed (Healthy)\r\n            CB--\x3e>RM: Allow execution\r\n            RM->>APP: Execute(operation)\r\n            \r\n            alt Operation Success\r\n                APP--\x3e>RM: Success result\r\n                RM->>CB: RecordSuccess()\r\n            else Operation Fails\r\n                APP--\x3e>RM: Exception\r\n                RM->>CB: RecordFailure()\r\n                CB->>CB: IncrementFailureCount()\r\n                \r\n                alt Threshold Reached\r\n                    CB->>CB: OpenCircuit(timeout: 30s)\r\n                    CB--\x3e>RM: Circuit OPEN\r\n                end\r\n            end\r\n            \r\n        else Circuit Open (Failing)\r\n            CB--\x3e>RM: Reject execution\r\n            RM->>FB: ExecuteFallback(operation)\r\n            FB--\x3e>RM: Fallback result\r\n            \r\n        else Circuit Half-Open (Testing)\r\n            CB--\x3e>RM: Allow single test\r\n            RM->>APP: Execute(test_operation)\r\n            \r\n            alt Test Success\r\n                CB->>CB: CloseCircuit()\r\n            else Test Fails\r\n                CB->>CB: ReOpenCircuit()\r\n            end\r\n        end\r\n    end\r\n    \r\n    rect rgb(248, 255, 248)\r\n        Note over APP,LOG: Retry Pattern with Exponential Backoff\r\n        RM->>RT: ConfigureRetry(maxAttempts: 3, backoff: exponential)\r\n        \r\n        RM->>APP: AttemptOperation() [Attempt 1]\r\n        \r\n        alt Success on First Try\r\n            APP--\x3e>RM: Success\r\n            RM--\x3e>LOG: Operation Completed\r\n        else Transient Failure\r\n            APP--\x3e>RM: TransientException\r\n            RM->>RT: CalculateDelay(attempt: 1)\r\n            RT--\x3e>RM: Delay: 1 second\r\n            RM->>RM: Wait(1s)\r\n            \r\n            RM->>APP: AttemptOperation() [Attempt 2]\r\n            \r\n            alt Success on Second Try\r\n                APP--\x3e>RM: Success\r\n                RM--\x3e>LOG: Operation Completed After Retry\r\n            else Still Failing\r\n                APP--\x3e>RM: TransientException\r\n                RM->>RT: CalculateDelay(attempt: 2)\r\n                RT--\x3e>RM: Delay: 2 seconds\r\n                RM->>RM: Wait(2s)\r\n                \r\n                RM->>APP: AttemptOperation() [Attempt 3]\r\n                \r\n                alt Success on Third Try\r\n                    APP--\x3e>RM: Success\r\n                    RM--\x3e>LOG: Operation Completed After Multiple Retries\r\n                else Max Retries Reached\r\n                    APP--\x3e>RM: Still Failing\r\n                    RM->>LOG: Operation Failed After Max Retries\r\n                    RM->>FB: ExecuteFallback()\r\n                end\r\n            end\r\n        else Permanent Failure\r\n            APP--\x3e>RM: PermanentException\r\n            RM->>LOG: Permanent Failure - No Retry\r\n            RM->>FB: ExecuteFallback()\r\n        end\r\n    end\r\n    \r\n    rect rgb(248, 248, 255)\r\n        Note over APP,LOG: Bulkhead Pattern (Isolation)\r\n        \r\n        Note over RM: Resource Isolation\r\n        par Discovery Thread Pool\r\n            RM->>APP: DiscoveryOperations (Pool: 2 threads)\r\n        and Calculation Thread Pool  \r\n            RM->>APP: CalculationOperations (Pool: 1 thread)\r\n        and Sync Thread Pool\r\n            RM->>APP: SyncOperations (Pool: 3 threads)\r\n        end\r\n        \r\n        Note over RM: Prevents resource starvation<br/>Isolates failure domains\r\n    end\r\n    \r\n    rect rgb(255, 255, 240)\r\n        Note over APP,LOG: Comprehensive Monitoring\r\n        RM->>LOG: LogResilienceMetrics()\r\n        \r\n        Note right of LOG: Metrics collected:<br/>- Circuit breaker states<br/>- Retry attempts<br/>- Fallback usage<br/>- Thread pool utilization<br/>- Error rates by operation\r\n        \r\n        LOG->>LOG: AggregateMetrics()\r\n        LOG->>LOG: TriggerAlertsIfNeeded()\r\n    end"}),"\n",(0,i.jsx)(r.p,{children:"Cette architecture cross-fonctionnelle d\xe9montre comment RF.Go utilise des patterns architecturaux sophistiqu\xe9s pour cr\xe9er un syst\xe8me robuste, performant et r\xe9silient qui transcende les fonctionnalit\xe9s individuelles document\xe9es dans les use-cases."})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);