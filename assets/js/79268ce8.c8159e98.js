"use strict";(self.webpackChunkrf_go_docs=self.webpackChunkrf_go_docs||[]).push([[6119],{2754:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"architecture/data-architecture","title":"Architecture des donn\xe9es","description":"Vue d\'ensemble","source":"@site/docs/architecture/data-architecture.md","sourceDirName":"architecture","slug":"/architecture/data-architecture","permalink":"/RF_Go/architecture/data-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/Beatwen/RF_Go/tree/main/docs/architecture/data-architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Patterns de conception","permalink":"/RF_Go/architecture/design-patterns"},"next":{"title":"Choix technologiques","permalink":"/RF_Go/architecture/technology-choices"}}');var s=r(4848),t=r(8453);const a={},l="Architecture des donn\xe9es",d={},c=[{value:"Vue d&#39;ensemble",id:"vue-densemble",level:2},{value:"Sch\xe9ma de base de donn\xe9es",id:"sch\xe9ma-de-base-de-donn\xe9es",level:2},{value:"Mod\xe8le relationnel",id:"mod\xe8le-relationnel",level:3},{value:"Tables et responsabilit\xe9s",id:"tables-et-responsabilit\xe9s",level:2},{value:"Tables principales",id:"tables-principales",level:3},{value:"Strat\xe9gies de s\xe9rialisation",id:"strat\xe9gies-de-s\xe9rialisation",level:2},{value:"S\xe9rialisation JSON int\xe9gr\xe9e",id:"s\xe9rialisation-json-int\xe9gr\xe9e",level:3},{value:"Types s\xe9rialis\xe9s par table",id:"types-s\xe9rialis\xe9s-par-table",level:3},{value:"Optimisations de performance",id:"optimisations-de-performance",level:2},{value:"Gestion m\xe9moire avec HashSet",id:"gestion-m\xe9moire-avec-hashset",level:3},{value:"Gestion des collections dans RFGroup",id:"gestion-des-collections-dans-rfgroup",level:3},{value:"Initialisation de base de donn\xe9es",id:"initialisation-de-base-de-donn\xe9es",level:2},{value:"Strat\xe9gie d&#39;initialisation",id:"strat\xe9gie-dinitialisation",level:3},{value:"Seeding des donn\xe9es initiales",id:"seeding-des-donn\xe9es-initiales",level:3},{value:"Sauvegarde et import/export",id:"sauvegarde-et-importexport",level:2},{value:"Export structure",id:"export-structure",level:3},{value:"Import de donn\xe9es",id:"import-de-donn\xe9es",level:3},{value:"Patterns d&#39;acc\xe8s aux donn\xe9es",id:"patterns-dacc\xe8s-aux-donn\xe9es",level:2},{value:"Repository g\xe9n\xe9rique",id:"repository-g\xe9n\xe9rique",level:3},{value:"Transactions et coh\xe9rence",id:"transactions-et-coh\xe9rence",level:3},{value:"Validation des donn\xe9es",id:"validation-des-donn\xe9es",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"architecture-des-donn\xe9es",children:"Architecture des donn\xe9es"})}),"\n",(0,s.jsx)(n.h2,{id:"vue-densemble",children:"Vue d'ensemble"}),"\n",(0,s.jsxs)(n.p,{children:["RF.Go utilise ",(0,s.jsx)(n.strong,{children:"SQLite"})," comme base de donn\xe9es locale avec ",(0,s.jsx)(n.strong,{children:"Entity Framework Core"})," et ",(0,s.jsx)(n.strong,{children:"sqlite-net-pcl"})," pour l'acc\xe8s aux donn\xe9es. L'architecture privil\xe9gie la performance locale et la synchronisation temps r\xe9el."]}),"\n",(0,s.jsx)(n.h2,{id:"sch\xe9ma-de-base-de-donn\xe9es",children:"Sch\xe9ma de base de donn\xe9es"}),"\n",(0,s.jsx)(n.h3,{id:"mod\xe8le-relationnel",children:"Mod\xe8le relationnel"}),"\n",(0,s.jsx)(n.mermaid,{value:"erDiagram\r\n    RFGroup ||--o{ RFDevice : contains\r\n    RFGroup {\r\n        int ID PK\r\n        string Name\r\n        string TimePeriodsSerialized\r\n    }\r\n    \r\n    RFDevice ||--o{ RFChannel : has\r\n    RFDevice {\r\n        int ID PK\r\n        string SerialNumber\r\n        bool Selected\r\n        string Brand\r\n        string Model\r\n        string Name\r\n        string Frequency\r\n        string RangeSerialized\r\n        string ChannelsSerialized\r\n        string IpAddress\r\n        string Calendar\r\n        string Stage\r\n        bool IsSynced\r\n        bool IsOnline\r\n        bool PendingSync\r\n        int NumberOfChannels\r\n        int GroupID FK\r\n        int Step\r\n    }\r\n    \r\n    RFChannel {\r\n        int ID PK\r\n        bool Selected\r\n        int chanNumber\r\n        int Frequency\r\n        string RangeSerialized\r\n        int Step\r\n        int SelfSpacing\r\n        int ThirdOrderSpacing\r\n        bool ThirdOrderSpacingEnable\r\n        int FifthOrderSpacing\r\n        bool FifthOrderSpacingEnable\r\n        int SeventhOrderSpacing\r\n        bool SeventhOrderSpacingEnable\r\n        int NinthOrderSpacing\r\n        bool NinthOrderSpacingEnable\r\n        int ThirdOrderSpacing3Tx\r\n        bool ThirdOrderSpacing3TxEnable\r\n        bool Checked\r\n        string ChannelName\r\n        bool IsLocked\r\n    }\r\n    \r\n    FrequencyData {\r\n        int ID PK\r\n        string Color\r\n        string UsedFrequenciesSerialized\r\n        string TwoTX3rdOrderSerialized\r\n        string TwoTX5rdOrderSerialized\r\n        string TwoTX7rdOrderSerialized\r\n        string TwoTX9rdOrderSerialized\r\n        string ThreeTX3rdOrderSerialized\r\n        string GroupDataSerialized\r\n    }\r\n    \r\n    ExclusionChannel {\r\n        int ID PK\r\n        string Country\r\n        int ChannelNumber\r\n        float StartFrequency\r\n        float EndFrequency\r\n        string Type\r\n        bool Exclude\r\n        float ChannelWidth\r\n    }\r\n    \r\n    ScanData {\r\n        int ID PK\r\n        string Name\r\n        string SourceFile\r\n        datetime ImportDate\r\n        string FileType\r\n        string Notes\r\n        string FrequenciesJson\r\n        string ValuesJson\r\n        double MinFrequency\r\n        double MaxFrequency\r\n        double MinValue\r\n        double MaxValue\r\n        bool IsVisible\r\n    }\r\n    \r\n    RFBackupFrequency {\r\n        int ID PK\r\n        string Brand\r\n        string Model\r\n        string Frequency\r\n        int ChannelIndex\r\n        int BackupFrequency\r\n        bool IsUsed\r\n        int MinRange\r\n        int MaxRange\r\n        int Step\r\n    }\r\n    \r\n    CountryChannelConfig {\r\n        int ID PK\r\n        string Country\r\n        int ChannelWidth\r\n        int StartChannel\r\n        int EndChannel\r\n        string DefaultFrequencyRange\r\n    }"}),"\n",(0,s.jsx)(n.h2,{id:"tables-et-responsabilit\xe9s",children:"Tables et responsabilit\xe9s"}),"\n",(0,s.jsx)(n.h3,{id:"tables-principales",children:"Tables principales"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Table"}),(0,s.jsx)(n.th,{children:"R\xf4le"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFDevice"})}),(0,s.jsx)(n.td,{children:"Appareils RF manag\xe9s"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFGroup"})}),(0,s.jsx)(n.td,{children:"Groupes temporels"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FrequencyData"})}),(0,s.jsx)(n.td,{children:"Cache intermodulations"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ScanData"})}),(0,s.jsx)(n.td,{children:"Donn\xe9es de scan spectral"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ExclusionChannel"})}),(0,s.jsx)(n.td,{children:"Canaux TV exclus"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFBackupFrequency"})}),(0,s.jsx)(n.td,{children:"Fr\xe9quences de secours"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"CountryChannelConfig"})}),(0,s.jsx)(n.td,{children:"Config par pays (non utilis\xe9 actuellement)"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"strat\xe9gies-de-s\xe9rialisation",children:"Strat\xe9gies de s\xe9rialisation"}),"\n",(0,s.jsx)(n.h3,{id:"s\xe9rialisation-json-int\xe9gr\xe9e",children:"S\xe9rialisation JSON int\xe9gr\xe9e"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Probl\xe8me"})," : SQLite ne supporte pas nativement les collections complexes\r\n",(0,s.jsx)(n.strong,{children:"Solution"})," : Propri\xe9t\xe9s s\xe9rialis\xe9es automatiques"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class FrequencyData\r\n{\r\n    [Ignore]\r\n    public HashSet<int> UsedFrequencies { get; set; } = new HashSet<int>();\r\n    \r\n    public string UsedFrequenciesSerialized\r\n    {\r\n        get => JsonSerializer.Serialize(UsedFrequencies);\r\n        set => UsedFrequencies = JsonSerializer.Deserialize<HashSet<int>>(value);\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"types-s\xe9rialis\xe9s-par-table",children:"Types s\xe9rialis\xe9s par table"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Mod\xe8le"}),(0,s.jsx)(n.th,{children:"Propri\xe9t\xe9 s\xe9rialis\xe9e"}),(0,s.jsx)(n.th,{children:"Type original"}),(0,s.jsx)(n.th,{children:"Justification"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFDevice"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"RangeSerialized"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List<int>"})}),(0,s.jsx)(n.td,{children:"Plages de fr\xe9quences"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFDevice"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ChannelsSerialized"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List<RFChannel>"})}),(0,s.jsx)(n.td,{children:"Canaux embarqu\xe9s"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFGroup"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TimePeriodsSerialized"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List<TimePeriod>"})}),(0,s.jsx)(n.td,{children:"P\xe9riodes temporelles"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FrequencyData"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"UsedFrequenciesSerialized"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"HashSet<int>"})}),(0,s.jsx)(n.td,{children:"Performance O(1)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FrequencyData"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GroupDataSerialized"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Dictionary<int, FrequencyData>"})}),(0,s.jsx)(n.td,{children:"Donn\xe9es par groupe"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ScanData"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FrequenciesJson"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List<double>"})}),(0,s.jsx)(n.td,{children:"Donn\xe9es de scan"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"optimisations-de-performance",children:"Optimisations de performance"}),"\n",(0,s.jsx)(n.h3,{id:"gestion-m\xe9moire-avec-hashset",children:"Gestion m\xe9moire avec HashSet"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Utilisation r\xe9elle dans le code"})," :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Dans FrequencyCalculationService.cs et RFChannel.cs\r\npublic bool CheckFreeFrequency(int f1, HashSet<int> UsedFrequencies, HashSet<int> TwoTX3rdOrder, HashSet<int> TwoTX5rdOrder, HashSet<int> TwoTX7rdOrder, HashSet<int> TwoTX9rdOrder, HashSet<int> ThreeTX3rdOrder, List<(float StartFrequency, float EndFrequency)> excludedRanges)\r\n{\r\n    // Performance O(1) pour v\xe9rifications d'intermodulations\r\n    return ((SpacingEnable(f1, TwoTX3rdOrder, ThirdOrderSpacingEnable, ThirdOrderSpacing))\r\n                && (SpacingEnable(f1, TwoTX5rdOrder, FifthOrderSpacingEnable, FifthOrderSpacing))\r\n                    && (SpacingEnable(f1, TwoTX7rdOrder, SeventhOrderSpacingEnable, SeventhOrderSpacing))\r\n                        && (SpacingEnable(f1, TwoTX9rdOrder, NinthOrderSpacingEnable, NinthOrderSpacing))\r\n                            && (SpacingEnable(f1, ThreeTX3rdOrder, ThirdOrderSpacing3TxEnable, ThirdOrderSpacing3Tx))\r\n                                && !UsedFrequencies.Any(f => Math.Abs(f - f1) <= SelfSpacing));\r\n}\r\n\r\npublic bool SpacingEnable(int f1, HashSet<int>freqs, bool OrderSpacingEnable, int OrderSpacing)\r\n{\r\n    if(OrderSpacingEnable) \r\n    {\r\n        return !freqs.Any(f => Math.Abs(f-f1) <= OrderSpacing); // O(n) mais optimis\xe9\r\n    }\r\n    else\r\n    {\r\n        return true;\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"gestion-des-collections-dans-rfgroup",children:"Gestion des collections dans RFGroup"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code r\xe9el du mod\xe8le"})," :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class RFGroup\r\n{\r\n    private readonly List<RFDevice> _devices = [];\r\n    \r\n    [Ignore]\r\n    public IReadOnlyList<RFDevice> Devices => _devices; // Read-only exposure\r\n    \r\n    public void AddDevice(RFDevice device) // Controlled mutation\r\n    {\r\n        if (device != null && !_devices.Contains(device))\r\n        {\r\n            _devices.Add(device);\r\n            device.GroupID = this.ID;\r\n        }\r\n    }\r\n    \r\n    public void RemoveDevice(RFDevice device)\r\n    {\r\n        if (device != null && _devices.Contains(device))\r\n        {\r\n            _devices.Remove(device);\r\n            device.GroupID = this.ID;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"initialisation-de-base-de-donn\xe9es",children:"Initialisation de base de donn\xe9es"}),"\n",(0,s.jsx)(n.h3,{id:"strat\xe9gie-dinitialisation",children:"Strat\xe9gie d'initialisation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Base de donn\xe9es"})," : ",(0,s.jsx)(n.code,{children:"RF_Go.db3"}),"\r\n",(0,s.jsx)(n.strong,{children:"Initialisation"})," : Tables cr\xe9\xe9es automatiquement si inexistantes"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"private async Task CreateTablesAsync()\r\n{\r\n    await CreateTableIfNotExists<RFGroup>();\r\n    await CreateTableIfNotExists<RFDevice>();\r\n    await CreateTableIfNotExists<ExclusionChannel>();\r\n    await CreateTableIfNotExists<FrequencyData>();\r\n    await CreateTableIfNotExists<ScanData>();\r\n    await CreateTableIfNotExists<RFBackupFrequency>();\r\n    await CreateTableIfNotExists<CountryChannelConfig>();\r\n    \r\n    // Data seeding\r\n    await InsertInitialGroups();\r\n    await InsertInitialRFExclusionChannel();\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"seeding-des-donn\xe9es-initiales",children:"Seeding des donn\xe9es initiales"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task InsertInitialGroups()\r\n{\r\n    var existingGroups = await Database.Table<RFGroup>().CountAsync();\r\n    if (existingGroups == 0)\r\n    {\r\n        var initialGroups = new RFGroup();\r\n        initialGroups.Name = "Default Group";\r\n        await Database.InsertAsync(initialGroups);\r\n    }\r\n}\r\n\r\nprivate async Task InsertInitialRFExclusionChannel()\r\n{\r\n    var existingExclusions = await Database.Table<ExclusionChannel>().CountAsync();\r\n    if (existingExclusions == 0)\r\n    {\r\n        // Cr\xe9ation des configurations de base pour chaque largeur de bande\r\n        await InsertGenericChannels(470.0F, 6, "Generic-6MHz");\r\n        await InsertGenericChannels(470.0F, 7, "Generic-7MHz");\r\n        await InsertGenericChannels(470.0F, 8, "Generic-8MHz");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"sauvegarde-et-importexport",children:"Sauvegarde et import/export"}),"\n",(0,s.jsx)(n.h3,{id:"export-structure",children:"Export structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var exportData = new\r\n{\r\n    Groups = await _dbContext.GetAllAsync<RFGroup>(),\r\n    Devices = await _dbContext.GetAllAsync<RFDevice>(),\r\n    ExclusionChannels = await _dbContext.GetAllAsync<ExclusionChannel>(),\r\n    FrequencyData = await _dbContext.GetAllAsync<FrequencyData>(),\r\n    ExportDate = DateTime.UtcNow\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"import-de-donn\xe9es",children:"Import de donn\xe9es"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\r\n    A[Fichier JSON] --\x3e B[Validate Schema]\r\n    B --\x3e C[Clear Tables]\r\n    C --\x3e D[Insert Data]\r\n    D --\x3e E[Update Relations]"}),"\n",(0,s.jsx)(n.h2,{id:"patterns-dacc\xe8s-aux-donn\xe9es",children:"Patterns d'acc\xe8s aux donn\xe9es"}),"\n",(0,s.jsx)(n.h3,{id:"repository-g\xe9n\xe9rique",children:"Repository g\xe9n\xe9rique"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public async Task<IEnumerable<TTable>> GetAllAsync<TTable>() where TTable : class, new()\r\n{\r\n    var table = GetTable<TTable>();\r\n    return await table.ToListAsync();\r\n}\r\n\r\npublic async Task<IEnumerable<TTable>> GetFilteredAsync<TTable>(Expression<Func<TTable, bool>> predicate) \r\n    where TTable : class, new()\r\n{\r\n    var table = GetTable<TTable>();\r\n    return await table.Where(predicate).ToListAsync();\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transactions-et-coh\xe9rence",children:"Transactions et coh\xe9rence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public async Task<bool> UpdateItemAsync<TTable>(TTable item) where TTable : class, new()\r\n{\r\n    try\r\n    {\r\n        var result = await Database.UpdateAsync(item);\r\n        return result > 0;\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Debug.WriteLine($"Error in UpdateItemAsync: {ex.Message}");\r\n        throw; // Propagate for higher-level handling\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"validation-des-donn\xe9es",children:"Validation des donn\xe9es"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class RFDevice : INotifyPropertyChanged\r\n{\r\n    public (bool IsValid, string ErrorMessage) Validate()\r\n    {\r\n        if (string.IsNullOrWhiteSpace(Brand))\r\n        {\r\n            return (false, $"{nameof(ID)} brand is required.");\r\n        }\r\n        return (true, string.Empty);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Cette architecture de donn\xe9es supporte efficacement les exigences temps r\xe9el de RF.Go tout en maintenant la coh\xe9rence et les performances."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);