"use strict";(self.webpackChunkrf_go_docs=self.webpackChunkrf_go_docs||[]).push([[1037],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},9874:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>v,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"uml-analysis/class-diagrams","title":"Diagrammes de Classes - Architecture Orient\xe9e Objet","description":"Les diagrammes de classes de RF.Go illustrent l\'architecture orient\xe9e objet compl\xe8te du syst\xe8me. Cette mod\xe9lisation d\xe9taille la structure statique, les relations entre classes, et les patterns de conception utilis\xe9s pour cr\xe9er une architecture robuste et extensible.","source":"@site/docs/uml-analysis/class-diagrams.md","sourceDirName":"uml-analysis","slug":"/uml-analysis/class-diagrams","permalink":"/RF_Go/docs/uml-analysis/class-diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/Beatwen/RF_Go/tree/main/docs/uml-analysis/class-diagrams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Diagrammes d\'Activit\xe9s - Processus et Algorithmes","permalink":"/RF_Go/docs/uml-analysis/activity-diagrams"},"next":{"title":"Diagrammes d\'\xc9tats - Cycles de Vie et Comportements","permalink":"/RF_Go/docs/uml-analysis/state-diagrams"}}');var s=r(4848),t=r(8453);const a={},c="Diagrammes de Classes - Architecture Orient\xe9e Objet",l={},o=[{value:"1. Vue d&#39;Ensemble de l&#39;Architecture OO",id:"1-vue-densemble-de-larchitecture-oo",level:2},{value:"Architecture en Couches avec S\xe9paration des Responsabilit\xe9s",id:"architecture-en-couches-avec-s\xe9paration-des-responsabilit\xe9s",level:3},{value:"2. Mod\xe8les M\xe9tier (Domain Layer)",id:"2-mod\xe8les-m\xe9tier-domain-layer",level:2},{value:"Entit\xe9s Principales RF",id:"entit\xe9s-principales-rf",level:3},{value:"Mod\xe8les de Calcul RF",id:"mod\xe8les-de-calcul-rf",level:3},{value:"3. Services de Domaine",id:"3-services-de-domaine",level:2},{value:"Services RF et Gestion des Appareils",id:"services-rf-et-gestion-des-appareils",level:3},{value:"Services de Synchronisation et Mapping",id:"services-de-synchronisation-et-mapping",level:3},{value:"4. Handlers et Adaptateurs",id:"4-handlers-et-adaptateurs",level:2},{value:"Handlers de Protocoles R\xe9seau",id:"handlers-de-protocoles-r\xe9seau",level:3},{value:"Factory Patterns pour Extensibilit\xe9",id:"factory-patterns-pour-extensibilit\xe9",level:3},{value:"5. ViewModels et Presentation Layer",id:"5-viewmodels-et-presentation-layer",level:2},{value:"ViewModels MVVM",id:"viewmodels-mvvm",level:3},{value:"6. Data Access Layer",id:"6-data-access-layer",level:2},{value:"Repository Pattern et EF Core",id:"repository-pattern-et-ef-core",level:3},{value:"7. Patterns de Conception Utilis\xe9s",id:"7-patterns-de-conception-utilis\xe9s",level:2},{value:"Design Patterns Impl\xe9ment\xe9s",id:"design-patterns-impl\xe9ment\xe9s",level:3},{value:"M\xe9triques de Complexit\xe9",id:"m\xe9triques-de-complexit\xe9",level:3},{value:"8. Relations et D\xe9pendances",id:"8-relations-et-d\xe9pendances",level:2},{value:"Diagramme de Packages",id:"diagramme-de-packages",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"diagrammes-de-classes---architecture-orient\xe9e-objet",children:"Diagrammes de Classes - Architecture Orient\xe9e Objet"})}),"\n",(0,s.jsxs)(n.p,{children:["Les diagrammes de classes de RF.Go illustrent l'",(0,s.jsx)(n.strong,{children:"architecture orient\xe9e objet"})," compl\xe8te du syst\xe8me. Cette mod\xe9lisation d\xe9taille la structure statique, les relations entre classes, et les patterns de conception utilis\xe9s pour cr\xe9er une architecture robuste et extensible."]}),"\n",(0,s.jsx)(n.h2,{id:"1-vue-densemble-de-larchitecture-oo",children:"1. Vue d'Ensemble de l'Architecture OO"}),"\n",(0,s.jsx)(n.h3,{id:"architecture-en-couches-avec-s\xe9paration-des-responsabilit\xe9s",children:"Architecture en Couches avec S\xe9paration des Responsabilit\xe9s"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class PresentationLayer {\r\n        <<abstract>>\r\n    }\r\n    \r\n    class ApplicationLayer {\r\n        <<abstract>>\r\n    }\r\n    \r\n    class DomainLayer {\r\n        <<abstract>>  \r\n    }\r\n    \r\n    class InfrastructureLayer {\r\n        <<abstract>>\r\n    }\r\n    \r\n    PresentationLayer ..> ApplicationLayer : Uses\r\n    ApplicationLayer ..> DomainLayer : Uses\r\n    ApplicationLayer ..> InfrastructureLayer : Uses\r\n    InfrastructureLayer ..> DomainLayer : Implements"}),"\n",(0,s.jsx)(n.h2,{id:"2-mod\xe8les-m\xe9tier-domain-layer",children:"2. Mod\xe8les M\xe9tier (Domain Layer)"}),"\n",(0,s.jsx)(n.h3,{id:"entit\xe9s-principales-rf",children:"Entit\xe9s Principales RF"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class RFDevice {\r\n        +int ID\r\n        +string Name\r\n        +string IPAddress\r\n        +DeviceBrand Brand\r\n        +DeviceModel Model\r\n        +string SerialNumber\r\n        +DeviceStatus Status\r\n        +DateTime LastSync\r\n        +int GroupID\r\n        +List~RFChannel~ Channels\r\n        +Dictionary~string,object~ Properties\r\n        \r\n        +bool IsOnline()\r\n        +void UpdateStatus(DeviceStatus status)\r\n        +void AddChannel(RFChannel channel)\r\n        +RFChannel GetChannel(int index)\r\n        +bool CanSync()\r\n        +Dictionary~string,object~ GetConfiguration()\r\n    }\r\n    \r\n    class RFChannel {\r\n        +int ID\r\n        +int DeviceID\r\n        +int ChannelNumber\r\n        +int Frequency\r\n        +string ChannelName\r\n        +bool IsLocked\r\n        +int Power\r\n        +int Sensitivity\r\n        +ChannelType Type\r\n        +DateTime LastUpdate\r\n        \r\n        +bool IsValidFrequency(int frequency)\r\n        +void Lock()\r\n        +void Unlock()\r\n        +void SetFrequency(int frequency)\r\n        +bool HasConflict()\r\n        +List~int~ GetIntermodulations()\r\n    }\r\n    \r\n    class RFGroup {\r\n        +int ID\r\n        +string Name\r\n        +string Description\r\n        +Color GroupColor\r\n        +List~TimePeriod~ TimePeriods\r\n        +List~RFDevice~ Devices\r\n        +GroupStatus Status\r\n        +DateTime CreatedAt\r\n        +DateTime UpdatedAt\r\n        \r\n        +void AddDevice(RFDevice device)\r\n        +void RemoveDevice(RFDevice device)\r\n        +void AddTimePeriod(TimePeriod period)\r\n        +bool HasTemporalConflict()\r\n        +List~RFDevice~ GetActiveDevices(DateTime time)\r\n        +int GetTotalChannels()\r\n    }\r\n    \r\n    class TimePeriod {\r\n        +int ID\r\n        +string Name\r\n        +DateTime StartTime\r\n        +DateTime EndTime\r\n        +TimeSpan StartTimeSpan\r\n        +TimeSpan EndTimeSpan\r\n        +RecurrenceType Recurrence\r\n        +bool IsActive\r\n        \r\n        +bool IsActiveAt(DateTime time)\r\n        +bool OverlapsWith(TimePeriod other)\r\n        +TimeSpan Duration()\r\n        +DateTime GetNextOccurrence()\r\n        +bool Contains(DateTime time)\r\n    }\r\n    \r\n    class ExclusionChannel {\r\n        +int ID\r\n        +int Frequency\r\n        +string Reason\r\n        +ExclusionType Type\r\n        +DateTime ValidFrom\r\n        +DateTime ValidTo\r\n        +string Region\r\n        +bool IsActive\r\n        \r\n        +bool IsExcludedAt(DateTime time)\r\n        +bool Conflicts(int frequency)\r\n        +bool IsInRegion(string region)\r\n    }\r\n    \r\n    RFDevice ||--o{ RFChannel : contains\r\n    RFGroup ||--o{ RFDevice : contains\r\n    RFGroup ||--o{ TimePeriod : contains\r\n    RFDevice }o--|| RFGroup : belongs to"}),"\n",(0,s.jsx)(n.h3,{id:"mod\xe8les-de-calcul-rf",children:"Mod\xe8les de Calcul RF"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class FrequencyData {\r\n        +Dictionary~int,List~int~~ UsedFrequencies\r\n        +List~int~ AvailableFrequencies\r\n        +List~int~ ExcludedFrequencies\r\n        +Dictionary~string,List~int~~ IntermodulationProducts\r\n        +Dictionary~int,List~int~~ ChannelIntermodulations\r\n        +int MinFrequency\r\n        +int MaxFrequency\r\n        +int ChannelSpacing\r\n        \r\n        +bool IsFrequencyAvailable(int frequency)\r\n        +void AddUsedFrequency(int frequency, int deviceId)\r\n        +void RemoveUsedFrequency(int frequency, int deviceId)\r\n        +List~int~ GetIntermodulations(int frequency)\r\n        +void CalculateAllIntermodulations()\r\n        +bool HasConflict(int frequency)\r\n        +int GetOptimalFrequency(List~int~ preferences)\r\n    }\r\n    \r\n    class CalculationResult {\r\n        +Dictionary~int,int~ ChannelFrequencies\r\n        +List~string~ Conflicts\r\n        +List~string~ Warnings\r\n        +double OptimizationScore\r\n        +TimeSpan CalculationTime\r\n        +int TotalChannels\r\n        +int SuccessfulChannels\r\n        +List~int~ BackupFrequencies\r\n        \r\n        +bool IsValid()\r\n        +double GetSuccessRate()\r\n        +void AddConflict(string conflict)\r\n        +void AddWarning(string warning)\r\n        +List~int~ GetConflictingChannels()\r\n        +string GenerateReport()\r\n    }\r\n    \r\n    class IntermodulationCalculator {\r\n        +FrequencyData FrequencyData\r\n        +IntermodulationOrder MaxOrder\r\n        +bool Include3TxCalculations\r\n        \r\n        +List~int~ Calculate2Tx3rdOrder(int f1, int f2)\r\n        +List~int~ Calculate2Tx5thOrder(int f1, int f2)\r\n        +List~int~ Calculate2Tx7thOrder(int f1, int f2)\r\n        +List~int~ Calculate3Tx3rdOrder(int f1, int f2, int f3)\r\n        +List~int~ CalculateAllIntermodulations(List~int~ frequencies)\r\n        +bool HasIntermodulationConflict(int frequency, List~int~ usedFreqs)\r\n        +Dictionary~string,List~int~~ GetDetailedCalculations()\r\n    }\r\n    \r\n    FrequencyData --\x3e IntermodulationCalculator : uses\r\n    IntermodulationCalculator --\x3e CalculationResult : produces"}),"\n",(0,s.jsx)(n.h2,{id:"3-services-de-domaine",children:"3. Services de Domaine"}),"\n",(0,s.jsx)(n.h3,{id:"services-rf-et-gestion-des-appareils",children:"Services RF et Gestion des Appareils"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class IFrequencyCalculationService {\r\n        <<interface>>\r\n        +CalculationResult CalculateFrequencies(List~RFDevice~ devices)\r\n        +CalculationResult CalculateTemporalFrequencies(List~RFGroup~ groups)\r\n        +bool ValidateFrequencyPlan(Dictionary~int,int~ plan)\r\n        +List~int~ GenerateBackupFrequencies(int count)\r\n        +void OptimizePlan(CalculationResult result)\r\n    }\r\n    \r\n    class FrequencyCalculationService {\r\n        -IFrequencyDataService _frequencyDataService\r\n        -IntermodulationCalculator _calculator\r\n        -IOptimizationEngine _optimizer\r\n        -ILogger _logger\r\n        \r\n        +CalculationResult CalculateFrequencies(List~RFDevice~ devices)\r\n        +CalculationResult CalculateTemporalFrequencies(List~RFGroup~ groups)\r\n        +bool ValidateFrequencyPlan(Dictionary~int,int~ plan)\r\n        +List~int~ GenerateBackupFrequencies(int count)\r\n        +void OptimizePlan(CalculationResult result)\r\n        -void GroupDevicesByTimePeriod(List~RFGroup~ groups)\r\n        -void ProcessLockedFrequencies(List~RFChannel~ channels)\r\n        -void ProcessUnlockedFrequencies(List~RFChannel~ channels)\r\n    }\r\n    \r\n    class IDiscoveryService {\r\n        <<interface>>\r\n        +event DeviceDiscoveredEventHandler DeviceDiscovered\r\n        +event DeviceLostEventHandler DeviceLost\r\n        +Task StartDiscoveryAsync()\r\n        +Task StopDiscoveryAsync()\r\n        +List~RFDevice~ GetDiscoveredDevices()\r\n        +Task~RFDevice~ GetDeviceDetailsAsync(string ipAddress)\r\n    }\r\n    \r\n    class DiscoveryService {\r\n        -List~IDeviceHandler~ _handlers\r\n        -Timer _discoveryTimer\r\n        -ConcurrentDictionary~string,RFDevice~ _discoveredDevices\r\n        -ILogger _logger\r\n        \r\n        +event DeviceDiscoveredEventHandler DeviceDiscovered\r\n        +event DeviceLostEventHandler DeviceLost\r\n        +Task StartDiscoveryAsync()\r\n        +Task StopDiscoveryAsync()\r\n        +List~RFDevice~ GetDiscoveredDevices()\r\n        +Task~RFDevice~ GetDeviceDetailsAsync(string ipAddress)\r\n        -Task RunDiscoveryLoop()\r\n        -void ProcessDiscoveryResults(List~DeviceInfo~ devices)\r\n        -bool IsDeviceAlreadyKnown(DeviceInfo device)\r\n    }\r\n    \r\n    IFrequencyCalculationService <|.. FrequencyCalculationService\r\n    IDiscoveryService <|.. DiscoveryService"}),"\n",(0,s.jsx)(n.h3,{id:"services-de-synchronisation-et-mapping",children:"Services de Synchronisation et Mapping"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class ISynchronizationService {\r\n        <<interface>>\r\n        +Task~SyncResult~ SyncDeviceAsync(RFDevice device)\r\n        +Task~SyncResult~ SyncAllDevicesAsync(List~RFDevice~ devices)\r\n        +Task~SyncResult~ SyncFromDeviceAsync(RFDevice device)\r\n        +event SyncCompletedEventHandler SyncCompleted\r\n    }\r\n    \r\n    class SynchronizationService {\r\n        -IDeviceHandlerFactory _handlerFactory\r\n        -ISyncResultLogger _logger\r\n        -SemaphoreSlim _syncSemaphore\r\n        \r\n        +Task~SyncResult~ SyncDeviceAsync(RFDevice device)\r\n        +Task~SyncResult~ SyncAllDevicesAsync(List~RFDevice~ devices)\r\n        +Task~SyncResult~ SyncFromDeviceAsync(RFDevice device)\r\n        +event SyncCompletedEventHandler SyncCompleted\r\n        -Task~SyncResult~ ExecuteSyncOperation(RFDevice device, SyncDirection direction)\r\n        -void ValidateDeviceState(RFDevice device)\r\n        -List~SyncCommand~ BuildSyncCommands(RFDevice device)\r\n    }\r\n    \r\n    class IMappingService {\r\n        <<interface>>\r\n        +void MapFrequenciesToDevices(List~RFDevice~ devices, Dictionary~int,int~ frequencies)\r\n        +Dictionary~int,int~ ExtractFrequenciesFromDevices(List~RFDevice~ devices)\r\n        +bool ValidateMapping(List~RFDevice~ devices)\r\n        +void ApplyTemporalMapping(List~RFGroup~ groups)\r\n    }\r\n    \r\n    class MappingService {\r\n        -IValidationService _validator\r\n        -ILogger _logger\r\n        \r\n        +void MapFrequenciesToDevices(List~RFDevice~ devices, Dictionary~int,int~ frequencies)\r\n        +Dictionary~int,int~ ExtractFrequenciesFromDevices(List~RFDevice~ devices)\r\n        +bool ValidateMapping(List~RFDevice~ devices)\r\n        +void ApplyTemporalMapping(List~RFGroup~ groups)\r\n        -void ValidateFrequencyRange(int frequency)\r\n        -void UpdateChannelMapping(RFChannel channel, int frequency)\r\n        -void LogMappingOperation(string operation, object details)\r\n    }\r\n    \r\n    ISynchronizationService <|.. SynchronizationService\r\n    IMappingService <|.. MappingService"}),"\n",(0,s.jsx)(n.h2,{id:"4-handlers-et-adaptateurs",children:"4. Handlers et Adaptateurs"}),"\n",(0,s.jsx)(n.h3,{id:"handlers-de-protocoles-r\xe9seau",children:"Handlers de Protocoles R\xe9seau"}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\r\n    class IDeviceHandler {\r\n        <<interface>>\r\n        +DeviceBrand SupportedBrand\r\n        +List~DeviceModel~ SupportedModels\r\n        +Task~List~DeviceInfo~~ DiscoverDevicesAsync()\r\n        +Task~RFDevice~ GetDeviceDetailsAsync(string ipAddress)\r\n        +Task~SyncResult~ SyncDeviceAsync(RFDevice device)\r\n        +bool SupportsDevice(DeviceInfo device)\r\n    }\r\n    \r\n    class SennheiserHandler {\r\n        -mDNSService _mdnsService\r\n        -TCPClient _tcpClient\r\n        -string _serviceType = "_sennheiser._tcp"\r\n        \r\n        +DeviceBrand SupportedBrand = Sennheiser\r\n        +List~DeviceModel~ SupportedModels\r\n        +Task~List~DeviceInfo~~ DiscoverDevicesAsync()\r\n        +Task~RFDevice~ GetDeviceDetailsAsync(string ipAddress)\r\n        +Task~SyncResult~ SyncDeviceAsync(RFDevice device)\r\n        +bool SupportsDevice(DeviceInfo device)\r\n        -Task~List~DeviceInfo~~ PerformmDNSDiscovery()\r\n        -string BuildSennheiserCommand(string command, Dictionary~string,object~ parameters)\r\n        -Task~string~ SendTCPCommandAsync(string ipAddress, string command)\r\n    }\r\n    \r\n    class ShureHandler {\r\n        -SLPService _slpService\r\n        -TCPClient _tcpClient\r\n        -string _multicastAddress = "239.255.254.253"\r\n        -int _multicastPort = 8427\r\n        \r\n        +DeviceBrand SupportedBrand = Shure\r\n        +List~DeviceModel~ SupportedModels\r\n        +Task~List~DeviceInfo~~ DiscoverDevicesAsync()\r\n        +Task~RFDevice~ GetDeviceDetailsAsync(string ipAddress)\r\n        +Task~SyncResult~ SyncDeviceAsync(RFDevice device)\r\n        +bool SupportsDevice(DeviceInfo device)\r\n        -Task~List~DeviceInfo~~ PerformSLPDiscovery()\r\n        -string BuildShureCommand(string command, Dictionary~string,object~ parameters)\r\n        -Task~string~ SendULXDCommandAsync(string ipAddress, string command)\r\n    }\r\n    \r\n    class GenericHandler {\r\n        -UDPClient _udpClient\r\n        -List~string~ _scanRanges\r\n        \r\n        +DeviceBrand SupportedBrand = Generic\r\n        +List~DeviceModel~ SupportedModels\r\n        +Task~List~DeviceInfo~~ DiscoverDevicesAsync()\r\n        +Task~RFDevice~ GetDeviceDetailsAsync(string ipAddress)\r\n        +Task~SyncResult~ SyncDeviceAsync(RFDevice device)\r\n        +bool SupportsDevice(DeviceInfo device)\r\n        -Task~List~DeviceInfo~~ PerformUDPScan()\r\n        -Task~DeviceInfo~ ProbeDevice(string ipAddress)\r\n        -bool IsDeviceResponsive(string ipAddress)\r\n    }\r\n    \r\n    IDeviceHandler <|.. SennheiserHandler\r\n    IDeviceHandler <|.. ShureHandler\r\n    IDeviceHandler <|.. GenericHandler'}),"\n",(0,s.jsx)(n.h3,{id:"factory-patterns-pour-extensibilit\xe9",children:"Factory Patterns pour Extensibilit\xe9"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class IDeviceHandlerFactory {\r\n        <<interface>>\r\n        +IDeviceHandler GetHandler(DeviceBrand brand)\r\n        +IDeviceHandler GetHandler(DeviceInfo device)\r\n        +List~IDeviceHandler~ GetAllHandlers()\r\n        +void RegisterHandler(IDeviceHandler handler)\r\n    }\r\n    \r\n    class DeviceHandlerFactory {\r\n        -Dictionary~DeviceBrand,IDeviceHandler~ _handlers\r\n        -IServiceProvider _serviceProvider\r\n        \r\n        +IDeviceHandler GetHandler(DeviceBrand brand)\r\n        +IDeviceHandler GetHandler(DeviceInfo device)\r\n        +List~IDeviceHandler~ GetAllHandlers()\r\n        +void RegisterHandler(IDeviceHandler handler)\r\n        -void InitializeDefaultHandlers()\r\n        -IDeviceHandler CreateHandler(Type handlerType)\r\n    }\r\n    \r\n    class ICalculationEngineFactory {\r\n        <<interface>>\r\n        +ICalculationEngine CreateEngine(CalculationType type)\r\n        +List~CalculationType~ GetSupportedTypes()\r\n    }\r\n    \r\n    class CalculationEngineFactory {\r\n        -Dictionary~CalculationType,Type~ _engineTypes\r\n        -IServiceProvider _serviceProvider\r\n        \r\n        +ICalculationEngine CreateEngine(CalculationType type)\r\n        +List~CalculationType~ GetSupportedTypes()\r\n        +void RegisterEngine(CalculationType type, Type engineType)\r\n        -ICalculationEngine InstantiateEngine(Type engineType)\r\n    }\r\n    \r\n    IDeviceHandlerFactory <|.. DeviceHandlerFactory\r\n    ICalculationEngineFactory <|.. CalculationEngineFactory\r\n    DeviceHandlerFactory --\x3e IDeviceHandler : creates\r\n    CalculationEngineFactory --\x3e ICalculationEngine : creates"}),"\n",(0,s.jsx)(n.h2,{id:"5-viewmodels-et-presentation-layer",children:"5. ViewModels et Presentation Layer"}),"\n",(0,s.jsx)(n.h3,{id:"viewmodels-mvvm",children:"ViewModels MVVM"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class BaseViewModel {\r\n        <<abstract>>\r\n        +event PropertyChangedEventHandler PropertyChanged\r\n        #bool SetProperty<T>(ref T field, T value, string propertyName)\r\n        #void OnPropertyChanged(string propertyName)\r\n        +virtual Task InitializeAsync()\r\n        +virtual void Cleanup()\r\n        #void RaiseCanExecuteChanged()\r\n    }\r\n    \r\n    class DevicesViewModel {\r\n        -IDiscoveryService _discoveryService\r\n        -ISynchronizationService _syncService\r\n        -IFrequencyCalculationService _calculationService\r\n        -ObservableCollection<RFDevice> _devices\r\n        -RFDevice _selectedDevice\r\n        -bool _isDiscovering\r\n        -string _statusMessage\r\n        \r\n        +ObservableCollection<RFDevice> Devices\r\n        +RFDevice SelectedDevice\r\n        +bool IsDiscovering\r\n        +string StatusMessage\r\n        +ICommand StartDiscoveryCommand\r\n        +ICommand SyncSelectedCommand\r\n        +ICommand SyncAllCommand\r\n        +ICommand CalculateFrequenciesCommand\r\n        +ICommand RefreshCommand\r\n        \r\n        +Task InitializeAsync()\r\n        -Task StartDiscovery()\r\n        -Task SyncSelectedDevice()\r\n        -Task SyncAllDevices()\r\n        -Task CalculateFrequencies()\r\n        -void OnDeviceDiscovered(object sender, DeviceDiscoveredEventArgs e)\r\n        -void OnSyncCompleted(object sender, SyncCompletedEventArgs e)\r\n    }\r\n    \r\n    class FrequencyViewModel {\r\n        -IFrequencyCalculationService _calculationService\r\n        -IMappingService _mappingService\r\n        -ObservableCollection<RFChannel> _channels\r\n        -CalculationResult _lastCalculation\r\n        -bool _isCalculating\r\n        \r\n        +ObservableCollection<RFChannel> Channels\r\n        +CalculationResult LastCalculation\r\n        +bool IsCalculating\r\n        +ICommand CalculateCommand\r\n        +ICommand OptimizeCommand\r\n        +ICommand LockChannelCommand\r\n        +ICommand UnlockChannelCommand\r\n        \r\n        -Task CalculateFrequencies()\r\n        -Task OptimizeFrequencies()\r\n        -void LockChannel(RFChannel channel)\r\n        -void UnlockChannel(RFChannel channel)\r\n        -void UpdateChannelDisplay()\r\n    }\r\n    \r\n    BaseViewModel <|-- DevicesViewModel\r\n    BaseViewModel <|-- FrequencyViewModel"}),"\n",(0,s.jsx)(n.h2,{id:"6-data-access-layer",children:"6. Data Access Layer"}),"\n",(0,s.jsx)(n.h3,{id:"repository-pattern-et-ef-core",children:"Repository Pattern et EF Core"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class IRepository~T~ {\r\n        <<interface>>\r\n        +Task~T~ GetByIdAsync(int id)\r\n        +Task~IEnumerable~T~~ GetAllAsync()\r\n        +Task~IEnumerable~T~~ FindAsync(Expression~Func~T,bool~~ predicate)\r\n        +Task AddAsync(T entity)\r\n        +Task UpdateAsync(T entity)\r\n        +Task DeleteAsync(T entity)\r\n        +Task~bool~ ExistsAsync(int id)\r\n    }\r\n    \r\n    class BaseRepository~T~ {\r\n        <<abstract>>\r\n        #ApplicationDbContext _context\r\n        #DbSet~T~ _dbSet\r\n        \r\n        +Task~T~ GetByIdAsync(int id)\r\n        +Task~IEnumerable~T~~ GetAllAsync()\r\n        +Task~IEnumerable~T~~ FindAsync(Expression~Func~T,bool~~ predicate)\r\n        +Task AddAsync(T entity)\r\n        +Task UpdateAsync(T entity)\r\n        +Task DeleteAsync(T entity)\r\n        +Task~bool~ ExistsAsync(int id)\r\n        #virtual IQueryable~T~ GetQueryable()\r\n    }\r\n    \r\n    class IRFDeviceRepository {\r\n        <<interface>>\r\n        +Task~List~RFDevice~~ GetDevicesByGroupAsync(int groupId)\r\n        +Task~List~RFDevice~~ GetOnlineDevicesAsync()\r\n        +Task~RFDevice~ GetDeviceByIPAsync(string ipAddress)\r\n        +Task UpdateDeviceStatusAsync(int deviceId, DeviceStatus status)\r\n    }\r\n    \r\n    class RFDeviceRepository {\r\n        +Task~List~RFDevice~~ GetDevicesByGroupAsync(int groupId)\r\n        +Task~List~RFDevice~~ GetOnlineDevicesAsync()\r\n        +Task~RFDevice~ GetDeviceByIPAsync(string ipAddress)\r\n        +Task UpdateDeviceStatusAsync(int deviceId, DeviceStatus status)\r\n        -IQueryable~RFDevice~ GetDevicesWithChannels()\r\n    }\r\n    \r\n    class IUnitOfWork {\r\n        <<interface>>\r\n        +IRFDeviceRepository RFDevices\r\n        +IRFChannelRepository RFChannels\r\n        +IRFGroupRepository RFGroups\r\n        +IExclusionChannelRepository ExclusionChannels\r\n        +Task~int~ SaveChangesAsync()\r\n        +Task BeginTransactionAsync()\r\n        +Task CommitTransactionAsync()\r\n        +Task RollbackTransactionAsync()\r\n    }\r\n    \r\n    IRepository~T~ <|.. BaseRepository~T~\r\n    BaseRepository~RFDevice~ <|-- RFDeviceRepository\r\n    IRFDeviceRepository <|.. RFDeviceRepository"}),"\n",(0,s.jsx)(n.h2,{id:"7-patterns-de-conception-utilis\xe9s",children:"7. Patterns de Conception Utilis\xe9s"}),"\n",(0,s.jsx)(n.h3,{id:"design-patterns-impl\xe9ment\xe9s",children:"Design Patterns Impl\xe9ment\xe9s"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class Singleton~T~ {\r\n        <<abstract>>\r\n        -static T _instance\r\n        -static readonly object _lock\r\n        +static T Instance\r\n        #Singleton()\r\n        +static T GetInstance()\r\n    }\r\n    \r\n    class Command {\r\n        <<interface>>\r\n        +Task ExecuteAsync()\r\n        +bool CanExecute()\r\n        +event EventHandler CanExecuteChanged\r\n    }\r\n    \r\n    class Observer~T~ {\r\n        <<interface>>\r\n        +void Update(T data)\r\n    }\r\n    \r\n    class Subject~T~ {\r\n        <<abstract>>\r\n        -List~Observer~T~~ _observers\r\n        +void Attach(Observer~T~ observer)\r\n        +void Detach(Observer~T~ observer)\r\n        #void Notify(T data)\r\n    }\r\n    \r\n    class Strategy~T~ {\r\n        <<interface>>\r\n        +T Execute(object parameters)\r\n    }\r\n    \r\n    class Factory~T~ {\r\n        <<abstract>>\r\n        +abstract T Create(object parameters)\r\n        +virtual T CreateDefault()\r\n    }"}),"\n",(0,s.jsx)(n.h3,{id:"m\xe9triques-de-complexit\xe9",children:"M\xe9triques de Complexit\xe9"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Classe"}),(0,s.jsx)(n.th,{children:"Responsabilit\xe9s"}),(0,s.jsx)(n.th,{children:"Couplage"}),(0,s.jsx)(n.th,{children:"Coh\xe9sion"}),(0,s.jsx)(n.th,{children:"Complexit\xe9 Cyclomatique"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RFDevice"})}),(0,s.jsx)(n.td,{children:"Entit\xe9 m\xe9tier"}),(0,s.jsx)(n.td,{children:"Faible"}),(0,s.jsx)(n.td,{children:"\xc9lev\xe9e"}),(0,s.jsx)(n.td,{children:"8"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FrequencyCalculationService"})}),(0,s.jsx)(n.td,{children:"Service m\xe9tier"}),(0,s.jsx)(n.td,{children:"Moyen"}),(0,s.jsx)(n.td,{children:"\xc9lev\xe9e"}),(0,s.jsx)(n.td,{children:"15"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DiscoveryService"})}),(0,s.jsx)(n.td,{children:"Service technique"}),(0,s.jsx)(n.td,{children:"Moyen"}),(0,s.jsx)(n.td,{children:"Moyenne"}),(0,s.jsx)(n.td,{children:"12"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DevicesViewModel"})}),(0,s.jsx)(n.td,{children:"Pr\xe9sentation"}),(0,s.jsx)(n.td,{children:"\xc9lev\xe9"}),(0,s.jsx)(n.td,{children:"Moyenne"}),(0,s.jsx)(n.td,{children:"18"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"SennheiserHandler"})}),(0,s.jsx)(n.td,{children:"Adaptateur"}),(0,s.jsx)(n.td,{children:"Faible"}),(0,s.jsx)(n.td,{children:"\xc9lev\xe9e"}),(0,s.jsx)(n.td,{children:"10"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"8-relations-et-d\xe9pendances",children:"8. Relations et D\xe9pendances"}),"\n",(0,s.jsx)(n.h3,{id:"diagramme-de-packages",children:"Diagramme de Packages"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    package RF.Go.Domain {\r\n        class RFDevice\r\n        class RFChannel\r\n        class RFGroup\r\n    }\r\n    \r\n    package RF.Go.Application {\r\n        class IFrequencyCalculationService\r\n        class FrequencyCalculationService\r\n        class DevicesViewModel\r\n    }\r\n    \r\n    package RF.Go.Infrastructure {\r\n        class RFDeviceRepository\r\n        class SennheiserHandler\r\n        class DiscoveryService\r\n    }\r\n    \r\n    package RF.Go.Presentation {\r\n        class DevicesView\r\n        class FrequencyView\r\n    }\r\n    \r\n    RF.Go.Application ..> RF.Go.Domain : Uses\r\n    RF.Go.Infrastructure ..> RF.Go.Domain : Implements\r\n    RF.Go.Infrastructure ..> RF.Go.Application : Implements\r\n    RF.Go.Presentation ..> RF.Go.Application : Uses"}),"\n",(0,s.jsx)(n.p,{children:"Cette architecture orient\xe9e objet d\xe9montre une structure bien organis\xe9e avec une s\xe9paration claire des responsabilit\xe9s, une extensibilit\xe9 par design patterns, et une robustesse assur\xe9e par les principes SOLID."})]})}function v(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);