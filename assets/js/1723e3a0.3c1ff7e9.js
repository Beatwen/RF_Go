"use strict";(self.webpackChunkrf_go_docs=self.webpackChunkrf_go_docs||[]).push([[4541],{3288:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"protocols/udp-tcp","title":"Protocoles UDP/TCP","description":"RF Go utilise plusieurs protocoles de communication r\xe9seau pour interagir avec les appareils audio sans fil. Cette section d\xe9crit en d\xe9tail les protocoles UDP et TCP impl\xe9ment\xe9s dans l\'application.","source":"@site/docs/protocols/udp-tcp.md","sourceDirName":"protocols","slug":"/protocols/udp-tcp","permalink":"/RF_Go/protocols/udp-tcp","draft":false,"unlisted":false,"editUrl":"https://github.com/Beatwen/RF_Go/tree/main/docs/protocols/udp-tcp.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Protocoles DNS et D\xe9couverte","permalink":"/RF_Go/protocols/dns-discovery"},"next":{"title":"Protocoles Sp\xe9cifiques aux Appareils","permalink":"/RF_Go/protocols/device-specific"}}');var s=i(4848),t=i(8453);const o={},a="Protocoles UDP/TCP",c={},l=[{value:"Architecture de Communication",id:"architecture-de-communication",level:2},{value:"Communication UDP",id:"communication-udp",level:2},{value:"Vue d&#39;ensemble",id:"vue-densemble",level:3},{value:"Service de Communication UDP Standard",id:"service-de-communication-udp-standard",level:3},{value:"Communication Sennheiser G4",id:"communication-sennheiser-g4",level:3},{value:"Format des Commandes G4",id:"format-des-commandes-g4",level:3},{value:"Gestion des R\xe9ponses",id:"gestion-des-r\xe9ponses",level:3},{value:"Communication Shure",id:"communication-shure",level:3},{value:"Caract\xe9ristiques du Protocole",id:"caract\xe9ristiques-du-protocole",level:4},{value:"Format des Commandes",id:"format-des-commandes",level:4},{value:"Commandes Principales",id:"commandes-principales",level:4},{value:"Gestion des R\xe9ponses Shure",id:"gestion-des-r\xe9ponses-shure",level:4},{value:"Impl\xe9mentation",id:"impl\xe9mentation",level:4},{value:"Communication TCP",id:"communication-tcp",level:2},{value:"Cas d&#39;utilisation TCP",id:"cas-dutilisation-tcp",level:3},{value:"Impl\xe9mentation TCP",id:"impl\xe9mentation-tcp",level:3},{value:"Communication HTTP/REST",id:"communication-httprest",level:2},{value:"Mod\xe8les support\xe9s",id:"mod\xe8les-support\xe9s",level:3},{value:"Impl\xe9mentation",id:"impl\xe9mentation-1",level:3},{value:"Gestion des Appareils Hors Ligne",id:"gestion-des-appareils-hors-ligne",level:2},{value:"Bonnes Pratiques",id:"bonnes-pratiques",level:2},{value:"Performance",id:"performance",level:3},{value:"S\xe9curit\xe9",id:"s\xe9curit\xe9",level:3},{value:"Fiabilit\xe9",id:"fiabilit\xe9",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"protocoles-udptcp",children:"Protocoles UDP/TCP"})}),"\n",(0,s.jsx)(n.p,{children:"RF Go utilise plusieurs protocoles de communication r\xe9seau pour interagir avec les appareils audio sans fil. Cette section d\xe9crit en d\xe9tail les protocoles UDP et TCP impl\xe9ment\xe9s dans l'application."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-de-communication",children:"Architecture de Communication"}),"\n",(0,s.jsx)(n.p,{children:"RF Go impl\xe9mente plusieurs services de communication pour prendre en charge divers appareils et protocoles. L'architecture est con\xe7ue pour \xeatre flexible et extensible."}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TD\r\n    A[RF Go Application] --\x3e B[Communication Services]\r\n    B --\x3e C[UDPCommunicationService]\r\n    B --\x3e D[TCPCommunicationService]\r\n    B --\x3e E[RESTCommunicationService]\r\n    C --\x3e F[Standard UDP]\r\n    C --\x3e G[Sennheiser G4 UDP]\r\n    E --\x3e H[HTTP/REST APIs]"}),"\n",(0,s.jsx)(n.h2,{id:"communication-udp",children:"Communication UDP"}),"\n",(0,s.jsx)(n.h3,{id:"vue-densemble",children:"Vue d'ensemble"}),"\n",(0,s.jsx)(n.p,{children:"Le protocole UDP (User Datagram Protocol) est utilis\xe9 pour la communication avec de nombreux appareils audio sans fil en raison de sa l\xe9g\xe8ret\xe9 et de sa rapidit\xe9. RF Go impl\xe9mente un service UDP modulaire qui g\xe8re diff\xe9rents formats de communication selon le type d'appareil."}),"\n",(0,s.jsx)(n.h3,{id:"service-de-communication-udp-standard",children:"Service de Communication UDP Standard"}),"\n",(0,s.jsx)(n.p,{children:"Le service principal de communication UDP g\xe8re la plupart des appareils standards:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class UDPCommunicationService\r\n{\r\n    private readonly UdpClient _standardUdpClient;\r\n    private readonly ConcurrentDictionary<string, TaskCompletionSource<string>> _responseTasks;\r\n    \r\n    // ... initialisation et configuration\r\n\r\n    public async Task<string> SendCommandAsync(string ip, int port, string command)\r\n    {\r\n        // Envoie une commande \xe0 l\'appareil et attend la r\xe9ponse\r\n        var data = Encoding.UTF8.GetBytes(command);\r\n        var tcs = new TaskCompletionSource<string>();\r\n        string key = $"{ip}:{port}";\r\n        _responseTasks[key] = tcs;\r\n\r\n        await _standardUdpClient.SendAsync(data, data.Length, ip, port);\r\n        // ... gestion de la r\xe9ponse et du timeout\r\n    }\r\n    \r\n    // ... autres m\xe9thodes\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"communication-sennheiser-g4",children:"Communication Sennheiser G4"}),"\n",(0,s.jsx)(n.p,{children:"Les appareils Sennheiser G4 IEM utilisent un protocole UDP sp\xe9cifique qui n\xe9cessite une communication sur un port d\xe9di\xe9 (53212):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Extension du service UDP pour prendre en charge les appareils G4\r\npublic class UDPCommunicationService\r\n{\r\n    // ... autres champs et m\xe9thodes\r\n    \r\n    private UdpClient _g4UdpClient;\r\n    private const int G4_PORT = 53212;\r\n    \r\n    // M\xe9thode sp\xe9cifique pour les appareils G4\r\n    public async Task<string> SendG4CommandAsync(string ip, string command)\r\n    {\r\n        var g4Client = GetG4Client();\r\n        var data = Encoding.UTF8.GetBytes(command);\r\n        \r\n        // Envoi au port sp\xe9cifique G4\r\n        await g4Client.SendAsync(data, data.Length, ip, G4_PORT);\r\n        \r\n        // ... gestion de la r\xe9ponse\r\n    }\r\n    \r\n    private UdpClient GetG4Client()\r\n    {\r\n        // Initialisation du client G4 \xe0 la demande\r\n        if (_g4UdpClient == null)\r\n        {\r\n            _g4UdpClient = new UdpClient();\r\n            // ... configuration sp\xe9cifique\r\n        }\r\n        return _g4UdpClient;\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"format-des-commandes-g4",children:"Format des Commandes G4"}),"\n",(0,s.jsxs)(n.p,{children:["Les commandes envoy\xe9es aux appareils Sennheiser G4 suivent un format sp\xe9cifique d\xe9fini dans ",(0,s.jsx)(n.code,{children:"SennheiserG4CommandSet"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class SennheiserG4CommandSet : IDeviceCommandSet\r\n{\r\n    public string GetModelCommand() => "FirmwareRevision\\r";\r\n    public string GetFrequencyCodeCommand() => "RfConfig\\r";\r\n    public string GetChannelNameCommand(int channel) => "Name\\r";\r\n    public string GetChannelFrequencyCommand(int channel) => "Frequency\\r";\r\n    // ... autres commandes\r\n    \r\n    public string SetChannelFrequencyCommand(int channel, int frequency) => $"Frequency {frequency}\\r";\r\n    public string SetChannelNameCommand(int channel, string name) => $"Name {name}\\r";\r\n    // ... autres commandes de configuration\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"gestion-des-r\xe9ponses",children:"Gestion des R\xe9ponses"}),"\n",(0,s.jsx)(n.p,{children:"Le service UDP impl\xe9mente un syst\xe8me d'\xe9coute asynchrone qui associe les r\xe9ponses re\xe7ues aux commandes envoy\xe9es:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task ListenForResponsesAsync()\r\n{\r\n    while (true)\r\n    {\r\n        var result = await _standardUdpClient.ReceiveAsync();\r\n        var response = Encoding.UTF8.GetString(result.Buffer);\r\n        var ip = result.RemoteEndPoint.Address.ToString();\r\n        var port = result.RemoteEndPoint.Port;\r\n        \r\n        // Associer la r\xe9ponse \xe0 la commande correspondante\r\n        string key = $"{ip}:{port}";\r\n        if (_responseTasks.TryRemove(key, out var tcs))\r\n        {\r\n            tcs.SetResult(response);\r\n        }\r\n        // ... gestion des cas alternatifs\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"communication-shure",children:"Communication Shure"}),"\n",(0,s.jsx)(n.p,{children:"Les appareils Shure utilisent un protocole TCP pour la communication de contr\xf4le :"}),"\n",(0,s.jsx)(n.h4,{id:"caract\xe9ristiques-du-protocole",children:"Caract\xe9ristiques du Protocole"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Protocole"})," : TCP"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port"})," : 2202"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Format des commandes"})," : Balises XML-like"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"R\xe9ponses"})," : Format similaire aux commandes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timeout"})," : 5 secondes par d\xe9faut"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"format-des-commandes",children:"Format des Commandes"}),"\n",(0,s.jsx)(n.p,{children:"Les commandes Shure suivent un format sp\xe9cifique avec des balises XML-like :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Exemples de commandes Shure\r\n"< GET MODEL >"                    // Obtenir le mod\xe8le\r\n"< GET NET_SETTINGS sc >"          // Obtenir les param\xe8tres r\xe9seau\r\n"< GET {channel} CHAN_NAME >"      // Obtenir le nom du canal\r\n"< GET {channel} FREQUENCY >"      // Obtenir la fr\xe9quence\r\n"< SET {channel} FREQUENCY {freq} >" // D\xe9finir la fr\xe9quence\r\n"< SET {channel} CHAN_NAME {name} >" // D\xe9finir le nom du canal\n'})}),"\n",(0,s.jsx)(n.h4,{id:"commandes-principales",children:"Commandes Principales"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Lecture"})," :"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET MODEL"})," : Informations sur le mod\xe8le"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET NET_SETTINGS"})," : Configuration r\xe9seau"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET CHAN_NAME"})," : Nom du canal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET FREQUENCY"})," : Fr\xe9quence actuelle"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET RX_RF_LVL"})," : Niveau RF"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET AUDIO_MUTE"})," : \xc9tat du mute"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\xc9criture"})," :"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SET FREQUENCY"})," : D\xe9finir la fr\xe9quence"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SET CHAN_NAME"})," : D\xe9finir le nom du canal"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SET AUDIO_MUTE"})," : Activer/d\xe9sactiver le mute"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"gestion-des-r\xe9ponses-shure",children:"Gestion des R\xe9ponses Shure"}),"\n",(0,s.jsx)(n.p,{children:"Les r\xe9ponses Shure suivent le m\xeame format que les commandes :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"< REP MODEL ULXD4D >\r\n< REP NET_SETTINGS SC AUTO 192.168.000.036 255.255.255.000 192.168.000.001 00:0E:DD:49:11:C9 >\r\n< REP 1 CHAN_NAME {Mic1} >\n"})}),"\n",(0,s.jsx)(n.h4,{id:"impl\xe9mentation",children:"Impl\xe9mentation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ShureCommandSet : IDeviceCommandSet\r\n{\r\n    public string GetModelCommand() => "< GET MODEL >";\r\n    public string GetSerialCommand() => "< GET NET_SETTINGS sc >";\r\n    public string GetChannelNameCommand(int channel) => $"< GET {channel} CHAN_NAME >";\r\n    public string GetChannelFrequencyCommand(int channel) => $"< GET {channel} FREQUENCY >";\r\n    \r\n    public string SetChannelFrequencyCommand(int channel, int frequency) => \r\n        $"< SET {channel} FREQUENCY {frequency} >";\r\n    public string SetChannelNameCommand(int channel, string name) => \r\n        $"< SET {channel} CHAN_NAME {{{name}}} >";\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"communication-tcp",children:"Communication TCP"}),"\n",(0,s.jsx)(n.p,{children:"Bien que la plupart des appareils utilisent UDP, certains mod\xe8les n\xe9cessitent des connexions TCP pour des communications plus fiables:"}),"\n",(0,s.jsx)(n.h3,{id:"cas-dutilisation-tcp",children:"Cas d'utilisation TCP"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Transfert de donn\xe9es volumineuses (mises \xe0 jour de firmware)"}),"\n",(0,s.jsx)(n.li,{children:"Communications n\xe9cessitant une fiabilit\xe9 garantie"}),"\n",(0,s.jsx)(n.li,{children:"Appareils avec API de contr\xf4le complexes"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"impl\xe9mentation-tcp",children:"Impl\xe9mentation TCP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class TCPCommunicationService\r\n{\r\n    public async Task<string> SendCommandAsync(string ip, int port, string command, int timeout = 5000)\r\n    {\r\n        using (var client = new TcpClient())\r\n        {\r\n            // \xc9tablissement de la connexion avec timeout\r\n            var connectTask = client.ConnectAsync(ip, port);\r\n            await Task.WhenAny(connectTask, Task.Delay(timeout));\r\n            \r\n            if (!client.Connected)\r\n            {\r\n                throw new TimeoutException($"Connection to {ip}:{port} timed out");\r\n            }\r\n            \r\n            // Envoi de la commande\r\n            var stream = client.GetStream();\r\n            var data = Encoding.UTF8.GetBytes(command);\r\n            await stream.WriteAsync(data, 0, data.Length);\r\n            \r\n            // Lecture de la r\xe9ponse\r\n            // ... code pour lire la r\xe9ponse\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"communication-httprest",children:"Communication HTTP/REST"}),"\n",(0,s.jsx)(n.p,{children:"Pour les appareils modernes qui exposent des API REST, RF Go utilise des services de communication HTTP:"}),"\n",(0,s.jsx)(n.h3,{id:"mod\xe8les-support\xe9s",children:"Mod\xe8les support\xe9s"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sennheiser EWDX-EM2"}),"\n",(0,s.jsx)(n.li,{children:"Certains appareils Shure plus r\xe9cents"}),"\n",(0,s.jsx)(n.li,{children:"Syst\xe8mes avec interfaces de gestion web"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"impl\xe9mentation-1",children:"Impl\xe9mentation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class RESTCommunicationService\r\n{\r\n    private readonly HttpClient _httpClient;\r\n    \r\n    public RESTCommunicationService()\r\n    {\r\n        _httpClient = new HttpClient();\r\n        _httpClient.Timeout = TimeSpan.FromSeconds(5);\r\n    }\r\n    \r\n    public async Task<string> GetAsync(string url)\r\n    {\r\n        var response = await _httpClient.GetAsync(url);\r\n        response.EnsureSuccessStatusCode();\r\n        return await response.Content.ReadAsStringAsync();\r\n    }\r\n    \r\n    public async Task<bool> PostAsync(string url, string content)\r\n    {\r\n        var stringContent = new StringContent(content, Encoding.UTF8, "application/json");\r\n        var response = await _httpClient.PostAsync(url, stringContent);\r\n        return response.IsSuccessStatusCode;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"gestion-des-appareils-hors-ligne",children:"Gestion des Appareils Hors Ligne"}),"\n",(0,s.jsx)(n.p,{children:"RF Go impl\xe9mente un syst\xe8me de d\xe9tection des appareils hors ligne et de reconnexion automatique:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public async Task CheckDeviceSync(object state)\r\n{\r\n    try\r\n    {\r\n        var devicesCopy = _devicesViewModel.Devices.ToList();\r\n        foreach (var device in devicesCopy)\r\n        {\r\n            if (!device.IsSynced)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var handler = GetAppropriateHandler(device);\r\n            var deviceInfo = new DeviceDiscoveredEventArgs\r\n            {\r\n                // ... informations de l'appareil\r\n            };\r\n\r\n            var (IsEqual, IsNotResponding) = await handler.IsDevicePendingSync(deviceInfo);\r\n            \r\n            // Mise \xe0 jour de l'\xe9tat de l'appareil\r\n            if (IsNotResponding)\r\n            {\r\n                device.IsOnline = false;\r\n            }\r\n            else\r\n            {\r\n                device.IsOnline = true;\r\n                device.PendingSync = !IsEqual;\r\n            }\r\n        }\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Debug.WriteLine($\"Error checking device sync: {ex.Message}\");\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bonnes-pratiques",children:"Bonnes Pratiques"}),"\n",(0,s.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Utilisation de pools de connexions pour \xe9viter la cr\xe9ation r\xe9p\xe9t\xe9e"}),"\n",(0,s.jsx)(n.li,{children:"Timeouts appropri\xe9s pour \xe9viter les blocages"}),"\n",(0,s.jsx)(n.li,{children:"Reconnexion automatique en cas de d\xe9connexion"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"s\xe9curit\xe9",children:"S\xe9curit\xe9"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Validation des donn\xe9es re\xe7ues"}),"\n",(0,s.jsx)(n.li,{children:"Cl\xf4ture appropri\xe9e des connexions"}),"\n",(0,s.jsx)(n.li,{children:"Protection contre les attaques par d\xe9ni de service"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"fiabilit\xe9",children:"Fiabilit\xe9"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"M\xe9canismes de retry pour les communications \xe9chou\xe9es"}),"\n",(0,s.jsx)(n.li,{children:"Gestion des cas de non-r\xe9ponse"}),"\n",(0,s.jsx)(n.li,{children:"Logging des erreurs de communication"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);