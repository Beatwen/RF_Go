"use strict";(self.webpackChunkrf_go_docs=self.webpackChunkrf_go_docs||[]).push([[6640],{7312:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"uml-analysis/sequence-diagrams","title":"Diagrammes de S\xe9quence - Interactions Syst\xe8me","description":"Les diagrammes de s\xe9quence de RF.Go illustrent les interactions temporelles complexes entre les diff\xe9rents composants du syst\xe8me. Cette mod\xe9lisation d\xe9taille les flux de communication critiques, depuis la d\xe9couverte des appareils jusqu\'\xe0 la synchronisation finale.","source":"@site/docs/uml-analysis/sequence-diagrams.md","sourceDirName":"uml-analysis","slug":"/uml-analysis/sequence-diagrams","permalink":"/RF_Go/docs/uml-analysis/sequence-diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/Beatwen/RF_Go/tree/main/docs/uml-analysis/sequence-diagrams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Use cases","permalink":"/RF_Go/docs/uml-analysis/use-cases"},"next":{"title":"Diagrammes d\'Activit\xe9s - Processus et Algorithmes","permalink":"/RF_Go/docs/uml-analysis/activity-diagrams"}}');var s=r(4848),t=r(8453);const a={},c="Diagrammes de S\xe9quence - Interactions Syst\xe8me",o={},l=[{value:"1. S\xe9quence Compl\xe8te : Calcul et Synchronisation RF",id:"1-s\xe9quence-compl\xe8te--calcul-et-synchronisation-rf",level:2},{value:"Sc\xe9nario Principal de Calcul des Fr\xe9quences",id:"sc\xe9nario-principal-de-calcul-des-fr\xe9quences",level:3},{value:"2. Discovery R\xe9seau Multi-Protocoles",id:"2-discovery-r\xe9seau-multi-protocoles",level:2},{value:"Orchestration des Handlers de D\xe9couverte",id:"orchestration-des-handlers-de-d\xe9couverte",level:3},{value:"3. Authentification et Gestion des Licences",id:"3-authentification-et-gestion-des-licences",level:2},{value:"Processus Complet d&#39;Authentification",id:"processus-complet-dauthentification",level:3},{value:"4. Synchronisation Bidirectionnelle des Appareils",id:"4-synchronisation-bidirectionnelle-des-appareils",level:2},{value:"Magic Sync - Synchronisation Complexe",id:"magic-sync---synchronisation-complexe",level:3},{value:"5. Gestion des Erreurs et Recovery",id:"5-gestion-des-erreurs-et-recovery",level:2},{value:"Strat\xe9gies de R\xe9cup\xe9ration Automatique",id:"strat\xe9gies-de-r\xe9cup\xe9ration-automatique",level:3},{value:"6. Performance et Optimisation",id:"6-performance-et-optimisation",level:2},{value:"M\xe9triques des Interactions",id:"m\xe9triques-des-interactions",level:3},{value:"Patterns d&#39;Interaction Identifi\xe9s",id:"patterns-dinteraction-identifi\xe9s",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"diagrammes-de-s\xe9quence---interactions-syst\xe8me",children:"Diagrammes de S\xe9quence - Interactions Syst\xe8me"})}),"\n",(0,s.jsxs)(n.p,{children:["Les diagrammes de s\xe9quence de RF.Go illustrent les ",(0,s.jsx)(n.strong,{children:"interactions temporelles complexes"})," entre les diff\xe9rents composants du syst\xe8me. Cette mod\xe9lisation d\xe9taille les flux de communication critiques, depuis la d\xe9couverte des appareils jusqu'\xe0 la synchronisation finale."]}),"\n",(0,s.jsx)(n.h2,{id:"1-s\xe9quence-compl\xe8te--calcul-et-synchronisation-rf",children:"1. S\xe9quence Compl\xe8te : Calcul et Synchronisation RF"}),"\n",(0,s.jsx)(n.h3,{id:"sc\xe9nario-principal-de-calcul-des-fr\xe9quences",children:"Sc\xe9nario Principal de Calcul des Fr\xe9quences"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant U as Utilisateur\r\n    participant VM as DevicesViewModel\r\n    participant FS as FrequencyService\r\n    participant FD as FrequencyData\r\n    participant DS as DiscoveryService\r\n    participant DH as DeviceHandler\r\n    participant DB as Database\r\n    participant UI as Interface\r\n\r\n    Note over U,UI: Phase 1: Initialisation et D\xe9couverte\r\n    U->>VM: D\xe9marrer Discovery\r\n    VM->>DS: StartDiscovery()\r\n    \r\n    DS->>DH: InitializeHandlers()\r\n    DH--\x3e>DS: Handlers Ready\r\n    DS->>DH: TriggerDiscovery()\r\n    \r\n    loop Discovery Multi-Protocoles\r\n        DH->>DH: mDNS Discovery\r\n        DH->>DH: SLP Discovery\r\n        DH->>DH: UDP Discovery\r\n        DH--\x3e>DS: DeviceDiscovered Events\r\n    end\r\n    \r\n    DS--\x3e>VM: DiscoveredDevices Updated\r\n    VM--\x3e>UI: Refresh Device List\r\n    \r\n    Note over U,UI: Phase 2: Configuration et Import\r\n    U->>VM: S\xe9lectionner Appareils\r\n    VM->>DB: SaveSelectedDevices()\r\n    DB--\x3e>VM: Devices Saved\r\n    \r\n    Note over U,UI: Phase 3: Calcul des Fr\xe9quences\r\n    U->>VM: Calculer Plan RF\r\n    VM->>FS: CalculateFrequencyPlan()\r\n    \r\n    FS->>FD: InitializeFrequencyData()\r\n    FD--\x3e>FS: Data Initialized\r\n    \r\n    FS->>FS: GroupDevicesByTimePeriod()\r\n    \r\n    loop Pour Chaque Groupe Temporel\r\n        FS->>FS: ProcessLockedFrequencies()\r\n        FS->>FS: ProcessUnlockedFrequencies()\r\n        \r\n        loop Pour Chaque Canal\r\n            FS->>FS: GenerateRandomFrequency()\r\n            FS->>FD: CheckFrequencyAvailability()\r\n            FD--\x3e>FS: Availability Status\r\n            \r\n            alt Fr\xe9quence Disponible\r\n                FS->>FD: CalculateAllIntermodulations()\r\n                FD->>FD: Calculate 2Tx 3rd, 5th, 7th Order\r\n                FD->>FD: Calculate 3Tx 3rd Order\r\n                FD--\x3e>FS: Intermodulations Calculated\r\n                FS->>FD: AddUsedFrequency()\r\n            else Fr\xe9quence Occup\xe9e\r\n                FS->>FS: RetryWithNewFrequency()\r\n            end\r\n        end\r\n    end\r\n    \r\n    FS--\x3e>VM: Calculation Complete\r\n    VM->>DB: SaveCalculationResults()\r\n    DB--\x3e>VM: Results Saved\r\n    VM--\x3e>UI: Update Frequency Display\r\n    \r\n    Note over U,UI: Phase 4: Synchronisation Appareils\r\n    U->>VM: Magic Sync To Devices\r\n    VM->>DS: SyncAllDevices()\r\n    \r\n    loop Pour Chaque Appareil\r\n        DS->>DH: SyncDevice(device, frequencies)\r\n        DH->>DH: BuildCommands()\r\n        DH->>DH: SendTCPCommands()\r\n        \r\n        alt Sync R\xe9ussi\r\n            DH--\x3e>DS: SyncSuccess\r\n            DS->>DB: UpdateDeviceStatus(Synchronized)\r\n        else Sync \xc9chou\xe9\r\n            DH--\x3e>DS: SyncFailed\r\n            DS->>DB: UpdateDeviceStatus(Error)\r\n        end\r\n    end\r\n    \r\n    DS--\x3e>VM: Sync Results\r\n    VM--\x3e>UI: Update Device Status\r\n    VM--\x3e>U: Synchronisation Termin\xe9e"}),"\n",(0,s.jsx)(n.h2,{id:"2-discovery-r\xe9seau-multi-protocoles",children:"2. Discovery R\xe9seau Multi-Protocoles"}),"\n",(0,s.jsx)(n.h3,{id:"orchestration-des-handlers-de-d\xe9couverte",children:"Orchestration des Handlers de D\xe9couverte"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant DS as DiscoveryService\r\n    participant SH as SennheiserHandler\r\n    participant SHU as ShureHandler\r\n    participant GH as GenericHandler\r\n    participant N as Network\r\n    participant VM as ViewModel\r\n\r\n    Note over DS,VM: Initialisation Discovery Service\r\n    DS->>SH: Initialize()\r\n    DS->>SHU: Initialize()  \r\n    DS->>GH: Initialize()\r\n    \r\n    SH--\x3e>DS: mDNS Handler Ready\r\n    SHU--\x3e>DS: SLP Handler Ready\r\n    GH--\x3e>DS: UDP Handler Ready\r\n    \r\n    Note over DS,VM: D\xe9marrage Discovery Parall\xe8le\r\n    par Discovery mDNS (Sennheiser)\r\n        DS->>SH: StartDiscovery()\r\n        SH->>N: Subscribe to _sennheiser._tcp\r\n        N--\x3e>SH: mDNS Response\r\n        SH->>SH: ParseSennheiserDevice()\r\n        SH--\x3e>DS: DeviceDiscovered(sennheiser_device)\r\n    and Discovery SLP (Shure)\r\n        DS->>SHU: StartDiscovery()\r\n        SHU->>N: Multicast to 239.255.254.253:8427\r\n        N--\x3e>SHU: SLP Response\r\n        SHU->>SHU: ParseShureDevice()\r\n        SHU--\x3e>DS: DeviceDiscovered(shure_device)\r\n    and Discovery UDP (Generic)\r\n        DS->>GH: StartDiscovery()\r\n        GH->>N: UDP Broadcast Scan\r\n        N--\x3e>GH: UDP Response\r\n        GH->>GH: ParseGenericDevice()\r\n        GH--\x3e>DS: DeviceDiscovered(generic_device)\r\n    end\r\n    \r\n    Note over DS,VM: Agr\xe9gation et D\xe9duplication\r\n    DS->>DS: DeduplicateDevices()\r\n    DS->>DS: ValidateDevices()\r\n    \r\n    loop Pour Chaque Appareil D\xe9couvert\r\n        DS->>DS: FetchDetailedInfo()\r\n        alt Fetch R\xe9ussi\r\n            DS--\x3e>VM: DeviceAdded Event\r\n        else Fetch \xc9chou\xe9\r\n            DS->>DS: RetryFetch()\r\n        end\r\n    end\r\n    \r\n    DS--\x3e>VM: Discovery Complete"}),"\n",(0,s.jsx)(n.h2,{id:"3-authentification-et-gestion-des-licences",children:"3. Authentification et Gestion des Licences"}),"\n",(0,s.jsx)(n.h3,{id:"processus-complet-dauthentification",children:"Processus Complet d'Authentification"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant U as Utilisateur\r\n    participant AVM as AuthViewModel\r\n    participant AS as AuthService\r\n    participant LS as LicenseService\r\n    participant SS as StorageService\r\n    participant API as License API\r\n    participant DB as Database\r\n\r\n    Note over U,DB: Phase 1: Authentification Utilisateur\r\n    U->>AVM: Login(email, password)\r\n    AVM->>AS: AuthenticateUser(credentials)\r\n    \r\n    AS->>SS: CheckStoredCredentials()\r\n    alt Credentials Cached & Valid\r\n        SS--\x3e>AS: Cached Credentials Valid\r\n        AS--\x3e>AVM: Authentication Success\r\n    else Credentials Not Cached or Invalid\r\n        AS->>API: ValidateCredentials(email, password)\r\n        API->>API: Hash & Compare Password\r\n        \r\n        alt Credentials Valid\r\n            API--\x3e>AS: User Validated + JWT Token\r\n            AS->>SS: StoreCachedCredentials()\r\n            AS--\x3e>AVM: Authentication Success\r\n        else Credentials Invalid\r\n            API--\x3e>AS: Authentication Failed\r\n            AS--\x3e>AVM: Authentication Failed\r\n            AVM--\x3e>U: Show Error Message\r\n        end\r\n    end\r\n    \r\n    Note over U,DB: Phase 2: Validation Licence\r\n    AVM->>LS: ValidateLicense()\r\n    LS->>SS: GetStoredLicense()\r\n    \r\n    alt License Stored & Valid\r\n        SS--\x3e>LS: Valid License Found\r\n        LS--\x3e>AVM: License Valid\r\n    else No License or Expired\r\n        LS->>API: CheckLicenseStatus(user_id)\r\n        \r\n        alt License Available\r\n            API--\x3e>LS: License Details\r\n            LS->>SS: StoreLicense()\r\n            LS--\x3e>AVM: License Activated\r\n        else No Valid License\r\n            LS--\x3e>AVM: License Required\r\n            AVM--\x3e>U: Request License Key\r\n            \r\n            U->>AVM: EnterLicenseKey(key)\r\n            AVM->>LS: ActivateLicense(key)\r\n            LS->>API: ValidateLicenseKey(key)\r\n            \r\n            alt License Key Valid\r\n                API--\x3e>LS: License Activated\r\n                LS->>SS: StoreLicense()\r\n                LS->>DB: UpdateUserLicense()\r\n                LS--\x3e>AVM: License Success\r\n                AVM--\x3e>U: License Activated\r\n            else License Key Invalid\r\n                API--\x3e>LS: Invalid License\r\n                LS--\x3e>AVM: License Invalid\r\n                AVM--\x3e>U: Invalid License Key\r\n            end\r\n        end\r\n    end\r\n    \r\n    Note over U,DB: Phase 3: Initialisation Session\r\n    AVM->>DB: CreateUserSession()\r\n    AVM->>AS: InitializeServices()\r\n    AS--\x3e>AVM: Services Ready\r\n    AVM--\x3e>U: Redirect to Main App"}),"\n",(0,s.jsx)(n.h2,{id:"4-synchronisation-bidirectionnelle-des-appareils",children:"4. Synchronisation Bidirectionnelle des Appareils"}),"\n",(0,s.jsx)(n.h3,{id:"magic-sync---synchronisation-complexe",children:"Magic Sync - Synchronisation Complexe"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant U as Utilisateur\r\n    participant VM as DevicesViewModel\r\n    participant MS as MappingService\r\n    participant DH as DeviceHandler\r\n    participant D as Device (Network)\r\n    participant DB as Database\r\n\r\n    Note over U,DB: Phase 1: Pr\xe9paration Synchronisation\r\n    U->>VM: Magic Sync To Devices\r\n    VM->>VM: ValidateSelectedDevices()\r\n    VM->>MS: PrepareSyncOperations()\r\n    \r\n    MS->>DB: GetDeviceConfigurations()\r\n    DB--\x3e>MS: Device Configs\r\n    MS->>MS: BuildSyncCommands()\r\n    MS--\x3e>VM: Sync Operations Ready\r\n    \r\n    Note over U,DB: Phase 2: Synchronisation Parall\xe8le\r\n    par Device 1 Sync\r\n        VM->>DH: SyncDevice(device1)\r\n        DH->>DH: GetHandler(Sennheiser)\r\n        DH->>D: TCP Connect(device1_ip)\r\n        \r\n        alt Connection Success\r\n            DH->>D: Send SET_FREQUENCY Command\r\n            D--\x3e>DH: ACK Response\r\n            DH->>D: Send SET_NAME Command  \r\n            D--\x3e>DH: ACK Response\r\n            DH->>D: Send STORE_CONFIG Command\r\n            D--\x3e>DH: ACK Response\r\n            DH--\x3e>VM: Device1 Sync Success\r\n        else Connection Failed\r\n            DH--\x3e>VM: Device1 Sync Failed\r\n        end\r\n    and Device 2 Sync\r\n        VM->>DH: SyncDevice(device2)\r\n        DH->>DH: GetHandler(Shure)\r\n        DH->>D: TCP Connect(device2_ip)\r\n        \r\n        alt Connection Success\r\n            DH->>D: Send ULXD Frequency Command\r\n            D--\x3e>DH: Command Response\r\n            DH->>D: Send ULXD Name Command\r\n            D--\x3e>DH: Command Response\r\n            DH--\x3e>VM: Device2 Sync Success\r\n        else Connection Failed\r\n            DH--\x3e>VM: Device2 Sync Failed\r\n        end\r\n    end\r\n    \r\n    Note over U,DB: Phase 3: Mise \xe0 Jour \xc9tats\r\n    VM->>DB: UpdateDeviceStates(sync_results)\r\n    DB--\x3e>VM: States Updated\r\n    \r\n    VM->>MS: LogSyncResults()\r\n    MS->>DB: StoreSyncLog()\r\n    \r\n    VM--\x3e>U: Sync Complete Report\r\n    \r\n    Note over U,DB: Phase 4: Synchronisation Inverse (From Device)\r\n    VM->>DH: CheckDeviceChanges()\r\n    \r\n    loop Pour Chaque Appareil\r\n        DH->>D: Fetch Current Config\r\n        D--\x3e>DH: Device Config\r\n        DH->>MS: CompareWithLocal(config)\r\n        \r\n        alt Differences Detected\r\n            MS--\x3e>VM: Changes Detected\r\n            VM--\x3e>U: Propose Sync From Device\r\n            U->>VM: Accept/Reject Changes\r\n            \r\n            alt Accept Changes\r\n                VM->>DB: UpdateLocalConfig()\r\n                DB--\x3e>VM: Local Updated\r\n            else Reject Changes\r\n                VM->>DH: Overwrite Device Config\r\n                DH->>D: Send Corrected Config\r\n            end\r\n        end\r\n    end"}),"\n",(0,s.jsx)(n.h2,{id:"5-gestion-des-erreurs-et-recovery",children:"5. Gestion des Erreurs et Recovery"}),"\n",(0,s.jsx)(n.h3,{id:"strat\xe9gies-de-r\xe9cup\xe9ration-automatique",children:"Strat\xe9gies de R\xe9cup\xe9ration Automatique"}),"\n",(0,s.jsx)(n.mermaid,{value:'sequenceDiagram\r\n    participant S as System\r\n    participant EH as ErrorHandler\r\n    participant L as Logger\r\n    participant R as Recovery\r\n    participant N as Notification\r\n    participant U as User\r\n\r\n    Note over S,U: D\xe9tection et Classification d\'Erreur\r\n    S->>EH: Exception Thrown\r\n    EH->>EH: ClassifyError()\r\n    \r\n    alt Network Error\r\n        EH->>EH: Analyze Network Issue\r\n        EH->>R: InitiateNetworkRecovery()\r\n        \r\n        R->>R: CheckConnectivity()\r\n        alt Network Available\r\n            R->>R: RetryOperation()\r\n            R--\x3e>EH: Recovery Success\r\n            EH--\x3e>S: Resume Operation\r\n        else Network Unavailable\r\n            R->>R: EnableOfflineMode()\r\n            R--\x3e>EH: Offline Mode Activated\r\n            EH->>N: NotifyUser("Offline Mode")\r\n            N--\x3e>U: Offline Notification\r\n        end\r\n        \r\n    else Database Error\r\n        EH->>EH: Analyze Database Issue\r\n        EH->>R: InitiateDatabaseRecovery()\r\n        \r\n        R->>R: CheckDatabaseIntegrity()\r\n        alt Database Corrupt\r\n            R->>R: RestoreFromBackup()\r\n            alt Backup Available\r\n                R--\x3e>EH: Database Restored\r\n                EH--\x3e>S: Resume Operation\r\n            else No Backup\r\n                R->>R: InitializeNewDatabase()\r\n                R--\x3e>EH: New Database Created\r\n                EH->>N: NotifyUser("Data Reset")\r\n                N--\x3e>U: Data Loss Warning\r\n            end\r\n        else Database Locked\r\n            R->>R: WaitAndRetry()\r\n            R--\x3e>EH: Database Access Restored\r\n        end\r\n        \r\n    else Business Logic Error\r\n        EH->>EH: AnalyzeBusinessError()\r\n        EH->>L: LogBusinessError()\r\n        EH->>N: NotifyUser("Business Error")\r\n        N--\x3e>U: Error Details + Suggestions\r\n        \r\n    else Unknown Error\r\n        EH->>L: LogUnknownError()\r\n        EH->>N: NotifyUser("Unexpected Error")\r\n        N--\x3e>U: Generic Error Message\r\n        EH->>R: GracefulDegradation()\r\n        R--\x3e>EH: Fallback Mode Activated\r\n    end\r\n    \r\n    Note over S,U: Logging et Monitoring\r\n    EH->>L: LogRecoveryAction()\r\n    L->>L: EnrichWithContext()\r\n    L->>L: PersistLog()\r\n    \r\n    alt Critical Error\r\n        L->>N: TriggerAlert()\r\n        N--\x3e>U: Critical Error Alert\r\n    end'}),"\n",(0,s.jsx)(n.h2,{id:"6-performance-et-optimisation",children:"6. Performance et Optimisation"}),"\n",(0,s.jsx)(n.h3,{id:"m\xe9triques-des-interactions",children:"M\xe9triques des Interactions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"S\xe9quence"}),(0,s.jsx)(n.th,{children:"Acteurs"}),(0,s.jsx)(n.th,{children:"Temps Moyen"}),(0,s.jsx)(n.th,{children:"Temps Critique"}),(0,s.jsx)(n.th,{children:"Points d'Optimisation"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Discovery Compl\xe8te"})}),(0,s.jsx)(n.td,{children:"5-8 composants"}),(0,s.jsx)(n.td,{children:"15-30s"}),(0,s.jsx)(n.td,{children:"60s"}),(0,s.jsx)(n.td,{children:"Cache DNS, Timeouts"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Calcul RF Global"})}),(0,s.jsx)(n.td,{children:"3-4 composants"}),(0,s.jsx)(n.td,{children:"3-8s"}),(0,s.jsx)(n.td,{children:"15s"}),(0,s.jsx)(n.td,{children:"Algorithmes parall\xe8les"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Sync Single Device"})}),(0,s.jsx)(n.td,{children:"2-3 composants"}),(0,s.jsx)(n.td,{children:"1-2s"}),(0,s.jsx)(n.td,{children:"5s"}),(0,s.jsx)(n.td,{children:"Batch commands"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Auth + License"})}),(0,s.jsx)(n.td,{children:"4-6 composants"}),(0,s.jsx)(n.td,{children:"2-5s"}),(0,s.jsx)(n.td,{children:"10s"}),(0,s.jsx)(n.td,{children:"Token caching"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Error Recovery"})}),(0,s.jsx)(n.td,{children:"3-5 composants"}),(0,s.jsx)(n.td,{children:"1-3s"}),(0,s.jsx)(n.td,{children:"8s"}),(0,s.jsx)(n.td,{children:"Predictive recovery"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"patterns-dinteraction-identifi\xe9s",children:"Patterns d'Interaction Identifi\xe9s"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request-Response Asynchrone"})," : Utilis\xe9 pour les commandes r\xe9seau"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Observer Pattern"})," : Pour les notifications d'\xe9tat"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command Pattern"})," : Pour les op\xe9rations de synchronisation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circuit Breaker"})," : Pour la gestion des pannes r\xe9seau"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Saga Pattern"})," : Pour les transactions complexes multi-\xe9tapes"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Ces diagrammes de s\xe9quence r\xe9v\xe8lent la sophistication des interactions dans RF.Go et d\xe9montrent une architecture robuste capable de g\xe9rer des sc\xe9narios complexes avec une gestion d'erreur appropri\xe9e."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);