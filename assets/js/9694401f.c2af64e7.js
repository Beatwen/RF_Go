"use strict";(self.webpackChunkrf_go_docs=self.webpackChunkrf_go_docs||[]).push([[1060],{2281:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"architecture/class-diagram","title":"Diagramme de Classes - Architecture R\xe9elle","description":"Vue d\'ensemble","source":"@site/docs/architecture/class-diagram.md","sourceDirName":"architecture","slug":"/architecture/class-diagram","permalink":"/RF_Go/docs/architecture/class-diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/Beatwen/RF_Go/tree/main/docs/architecture/class-diagram.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Flux de Donn\xe9es","permalink":"/RF_Go/docs/architecture/data-flow"},"next":{"title":"Use Cases","permalink":"/RF_Go/docs/architecture/use-cases"}}');var s=r(4848),t=r(8453);const a={},c="Diagramme de Classes - Architecture R\xe9elle",o={},l=[{value:"Vue d&#39;ensemble",id:"vue-densemble",level:2},{value:"Analyse des Corrections Apport\xe9es",id:"analyse-des-corrections-apport\xe9es",level:2},{value:"\u2705 <strong>Mod\xe8les Corrig\xe9s</strong>",id:"-mod\xe8les-corrig\xe9s",level:3},{value:"\u2705 <strong>Services Corrig\xe9s</strong>",id:"-services-corrig\xe9s",level:3},{value:"\u2705 <strong>Handlers Corrig\xe9s</strong>",id:"-handlers-corrig\xe9s",level:3},{value:"\u2705 <strong>Relations Corrig\xe9es</strong>",id:"-relations-corrig\xe9es",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"diagramme-de-classes---architecture-r\xe9elle",children:"Diagramme de Classes - Architecture R\xe9elle"})}),"\n",(0,s.jsx)(n.h2,{id:"vue-densemble",children:"Vue d'ensemble"}),"\n",(0,s.jsx)(n.p,{children:"Ce diagramme pr\xe9sente la structure r\xe9elle des classes de RF.Go bas\xe9e sur l'analyse du code source, incluant les mod\xe8les de donn\xe9es, les services, les handlers et les composants r\xe9seau."}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\r\n    %% Mod\xe8les de Base de Donn\xe9es (R\xe9els)\r\n    class RFDevice {\r\n        +int ID\r\n        +string SerialNumber\r\n        +bool Selected\r\n        +string Brand\r\n        +string Model\r\n        +string Name\r\n        +string Frequency\r\n        +List~int~ Range\r\n        +string RangeSerialized\r\n        +List~RFChannel~ Channels\r\n        +string ChannelsSerialized\r\n        +string IpAddress\r\n        +string Calendar\r\n        +string Stage\r\n        +bool IsSynced\r\n        +bool IsOnline\r\n        +bool PendingSync\r\n        +int NumberOfChannels\r\n        +int GroupID\r\n        +RFGroup Group\r\n        +int Step\r\n        +Clone() RFDevice\r\n        +Validate() (bool IsValid, string ErrorMessage)\r\n        +OnPropertyChanged(string propertyName)\r\n    }\r\n\r\n    class RFChannel {\r\n        +int ID\r\n        +bool Selected\r\n        +int chanNumber\r\n        +int Frequency\r\n        +List~int~ Range\r\n        +string RangeSerialized\r\n        +int Step\r\n        +int SelfSpacing\r\n        +int ThirdOrderSpacing\r\n        +bool ThirdOrderSpacingEnable\r\n        +int FifthOrderSpacing\r\n        +bool FifthOrderSpacingEnable\r\n        +int SeventhOrderSpacing\r\n        +bool SeventhOrderSpacingEnable\r\n        +int NinthOrderSpacing\r\n        +bool NinthOrderSpacingEnable\r\n        +int ThirdOrderSpacing3Tx\r\n        +bool ThirdOrderSpacing3TxEnable\r\n        +bool Checked\r\n        +string ChannelName\r\n        +bool IsLocked\r\n        +SetRandomFrequency(HashSet~int~ usedFreqs, HashSet~int~ intermod3rd, HashSet~int~ intermod5th, HashSet~int~ intermod7th, HashSet~int~ intermod9th, HashSet~int~ intermod3tx, List excludedRanges)\r\n        +GetRandomFrequency(int min, int max, int step) int\r\n        +LoopForFreeFrequency(HashSet~int~ usedFreqs, HashSet~int~ intermodulations, List excludedRanges) bool\r\n        +CheckFreeFrequency(int frequency, HashSet~int~ usedFreqs, HashSet~int~ intermodulations) bool\r\n        +SpacingEnable() bool\r\n        +CalculAllIntermod(int frequency, HashSet~int~ usedFreqs) (HashSet~int~, HashSet~int~, HashSet~int~, HashSet~int~, HashSet~int~)\r\n        +Clone() RFChannel\r\n    }\r\n\r\n    class RFGroup {\r\n        +int ID\r\n        +string Name\r\n        +IReadOnlyList~TimePeriod~ TimePeriods\r\n        +string TimePeriodsSerialized\r\n        +IReadOnlyList~RFDevice~ Devices\r\n        +AddTimePeriod(TimePeriod period)\r\n        +DeleteTimePeriod(TimePeriod period)\r\n        +AddDevice(RFDevice device)\r\n        +RemoveDevice(RFDevice device)\r\n        +Clone() RFGroup\r\n    }\r\n\r\n    class TimePeriod {\r\n        +int ID\r\n        +string Name\r\n        +DateTime StartTime\r\n        +DateTime EndTime\r\n        +TimeSpan? StartTimeSpan\r\n        +TimeSpan? EndTimeSpan\r\n        +DateRange Range\r\n        +UpdateRange()\r\n        +ToString() string\r\n    }\r\n\r\n    class ExclusionChannel {\r\n        +int ID\r\n        +string Country\r\n        +int ChannelNumber\r\n        +float StartFrequency\r\n        +float EndFrequency\r\n        +string Type\r\n        +bool Exclude\r\n        +float ChannelWidth\r\n    }\r\n\r\n    class CountryChannelConfig {\r\n        +int ID\r\n        +string Country\r\n        +int ChannelWidth\r\n        +int StartChannel\r\n        +int EndChannel\r\n        +string DefaultFrequencyRange\r\n    }\r\n\r\n    class FrequencyData {\r\n        +int ID\r\n        +HashSet~int~ UsedFrequencies\r\n        +string UsedFrequenciesSerialized\r\n        +HashSet~int~ TwoTX3rdOrder\r\n        +string TwoTX3rdOrderSerialized\r\n        +HashSet~int~ TwoTX5rdOrder\r\n        +string TwoTX5rdOrderSerialized\r\n        +HashSet~int~ TwoTX7rdOrder\r\n        +string TwoTX7rdOrderSerialized\r\n        +HashSet~int~ TwoTX9rdOrder\r\n        +string TwoTX9rdOrderSerialized\r\n        +HashSet~int~ ThreeTX3rdOrder\r\n        +string ThreeTX3rdOrderSerialized\r\n        +Dictionary~int,FrequencyData~ GroupData\r\n    }\r\n\r\n    class RFBackupFrequency {\r\n        +int ID\r\n        +string Brand\r\n        +string Model\r\n        +string Frequency\r\n        +int ChannelIndex\r\n        +int BackupFrequency\r\n        +bool IsUsed\r\n        +float MinRange\r\n        +float MaxRange\r\n        +float Step\r\n    }\r\n\r\n    class DeviceDiscoveredEventArgs {\r\n        +string Name\r\n        +string Brand\r\n        +string Type\r\n        +string SerialNumber\r\n        +string IPAddress\r\n        +string Frequency\r\n        +List~ChannelInfo~ Channels\r\n        +bool IsSynced\r\n    }\r\n\r\n    class ChannelInfo {\r\n        +int ChannelNumber\r\n        +string Name\r\n        +string Frequency\r\n    }\r\n\r\n    %% Services R\xe9els\r\n    class RFDeviceService {\r\n        +List~RFDevice~ Devices\r\n    }\r\n\r\n    class RFchannelService {\r\n        +List~RFChannel~ Channels\r\n    }\r\n\r\n    class FrequencyDataService {\r\n        +FrequencyData FrequencyData\r\n    }\r\n\r\n    class FrequencyCalculationService {\r\n        -DevicesViewModel _devicesViewModel\r\n        -GroupsViewModel _groupsViewModel\r\n        -BackupFrequenciesViewModel _backupFrequenciesViewModel\r\n        -ExclusionChannelViewModel _exclusionChannelViewModel\r\n        -FrequencyDataViewModel _frequencyDataViewModel\r\n        +CalculateFrequenciesAsync() Task\r\n        +FindOverlappingGroups() List~List~RFGroup~~\r\n        +DoGroupsOverlap(RFGroup group1, RFGroup group2) bool\r\n        +GetExcludedRanges() List~(float Start, float End)~\r\n        +GetDevicesForGroupSet(List~RFGroup~ groupSet) List~RFDevice~\r\n    }\r\n\r\n    class DeviceMappingService {\r\n        -UDPCommunicationService _communicationService\r\n        -IDeviceCommandSet _commandSet\r\n        -IEnumerable~IDeviceHandler~ _deviceHandlers\r\n        -DevicesViewModel _devicesViewModel\r\n        -DiscoveryService _discoveryService\r\n        +CastDeviceDiscoveredToRFDevice(DeviceDiscoveredEventArgs device) RFDevice\r\n        +FirstSyncToDevice(RFDevice offlineDevice, RFDevice onlineDevice) Task~List~string~~\r\n        +SyncToDevice(RFDevice device) Task~List~string~~\r\n        +FirstSyncFromDevice(RFDevice device) Task\r\n        +SyncFromDevice(RFDevice device) Task\r\n        +SyncAllFromDevice() Task~List~string~~\r\n        +SyncAllToDevice() Task~List~string~~\r\n        +FetchDeviceData(RFDevice device) Task~DeviceDiscoveredEventArgs~\r\n        +IsDevicePendingSync(RFDevice device) Task~bool~\r\n        -GetAppropriateHandler(RFDevice device) IDeviceHandler\r\n    }\r\n\r\n    class DiscoveryService {\r\n        -MulticastService _multicastService\r\n        -ServiceDiscovery _serviceDiscovery\r\n        -List~IDeviceHandler~ _handlers\r\n        -DevicesViewModel _devicesViewModel\r\n        -Timer _syncTimer\r\n        +List~DeviceDiscoveredEventArgs~ DiscoveredDevices\r\n        +event EventHandler~DeviceDiscoveredEventArgs~ DeviceDiscovered\r\n        +StartDiscovery() Task\r\n        +StopDiscovery() Task\r\n        +DetectDevicesAsync() Task\r\n        +CheckDeviceSync(object state) Task\r\n        +TriggerSennheiserDiscovery() Task\r\n        +TriggerG4Discovery() Task\r\n        +TriggerShureDiscovery() Task\r\n        -OnServiceDiscovered(object sender, ServiceInstanceEventArgs e)\r\n        -OnServiceInstanceDiscovered(object sender, ServiceInstanceEventArgs e)\r\n        -GetAppropriateHandler(RFDevice device) IDeviceHandler\r\n        -GetAppropriateHandlerForType(string brand, string type) IDeviceHandler\r\n        -CheckSingleDeviceSync(RFDevice device) Task\r\n    }\r\n\r\n    %% Interfaces R\xe9elles\r\n    class IDeviceHandler {\r\n        <<interface>>\r\n        +string Brand\r\n        +CanHandle(string serviceName) bool\r\n        +HandleDevice(DeviceDiscoveredEventArgs deviceInfo) Task\r\n        +IsDevicePendingSync(DeviceDiscoveredEventArgs deviceInfo) Task~(bool IsEqual, bool IsNotResponding)~\r\n        +SyncToDevice(DeviceDiscoveredEventArgs deviceInfo) Task~List~string~~\r\n    }\r\n\r\n    class IDeviceCommandSet {\r\n        <<interface>>\r\n        +GetModelCommand() string\r\n        +GetFrequencyCodeCommand() string\r\n        +GetSerialCommand() string\r\n        +GetChannelFrequencyCommand(int channel) string\r\n        +GetChannelNameCommand(int channel) string\r\n        +GetSignalQualityCommand(int channel) string\r\n        +SetChannelFrequencyCommand(int channel, int frequency) string\r\n        +SetChannelNameCommand(int channel, string name) string\r\n        +SetSignalQualityCommand(int channel, int quality) string\r\n    }\r\n\r\n    %% Handlers R\xe9els\r\n    class SennheiserDeviceHandler {\r\n        -UDPCommunicationService _communicationService\r\n        -SennheiserCommandSet _commandSet\r\n        -int Port = 45\r\n        +string Brand = "Sennheiser"\r\n        +CanHandle(string serviceName) bool\r\n        +HandleDevice(DeviceDiscoveredEventArgs deviceInfo) Task\r\n        +IsDevicePendingSync(DeviceDiscoveredEventArgs deviceInfo) Task~(bool, bool)~\r\n        +SyncToDevice(DeviceDiscoveredEventArgs deviceInfo) Task~List~string~~\r\n        +SendCommandAndExtractValueAsync(string ip, int port, string command, params string[] jsonPath) Task~string~\r\n    }\r\n\r\n    class SennheiserG4DeviceHandler {\r\n        -UDPCommunicationService _communicationService\r\n        -SennheiserG4CommandSet _commandSet\r\n        -DeviceData _deviceData\r\n        +string Brand = "Sennheiser"\r\n        +CanHandle(string serviceName) bool\r\n        +HandleDevice(DeviceDiscoveredEventArgs deviceInfo) Task\r\n        +IsDevicePendingSync(DeviceDiscoveredEventArgs deviceInfo) Task~(bool, bool)~\r\n        +SyncToDevice(DeviceDiscoveredEventArgs deviceInfo) Task~List~string~~\r\n        -DetermineFrequencyBand(int minFreq, int maxFreq) string\r\n    }\r\n\r\n    class ShureDeviceHandler {\r\n        -TCPCommunicationService _communicationService\r\n        -ShureCommandSet _commandSet\r\n        +string Brand = "Shure"\r\n        +CanHandle(string serviceName) bool\r\n        +HandleDevice(DeviceDiscoveredEventArgs deviceInfo) Task\r\n        +IsDevicePendingSync(DeviceDiscoveredEventArgs deviceInfo) Task~(bool, bool)~\r\n        +SyncToDevice(DeviceDiscoveredEventArgs deviceInfo) Task~List~string~~\r\n        +SendCommandAndExtractValueAsync(string ip, string command) Task~string~\r\n    }\r\n\r\n    %% Command Sets R\xe9els\r\n    class SennheiserCommandSet {\r\n        +GetModelCommand() string\r\n        +GetFrequencyCodeCommand() string\r\n        +GetSerialCommand() string\r\n        +GetChannelNameCommand(int channel) string\r\n        +GetChannelFrequencyCommand(int channel) string\r\n        +GetSignalQualityCommand(int channel) string\r\n        +SetChannelFrequencyCommand(int channel, int frequency) string\r\n        +SetChannelNameCommand(int channel, string name) string\r\n        +SetSignalQualityCommand(int channel, int quality) string\r\n    }\r\n\r\n    class SennheiserG4CommandSet {\r\n        +GetModelCommand() string\r\n        +GetFrequencyCodeCommand() string\r\n        +GetSerialCommand() string\r\n        +GetChannelNameCommand(int channel) string\r\n        +GetChannelFrequencyCommand(int channel) string\r\n        +GetSignalQualityCommand(int channel) string\r\n        +GetMuteCommand(int channel) string\r\n        +GetSensitivityCommand(int channel) string\r\n        +GetModeCommand(int channel) string\r\n        +SetChannelFrequencyCommand(int channel, int frequency) string\r\n        +SetChannelNameCommand(int channel, string name) string\r\n        +SetMuteCommand(int channel, bool mute) string\r\n        +SetSensitivityCommand(int channel, int sensitivity) string\r\n        +SetModeCommand(int channel, bool stereo) string\r\n        +GetPushCommand(int timeoutSeconds, int cycleMilliseconds, int updateMode) string\r\n        +GetBankListCommand(int bankNumber) string\r\n    }\r\n\r\n    class ShureCommandSet {\r\n        +GetModelCommand() string\r\n        +GetFrequencyCodeCommand() string\r\n        +GetSerialCommand() string\r\n        +GetChannelNameCommand(int channel) string\r\n        +GetChannelFrequencyCommand(int channel) string\r\n        +GetSignalQualityCommand(int channel) string\r\n        +SetChannelFrequencyCommand(int channel, int frequency) string\r\n        +SetChannelNameCommand(int channel, string name) string\r\n        +SetSignalQualityCommand(int channel, int quality) string\r\n    }\r\n\r\n    %% Relations R\xe9elles\r\n    RFDevice "1" --\x3e "*" RFChannel : contains\r\n    RFDevice "*" --\x3e "1" RFGroup : belongs to\r\n    RFGroup "1" --\x3e "*" TimePeriod : contains\r\n    RFGroup "1" --\x3e "*" RFDevice : contains\r\n    DeviceDiscoveredEventArgs "1" --\x3e "*" ChannelInfo : contains\r\n    \r\n    RFDeviceService "1" --\x3e "*" RFDevice : manages\r\n    RFchannelService "1" --\x3e "*" RFChannel : manages\r\n    FrequencyDataService "1" --\x3e "1" FrequencyData : manages\r\n    \r\n    DiscoveryService "1" --\x3e "*" IDeviceHandler : uses\r\n    DiscoveryService "1" --\x3e "*" DeviceDiscoveredEventArgs : discovers\r\n    DeviceMappingService "1" --\x3e "*" IDeviceHandler : uses\r\n    FrequencyCalculationService --\x3e DevicesViewModel : uses\r\n    FrequencyCalculationService --\x3e GroupsViewModel : uses\r\n    FrequencyCalculationService --\x3e BackupFrequenciesViewModel : uses\r\n    \r\n    IDeviceHandler <|.. SennheiserDeviceHandler : implements\r\n    IDeviceHandler <|.. SennheiserG4DeviceHandler : implements\r\n    IDeviceHandler <|.. ShureDeviceHandler : implements\r\n    \r\n    IDeviceCommandSet <|.. SennheiserCommandSet : implements\r\n    IDeviceCommandSet <|.. SennheiserG4CommandSet : implements\r\n    IDeviceCommandSet <|.. ShureCommandSet : implements\r\n    \r\n    SennheiserDeviceHandler --\x3e SennheiserCommandSet : uses\r\n    SennheiserG4DeviceHandler --\x3e SennheiserG4CommandSet : uses\r\n    ShureDeviceHandler --\x3e ShureCommandSet : uses'}),"\n",(0,s.jsx)(n.h2,{id:"analyse-des-corrections-apport\xe9es",children:"Analyse des Corrections Apport\xe9es"}),"\n",(0,s.jsxs)(n.h3,{id:"-mod\xe8les-corrig\xe9s",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Mod\xe8les Corrig\xe9s"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RFDevice"})," : Ajout des vraies propri\xe9t\xe9s (",(0,s.jsx)(n.code,{children:"IsSynced"}),", ",(0,s.jsx)(n.code,{children:"IsOnline"}),", ",(0,s.jsx)(n.code,{children:"PendingSync"}),", etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RFChannel"})," : M\xe9thodes r\xe9elles de calcul d'intermodulations et de fr\xe9quences"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RFGroup"})," : Collections en lecture seule avec m\xe9thodes d'ajout/suppression"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FrequencyData"})," : Ajout ",(0,s.jsx)(n.code,{children:"GroupData"})," et structures HashSet r\xe9elles"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RFBackupFrequency"})," : Nouvelle classe manquante dans l'ancien diagramme"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-services-corrig\xe9s",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Services Corrig\xe9s"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FrequencyCalculationService"})," : Vraies d\xe9pendances vers ViewModels"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DeviceMappingService"})," : M\xe9thodes de synchronisation bidirectionnelle"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DiscoveryService"})," : Services multicast et handlers multiples"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-handlers-corrig\xe9s",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Handlers Corrig\xe9s"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interface IDeviceHandler"})," : Signature r\xe9elle avec ",(0,s.jsx)(n.code,{children:"Task<(bool, bool)>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handlers sp\xe9cialis\xe9s"})," : G4, Standard, Shure avec leurs sp\xe9cificit\xe9s"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command Sets"})," : G4 \xe9tendu avec commandes sp\xe9cifiques"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-relations-corrig\xe9es",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Relations Corrig\xe9es"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"D\xe9pendances r\xe9elles entre services"}),"\n",(0,s.jsx)(n.li,{children:"Injection de d\xe9pendances via constructeur"}),"\n",(0,s.jsx)(n.li,{children:"Relations d'h\xe9ritage et impl\xe9mentation exactes"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);